// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.viaoa.cs;

public final class OAObjectServerImpl_Stub
    extends java.rmi.server.RemoteStub
    implements com.viaoa.cs.OAObjectServer, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("int addToCache(java.lang.Object)"),
	new java.rmi.server.Operation("void close()"),
	new java.rmi.server.Operation("java.lang.Object datasource(com.viaoa.cs.OAObjectMessage)"),
	new java.rmi.server.Operation("java.lang.Object getAllLockedObjects()[]"),
	new java.rmi.server.Operation("int getId()"),
	new java.rmi.server.Operation("com.viaoa.object.OALock getLock(java.lang.Class, java.lang.Object[])"),
	new java.rmi.server.Operation("com.viaoa.cs.OAObjectMessage getMessages()[]"),
	new java.rmi.server.Operation("int getNextFiftyObjectGuids()"),
	new java.rmi.server.Operation("boolean isLocked(java.lang.Class, java.lang.Object[])"),
	new java.rmi.server.Operation("void lock(java.lang.Class, java.lang.Object[], java.lang.Object)"),
	new java.rmi.server.Operation("int removeFromCache(java.lang.Class, com.viaoa.object.OAObjectKey[])"),
	new java.rmi.server.Operation("void sendMessage(com.viaoa.cs.OAObjectMessage)"),
	new java.rmi.server.Operation("void unlock(java.lang.Class, java.lang.Object[])")
    };
    
    private static final long interfaceHash = -7724576276055348253L;
    
    private static final long serialVersionUID = 2;
    
    private static boolean useNewInvoke;
    private static java.lang.reflect.Method $method_addToCache_0;
    private static java.lang.reflect.Method $method_close_1;
    private static java.lang.reflect.Method $method_datasource_2;
    private static java.lang.reflect.Method $method_getAllLockedObjects_3;
    private static java.lang.reflect.Method $method_getId_4;
    private static java.lang.reflect.Method $method_getLock_5;
    private static java.lang.reflect.Method $method_getMessages_6;
    private static java.lang.reflect.Method $method_getNextFiftyObjectGuids_7;
    private static java.lang.reflect.Method $method_isLocked_8;
    private static java.lang.reflect.Method $method_lock_9;
    private static java.lang.reflect.Method $method_removeFromCache_10;
    private static java.lang.reflect.Method $method_sendMessage_11;
    private static java.lang.reflect.Method $method_unlock_12;
    
    static {
	try {
	    java.rmi.server.RemoteRef.class.getMethod("invoke",
		new java.lang.Class[] {
		    java.rmi.Remote.class,
		    java.lang.reflect.Method.class,
		    java.lang.Object[].class,
		    long.class
		});
	    useNewInvoke = true;
	    $method_addToCache_0 = com.viaoa.cs.OAObjectServer.class.getMethod("addToCache", new java.lang.Class[] {java.lang.Object.class});
	    $method_close_1 = com.viaoa.cs.OAObjectServer.class.getMethod("close", new java.lang.Class[] {});
	    $method_datasource_2 = com.viaoa.cs.OAObjectServer.class.getMethod("datasource", new java.lang.Class[] {com.viaoa.cs.OAObjectMessage.class});
	    $method_getAllLockedObjects_3 = com.viaoa.cs.OAObjectServer.class.getMethod("getAllLockedObjects", new java.lang.Class[] {});
	    $method_getId_4 = com.viaoa.cs.OAObjectServer.class.getMethod("getId", new java.lang.Class[] {});
	    $method_getLock_5 = com.viaoa.cs.OAObjectServer.class.getMethod("getLock", new java.lang.Class[] {java.lang.Class.class, java.lang.Object[].class});
	    $method_getMessages_6 = com.viaoa.cs.OAObjectServer.class.getMethod("getMessages", new java.lang.Class[] {});
	    $method_getNextFiftyObjectGuids_7 = com.viaoa.cs.OAObjectServer.class.getMethod("getNextFiftyObjectGuids", new java.lang.Class[] {});
	    $method_isLocked_8 = com.viaoa.cs.OAObjectServer.class.getMethod("isLocked", new java.lang.Class[] {java.lang.Class.class, java.lang.Object[].class});
	    $method_lock_9 = com.viaoa.cs.OAObjectServer.class.getMethod("lock", new java.lang.Class[] {java.lang.Class.class, java.lang.Object[].class, java.lang.Object.class});
	    $method_removeFromCache_10 = com.viaoa.cs.OAObjectServer.class.getMethod("removeFromCache", new java.lang.Class[] {java.lang.Class.class, com.viaoa.object.OAObjectKey[].class});
	    $method_sendMessage_11 = com.viaoa.cs.OAObjectServer.class.getMethod("sendMessage", new java.lang.Class[] {com.viaoa.cs.OAObjectMessage.class});
	    $method_unlock_12 = com.viaoa.cs.OAObjectServer.class.getMethod("unlock", new java.lang.Class[] {java.lang.Class.class, java.lang.Object[].class});
	} catch (java.lang.NoSuchMethodException e) {
	    useNewInvoke = false;
	}
    }
    
    // constructors
    public OAObjectServerImpl_Stub() {
	super();
    }
    public OAObjectServerImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of addToCache(Object)
    public int addToCache(java.lang.Object $param_Object_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_addToCache_0, new java.lang.Object[] {$param_Object_1}, 721800160424121760L);
		return ((java.lang.Integer) $result).intValue();
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_Object_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		int $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = in.readInt();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of close()
    public void close()
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_close_1, null, -4742752445160157748L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of datasource(OAObjectMessage)
    public java.lang.Object datasource(com.viaoa.cs.OAObjectMessage $param_OAObjectMessage_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_datasource_2, new java.lang.Object[] {$param_OAObjectMessage_1}, -5692643038476387868L);
		return ((java.lang.Object) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 2, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_OAObjectMessage_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.lang.Object $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.Object) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getAllLockedObjects()
    public java.lang.Object[] getAllLockedObjects()
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_getAllLockedObjects_3, null, 2289697014530810222L);
		return ((java.lang.Object[]) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 3, interfaceHash);
		ref.invoke(call);
		java.lang.Object[] $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.Object[]) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getId()
    public int getId()
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_getId_4, null, -5755782352518317201L);
		return ((java.lang.Integer) $result).intValue();
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 4, interfaceHash);
		ref.invoke(call);
		int $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = in.readInt();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getLock(Class, Object[])
    public com.viaoa.object.OALock getLock(java.lang.Class $param_Class_1, java.lang.Object[] $param_arrayOf_Object_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_getLock_5, new java.lang.Object[] {$param_Class_1, $param_arrayOf_Object_2}, -7229484172545011495L);
		return ((com.viaoa.object.OALock) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 5, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_Class_1);
		    out.writeObject($param_arrayOf_Object_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		com.viaoa.object.OALock $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (com.viaoa.object.OALock) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getMessages()
    public com.viaoa.cs.OAObjectMessage[] getMessages()
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_getMessages_6, null, 7174397702787841995L);
		return ((com.viaoa.cs.OAObjectMessage[]) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 6, interfaceHash);
		ref.invoke(call);
		com.viaoa.cs.OAObjectMessage[] $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (com.viaoa.cs.OAObjectMessage[]) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getNextFiftyObjectGuids()
    public int getNextFiftyObjectGuids()
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_getNextFiftyObjectGuids_7, null, -5455327502571224064L);
		return ((java.lang.Integer) $result).intValue();
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 7, interfaceHash);
		ref.invoke(call);
		int $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = in.readInt();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of isLocked(Class, Object[])
    public boolean isLocked(java.lang.Class $param_Class_1, java.lang.Object[] $param_arrayOf_Object_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_isLocked_8, new java.lang.Object[] {$param_Class_1, $param_arrayOf_Object_2}, -3443289569282083105L);
		return ((java.lang.Boolean) $result).booleanValue();
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 8, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_Class_1);
		    out.writeObject($param_arrayOf_Object_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		boolean $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = in.readBoolean();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of lock(Class, Object[], Object)
    public void lock(java.lang.Class $param_Class_1, java.lang.Object[] $param_arrayOf_Object_2, java.lang.Object $param_Object_3)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_lock_9, new java.lang.Object[] {$param_Class_1, $param_arrayOf_Object_2, $param_Object_3}, -2161039555823018940L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 9, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_Class_1);
		    out.writeObject($param_arrayOf_Object_2);
		    out.writeObject($param_Object_3);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of removeFromCache(Class, OAObjectKey[])
    public int removeFromCache(java.lang.Class $param_Class_1, com.viaoa.object.OAObjectKey[] $param_arrayOf_OAObjectKey_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_removeFromCache_10, new java.lang.Object[] {$param_Class_1, $param_arrayOf_OAObjectKey_2}, 3621655759847329329L);
		return ((java.lang.Integer) $result).intValue();
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 10, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_Class_1);
		    out.writeObject($param_arrayOf_OAObjectKey_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		int $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = in.readInt();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of sendMessage(OAObjectMessage)
    public void sendMessage(com.viaoa.cs.OAObjectMessage $param_OAObjectMessage_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_sendMessage_11, new java.lang.Object[] {$param_OAObjectMessage_1}, -1170964255731735299L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 11, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_OAObjectMessage_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of unlock(Class, Object[])
    public void unlock(java.lang.Class $param_Class_1, java.lang.Object[] $param_arrayOf_Object_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_unlock_12, new java.lang.Object[] {$param_Class_1, $param_arrayOf_Object_2}, -410465285962080514L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 12, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_Class_1);
		    out.writeObject($param_arrayOf_Object_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
