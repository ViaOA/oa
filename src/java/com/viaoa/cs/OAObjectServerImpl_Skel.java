// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.viaoa.cs;

public final class OAObjectServerImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("int addToCache(java.lang.Object)"),
	new java.rmi.server.Operation("void close()"),
	new java.rmi.server.Operation("java.lang.Object datasource(com.viaoa.cs.OAObjectMessage)"),
	new java.rmi.server.Operation("java.lang.Object getAllLockedObjects()[]"),
	new java.rmi.server.Operation("int getId()"),
	new java.rmi.server.Operation("com.viaoa.object.OALock getLock(java.lang.Class, java.lang.Object[])"),
	new java.rmi.server.Operation("com.viaoa.cs.OAObjectMessage getMessages()[]"),
	new java.rmi.server.Operation("int getNextFiftyObjectGuids()"),
	new java.rmi.server.Operation("boolean isLocked(java.lang.Class, java.lang.Object[])"),
	new java.rmi.server.Operation("void lock(java.lang.Class, java.lang.Object[], java.lang.Object)"),
	new java.rmi.server.Operation("int removeFromCache(java.lang.Class, com.viaoa.object.OAObjectKey[])"),
	new java.rmi.server.Operation("void sendMessage(com.viaoa.cs.OAObjectMessage)"),
	new java.rmi.server.Operation("void unlock(java.lang.Class, java.lang.Object[])")
    };
    
    private static final long interfaceHash = -7724576276055348253L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (opnum < 0) {
	    if (hash == 721800160424121760L) {
		opnum = 0;
	    } else if (hash == -4742752445160157748L) {
		opnum = 1;
	    } else if (hash == -5692643038476387868L) {
		opnum = 2;
	    } else if (hash == 2289697014530810222L) {
		opnum = 3;
	    } else if (hash == -5755782352518317201L) {
		opnum = 4;
	    } else if (hash == -7229484172545011495L) {
		opnum = 5;
	    } else if (hash == 7174397702787841995L) {
		opnum = 6;
	    } else if (hash == -5455327502571224064L) {
		opnum = 7;
	    } else if (hash == -3443289569282083105L) {
		opnum = 8;
	    } else if (hash == -2161039555823018940L) {
		opnum = 9;
	    } else if (hash == 3621655759847329329L) {
		opnum = 10;
	    } else if (hash == -1170964255731735299L) {
		opnum = 11;
	    } else if (hash == -410465285962080514L) {
		opnum = 12;
	    } else {
		throw new java.rmi.UnmarshalException("invalid method hash");
	    }
	} else {
	    if (hash != interfaceHash)
		throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	}
	
	com.viaoa.cs.OAObjectServerImpl server = (com.viaoa.cs.OAObjectServerImpl) obj;
	switch (opnum) {
	case 0: // addToCache(Object)
	{
	    java.lang.Object $param_Object_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Object_1 = (java.lang.Object) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.addToCache($param_Object_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // close()
	{
	    call.releaseInputStream();
	    server.close();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // datasource(OAObjectMessage)
	{
	    com.viaoa.cs.OAObjectMessage $param_OAObjectMessage_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_OAObjectMessage_1 = (com.viaoa.cs.OAObjectMessage) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.lang.Object $result = server.datasource($param_OAObjectMessage_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // getAllLockedObjects()
	{
	    call.releaseInputStream();
	    java.lang.Object[] $result = server.getAllLockedObjects();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // getId()
	{
	    call.releaseInputStream();
	    int $result = server.getId();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // getLock(Class, Object[])
	{
	    java.lang.Class $param_Class_1;
	    java.lang.Object[] $param_arrayOf_Object_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Class_1 = (java.lang.Class) in.readObject();
		$param_arrayOf_Object_2 = (java.lang.Object[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.viaoa.object.OALock $result = server.getLock($param_Class_1, $param_arrayOf_Object_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // getMessages()
	{
	    call.releaseInputStream();
	    com.viaoa.cs.OAObjectMessage[] $result = server.getMessages();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 7: // getNextFiftyObjectGuids()
	{
	    call.releaseInputStream();
	    int $result = server.getNextFiftyObjectGuids();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 8: // isLocked(Class, Object[])
	{
	    java.lang.Class $param_Class_1;
	    java.lang.Object[] $param_arrayOf_Object_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Class_1 = (java.lang.Class) in.readObject();
		$param_arrayOf_Object_2 = (java.lang.Object[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.isLocked($param_Class_1, $param_arrayOf_Object_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 9: // lock(Class, Object[], Object)
	{
	    java.lang.Class $param_Class_1;
	    java.lang.Object[] $param_arrayOf_Object_2;
	    java.lang.Object $param_Object_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Class_1 = (java.lang.Class) in.readObject();
		$param_arrayOf_Object_2 = (java.lang.Object[]) in.readObject();
		$param_Object_3 = (java.lang.Object) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.lock($param_Class_1, $param_arrayOf_Object_2, $param_Object_3);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 10: // removeFromCache(Class, OAObjectKey[])
	{
	    java.lang.Class $param_Class_1;
	    com.viaoa.object.OAObjectKey[] $param_arrayOf_OAObjectKey_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Class_1 = (java.lang.Class) in.readObject();
		$param_arrayOf_OAObjectKey_2 = (com.viaoa.object.OAObjectKey[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.removeFromCache($param_Class_1, $param_arrayOf_OAObjectKey_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 11: // sendMessage(OAObjectMessage)
	{
	    com.viaoa.cs.OAObjectMessage $param_OAObjectMessage_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_OAObjectMessage_1 = (com.viaoa.cs.OAObjectMessage) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.sendMessage($param_OAObjectMessage_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 12: // unlock(Class, Object[])
	{
	    java.lang.Class $param_Class_1;
	    java.lang.Object[] $param_arrayOf_Object_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Class_1 = (java.lang.Class) in.readObject();
		$param_arrayOf_Object_2 = (java.lang.Object[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.unlock($param_Class_1, $param_arrayOf_Object_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
