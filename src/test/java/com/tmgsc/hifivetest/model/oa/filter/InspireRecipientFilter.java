// Generated by OABuilder
package com.tmgsc.hifivetest.model.oa.filter;

import com.tmgsc.hifivetest.model.oa.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import java.util.*;

@OAClass(addToCache=false, initialize=true, useDataSource=false, localOnly=true)
public class InspireRecipientFilter extends OAObject {
    private static final long serialVersionUID = 1L;


    public HubFilter createOpenFilter(Hub<InspireRecipient> hubMaster, Hub<InspireRecipient> hub) {
        return createOpenFilter(hubMaster, hub, false);
    }
    public HubFilter createOpenFilter(final Hub<InspireRecipient> hubMaster, Hub<InspireRecipient> hub, boolean bAllHubs) {
        HubFilter filter = new HubFilter(hubMaster, hub) {
            @Override
            public boolean isUsed(Object object) {
                InspireRecipient inspireRecipient = (InspireRecipient) object;
                return isUsedForOpenFilter(inspireRecipient);
            }
        };
        filter.addDependentProperty(InspireRecipient.PROPERTY_CompletedDate);
        filter.addDependentProperty(OAString.cpp(InspireRecipient.PROPERTY_Inspire, Inspire.PROPERTY_WasAddedToEmployee));
        filter.addDependentProperty(OAString.cpp(InspireRecipient.PROPERTY_InspireApprovals, InspireApproval.PROPERTY_Status));
        filter.addDependentProperty(InspireRecipient.PROPERTY_Employee);
 
        if (!bAllHubs) return filter;
        filter.setServerSideOnly(true); 
        // need to listen to all InspireRecipient
        HubCacheAdder hubCacheAdder = new HubCacheAdder(hubMaster);
        return filter;
    }

    public boolean isUsedForOpenFilter(InspireRecipient inspireRecipient) {
        if (inspireRecipient == null) return false;
        if (inspireRecipient.getEmployee() == null) return false;
        if (inspireRecipient.getCompletedDate() != null) return false;
        Inspire inspire = inspireRecipient.getInspire();
        if (inspire == null) return false;
        if (!inspire.getWasAddedToEmployee()) return false;
        return true;
    }
    public HubFilter createMissingManagerFilter(Hub<InspireRecipient> hubMaster, Hub<InspireRecipient> hub) {
        return createMissingManagerFilter(hubMaster, hub, false);
    }
    public HubFilter createMissingManagerFilter(final Hub<InspireRecipient> hubMaster, Hub<InspireRecipient> hub, boolean bAllHubs) {
        HubFilter filter = new HubFilter(hubMaster, hub) {
            @Override
            public boolean isUsed(Object object) {
                InspireRecipient inspireRecipient = (InspireRecipient) object;
                return isUsedForMissingManagerFilter(inspireRecipient);
            }
        };
        filter.addDependentProperty(InspireRecipient.PROPERTY_HasMissingManager);
        filter.addDependentProperty(OAString.cpp(InspireRecipient.PROPERTY_Inspire, Inspire.PROPERTY_WasAddedToEmployee));
        filter.addDependentProperty(OAString.cpp(InspireRecipient.PROPERTY_InspireApprovals, InspireApproval.PROPERTY_Status));
 
        if (!bAllHubs) return filter;
        filter.setServerSideOnly(true); 
        // need to listen to all InspireRecipient
        HubCacheAdder hubCacheAdder = new HubCacheAdder(hubMaster);
        return filter;
    }

    public boolean isUsedForMissingManagerFilter(InspireRecipient inspireRecipient) {
        if (inspireRecipient.getCompletedDate() != null) return false;
        if (inspireRecipient.getInspire() == null) return false;
        if (inspireRecipient.getEmployee() == null) return false;
        if (!inspireRecipient.getInspire().getWasAddedToEmployee()) return false;
        return inspireRecipient.getHasMissingManager();
    }
    public HubFilter createApprovedOnlyFilter(Hub<InspireRecipient> hubMaster, Hub<InspireRecipient> hub) {
        return createApprovedOnlyFilter(hubMaster, hub, false);
    }
    public HubFilter createApprovedOnlyFilter(final Hub<InspireRecipient> hubMaster, Hub<InspireRecipient> hub, boolean bAllHubs) {
        HubFilter filter = new HubFilter(hubMaster, hub) {
            @Override
            public boolean isUsed(Object object) {
                InspireRecipient inspireRecipient = (InspireRecipient) object;
                return isUsedForApprovedOnlyFilter(inspireRecipient);
            }
        };
        filter.addDependentProperty(InspireRecipient.PROPERTY_ApprovalStatus);
 
        if (!bAllHubs) return filter;
        filter.setServerSideOnly(true); 
        // need to listen to all InspireRecipient
        HubCacheAdder hubCacheAdder = new HubCacheAdder(hubMaster);
        return filter;
    }

    public boolean isUsedForApprovedOnlyFilter(InspireRecipient inspireRecipient) {
        boolean bResult = true;
        // approvalStatus
        bResult = false;
        int approvalStatus = inspireRecipient.getApprovalStatus();
        if (approvalStatus == InspireApproval.STATUS_Approved) bResult = true;
        return bResult;
    }
    
    public HubFilter createRecentFilter(Hub<InspireRecipient> hubMaster, Hub<InspireRecipient> hub) {
        return createRecentFilter(hubMaster, hub, false);
    }
    public HubFilter createRecentFilter(final Hub<InspireRecipient> hubMaster, Hub<InspireRecipient> hub, boolean bAllHubs) {
        HubFilter filter = new HubFilter(hubMaster, hub) {
            @Override
            public boolean isUsed(Object object) {
                InspireRecipient inspireRecipient = (InspireRecipient) object;
                return isUsedForRecentFilter(inspireRecipient);
            }
        };
        filter.addDependentProperty(InspireRecipient.PROPERTY_CompletedDate);
 
        if (!bAllHubs) return filter;
        filter.setServerSideOnly(true); 
        OAObjectCacheDelegate.addListener(InspireRecipient.class, new HubListenerAdapter() {
            void update(HubEvent e) {
                InspireRecipient obj = (InspireRecipient) e.getObject();
                if (obj == null) return;
                if (!isUsedForRecentFilter(obj)) {
                    hubMaster.remove(obj);
                }
                else if (!hubMaster.contains(e.getObject())) hubMaster.add(obj);
            }

            @Override
            public void afterAdd(HubEvent e) {
                update(e);
            }

            @Override
            public void afterPropertyChange(HubEvent e) {
                String prop = e.getPropertyName();
                if (prop == null) return;
                if (prop.equalsIgnoreCase(InspireRecipient.PROPERTY_CompletedDate)) {
                    update(e);
                }
            }
        });
        return filter;
    }

    public boolean isUsedForRecentFilter(InspireRecipient inspireRecipient) {
        if (inspireRecipient == null) return false;
        OADate completedDate = inspireRecipient.getCompletedDate();
        if (completedDate == null) return false;
        if (inspireRecipient.getApprovalStatus() != InspireApproval.STATUS_Approved) return false;
        
        OADate today = new OADate();
        OADate d = (OADate) completedDate.addDays(30);
        if (today.before(d)) return false; // wait 30 days from completed date
        
        // show up to 60 days from completed date
        d = (OADate) (completedDate).addDays(60);
        return today.before(d);
    }
}
