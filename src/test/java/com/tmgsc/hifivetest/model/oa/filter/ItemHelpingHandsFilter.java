// Generated by OABuilder
package com.tmgsc.hifivetest.model.oa.filter;

import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import java.util.*;
import com.tmgsc.hifivetest.model.oa.*;

@OAClass(useDataSource=false, localOnly=true)
@OAClassFilter(name = "HelpingHands", displayName = "Helping Hands", hasInputParams = false)
public class ItemHelpingHandsFilter extends OAObject implements CustomHubFilter {
    private static final long serialVersionUID = 1L;


    public static final String PPCode = ":HelpingHands()";
    private Hub<Item> hubMaster;
    private Hub<Item> hub;
    private HubFilter<Item> filter;
    private boolean bAllHubs;

    public ItemHelpingHandsFilter(Hub<Item> hub) {
        this(true, null, hub);
    }
    public ItemHelpingHandsFilter(Hub<Item> hubMaster, Hub<Item> hub) {
        this(false, hubMaster, hub);
    }
    public ItemHelpingHandsFilter(boolean bAllHubs, Hub<Item> hubMaster, Hub<Item> hubFiltered) {
        this.hubMaster = hubMaster;
        this.hub = hubFiltered;
        if (hubMaster == null) this.hubMaster = new Hub<Item>(Item.class);
        this.bAllHubs = bAllHubs;
        getHubFilter(); // create filter
    }


    public void reset() {
    }

    public boolean isDataEntered() {
        return false;
    }
    public void refresh() {
        if (filter != null) getHubFilter().refresh();
    }

    @Override
    public HubFilter<Item> getHubFilter() {
        if (filter == null) {
            filter = createHubFilter(hubMaster, hub, bAllHubs);
        }
        return filter;
    }
    protected HubFilter<Item> createHubFilter(final Hub<Item> hubMaster, Hub<Item> hub, boolean bAllHubs) {
        HubFilter<Item> filter = new HubFilter<Item>(hubMaster, hub) {
            @Override
            public boolean isUsed(Item item) {
                return ItemHelpingHandsFilter.this.isUsed(item);
            }
        };
        filter.addDependentProperty(Item.P_ItemTypes);
 
        if (!bAllHubs) return filter;
        // need to listen to all Item
        OAObjectCacheHubAdder hubCacheAdder = new OAObjectCacheHubAdder(hubMaster);
        return filter;
    }

    public boolean isUsed(Item item) {
        // itemTypes
        Hub<ItemType> hubItemTypes = item.getItemTypes();
        for (ItemType itemType : hubItemTypes) {
            if (itemType.getType() == ItemType.TYPE_HELPINGHANDS) { return true; }
        }
        return false;
    }
}
