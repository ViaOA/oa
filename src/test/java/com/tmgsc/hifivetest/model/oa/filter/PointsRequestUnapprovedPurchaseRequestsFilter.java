// Generated by OABuilder
package com.tmgsc.hifivetest.model.oa.filter;

import com.tmgsc.hifivetest.model.oa.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import java.util.*;

@OAClass(useDataSource=false, localOnly=true)
@OAClassFilter(name = "UnapprovedPurchaseRequests", displayName = "Unapproved Purchase Requests", hasInputParams = false, description = "These Requests are being Invoiced, and need Hi5 Approval before these points are granted")
public class PointsRequestUnapprovedPurchaseRequestsFilter extends OAObject implements CustomHubFilter {
    private static final long serialVersionUID = 1L;


    public static final String PPCode = ":UnapprovedPurchaseRequests()";
    private Hub<PointsRequest> hubMaster;
    private Hub<PointsRequest> hub;
    private HubFilter<PointsRequest> filter;
    private boolean bAllHubs;

    public PointsRequestUnapprovedPurchaseRequestsFilter(Hub<PointsRequest> hub) {
        this(true, null, hub);
    }
    public PointsRequestUnapprovedPurchaseRequestsFilter(Hub<PointsRequest> hubMaster, Hub<PointsRequest> hub) {
        this(false, hubMaster, hub);
    }
    public PointsRequestUnapprovedPurchaseRequestsFilter(boolean bAllHubs, Hub<PointsRequest> hubMaster, Hub<PointsRequest> hubFiltered) {
        this.hubMaster = hubMaster;
        this.hub = hubFiltered;
        if (hubMaster == null) this.hubMaster = new Hub<PointsRequest>(PointsRequest.class);
        this.bAllHubs = bAllHubs;
        getHubFilter(); // create filter
    }


    public void reset() {
    }

    public boolean isDataEntered() {
        return false;
    }
    public void refresh() {
        if (filter != null) getHubFilter().refresh();
    }

    @Override
    public HubFilter<PointsRequest> getHubFilter() {
        if (filter == null) {
            filter = createHubFilter(hubMaster, hub, bAllHubs);
        }
        return filter;
    }
    protected HubFilter<PointsRequest> createHubFilter(final Hub<PointsRequest> hubMaster, Hub<PointsRequest> hub, boolean bAllHubs) {
        HubFilter<PointsRequest> filter = new HubFilter<PointsRequest>(hubMaster, hub) {
            @Override
            public boolean isUsed(PointsRequest pointsRequest) {
                return PointsRequestUnapprovedPurchaseRequestsFilter.this.isUsed(pointsRequest);
            }
        };
        filter.addDependentProperty(PointsRequest.P_Approved);
        filter.addDependentProperty(PointsRequest.P_RequestType);
 
        if (!bAllHubs) return filter;
        final ArrayList<Hub> alHub = new ArrayList<Hub>();
        alHub.add(hub);
        alHub.add(hubMaster);
 
        OAObjectCacheDelegate.addListener(PointsRequest.class, new HubListenerAdapter() {
            @Override
            public void afterAdd(HubEvent e) {
                Hub h = e.getHub();
                if (h == null || alHub.contains(h)) return;
                alHub.add(h);
                Hub<PointsRequest> h2 = new Hub<PointsRequest>(PointsRequest.class);
                alHub.add(h2);
                createHubFilter(h, h2, false);
                h2.addHubListener(new HubListenerAdapter() {
                    @Override
                    public void afterAdd(HubEvent e) {
                        hubMaster.add((PointsRequest)e.getObject());
                    }
                    @Override
                    public void afterRemove(HubEvent e) {
                        PointsRequest obj = (PointsRequest) e.getObject();
                        if (!OAObjectHubDelegate.isInHub(obj)) {
                            hubMaster.remove(obj);
                        }
                    }
                });
            }
 
            @Override
            public void afterPropertyChange(HubEvent e) {
                String prop = e.getPropertyName();
                if (prop == null) return;
                if (prop.equalsIgnoreCase(PointsRequest.P_Approved)) {
                    if (!hubMaster.contains(e.getObject())) hubMaster.add((PointsRequest) e.getObject());
                    return;
                }
                if (prop.equalsIgnoreCase(PointsRequest.P_RequestType)) {
                    if (!hubMaster.contains(e.getObject())) hubMaster.add((PointsRequest) e.getObject());
                    return;
                }
            }
        });
        return filter;
    }

    public boolean isUsed(PointsRequest pointsRequest) {
            boolean bResult = true;
            // requestType
            bResult = false;
            int requestType = pointsRequest.getRequestType();
            if (requestType == PointsRequest.REQUESTTYPE_newPointsPurchase || requestType == PointsRequest.REQUESTTYPE_upload) bResult = true;
            if (!bResult) return false;
            // approved
            bResult = false;
            boolean approved = pointsRequest.getApproved();
            if (approved == false) bResult = true;
            return bResult;
    }
    
}
