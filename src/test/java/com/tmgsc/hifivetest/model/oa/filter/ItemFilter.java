// Generated by OABuilder
package com.tmgsc.hifivetest.model.oa.filter;

import com.tmgsc.hifivetest.model.oa.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import java.util.*;

@OAClass(addToCache=false, initialize=true, useDataSource=false, localOnly=true)
public class ItemFilter extends OAObject {
    private static final long serialVersionUID = 1L;


    public HubFilter createHifiveApprovedFilter(Hub<Item> hubMaster, Hub<Item> hub) {
        return createHifiveApprovedFilter(hubMaster, hub, false);
    }
    public HubFilter createHifiveApprovedFilter(final Hub<Item> hubMaster, Hub<Item> hub, boolean bAllHubs) {
        HubFilter filter = new HubFilter(hubMaster, hub) {
            @Override
            public boolean isUsed(Object object) {
                Item item = (Item) object;
                return isUsedForHifiveApprovedFilter(item);
            }
        };
        filter.addDependentProperty(Item.PROPERTY_HifiveRating);
 
        if (!bAllHubs) return filter;
        filter.setServerSideOnly(true); 
        OAObjectCacheDelegate.addListener(Item.class, new HubListenerAdapter() {
            void update(HubEvent e) {
                Item obj = (Item) e.getObject();
                if (obj == null) return;
                if (!isUsedForHifiveApprovedFilter(obj)) {
                    hubMaster.remove(obj);
                }
                else if (!hubMaster.contains(e.getObject())) hubMaster.add(obj);
            }

            @Override
            public void afterAdd(HubEvent e) {
                update(e);
            }

            @Override
            public void afterPropertyChange(HubEvent e) {
                String prop = e.getPropertyName();
                if (prop == null) return;
                if (prop.equalsIgnoreCase(Item.PROPERTY_HifiveRating)) {
                    update(e);
                }
            }
        });
        return filter;
    }

    public boolean isUsedForHifiveApprovedFilter(Item item) {
        boolean bResult = true;
        // hifiveRating
        bResult = false;
        int hifiveRating = item.getHifiveRating();
        if (hifiveRating == Item.HIFIVERATING_approved) bResult = true;
        return bResult;
    }
    
    public HubFilter createHelpingHandsFilter(Hub<Item> hubMaster, Hub<Item> hub) {
        return createHelpingHandsFilter(hubMaster, hub, false);
    }
    public HubFilter createHelpingHandsFilter(final Hub<Item> hubMaster, Hub<Item> hub, boolean bAllHubs) {
        HubFilter filter = new HubFilter(hubMaster, hub) {
            @Override
            public boolean isUsed(Object object) {
                Item item = (Item) object;
                return isUsedForHelpingHandsFilter(item);
            }
        };
        filter.addDependentProperty(Item.PROPERTY_ItemTypes);
 
        if (!bAllHubs) return filter;
        filter.setServerSideOnly(true); 
        // need to listen to all Item
        HubCacheAdder hubCacheAdder = new HubCacheAdder(hubMaster);
        return filter;
    }

    public boolean isUsedForHelpingHandsFilter(Item item) {
        // itemTypes
        Hub<ItemType> hubItemTypes = item.getItemTypes();
        for (ItemType itemType : hubItemTypes) {
            if (itemType.getType() == ItemType.TYPE_HELPINGHANDS) { return true; }
        }
        return false;
    }
}
