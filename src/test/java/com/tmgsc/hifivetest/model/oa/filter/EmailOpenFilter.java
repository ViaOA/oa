// Generated by OABuilder
package com.tmgsc.hifivetest.model.oa.filter;

import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.tmgsc.hifivetest.model.oa.*;

@OAClass(useDataSource=false, localOnly=true)
@OAClassFilter(name = "Open", displayName = "Open Emails", hasInputParams = false)
public class EmailOpenFilter extends OAObject implements CustomHubFilter {
    private static final long serialVersionUID = 1L;

    public static final String PPCode = ":Open()";
    private Hub<Email> hubMaster;
    private Hub<Email> hub;
    private HubFilter<Email> filter;
    private boolean bUseObjectCache;

    public EmailOpenFilter(Hub<Email> hub) {
        this(true, null, hub);
    }
    public EmailOpenFilter(Hub<Email> hubMaster, Hub<Email> hub) {
        this(false, hubMaster, hub);
    }
    public EmailOpenFilter(boolean bUseObjectCache, Hub<Email> hubMaster, Hub<Email> hubFiltered) {
        this.hubMaster = hubMaster;
        this.hub = hubFiltered;
        if (hubMaster == null) this.hubMaster = new Hub<Email>(Email.class);
        this.bUseObjectCache = bUseObjectCache;
        getHubFilter(); // create filter
    }

    public void reset() {
    }

    public boolean isDataEntered() {
        return false;
    }
    public void refresh() {
        if (filter != null) getHubFilter().refresh();
    }

    @Override
    public HubFilter<Email> getHubFilter() {
        if (filter == null) {
            filter = createHubFilter(hubMaster, hub, bUseObjectCache);
        }
        return filter;
    }
    protected HubFilter<Email> createHubFilter(final Hub<Email> hubMaster, Hub<Email> hub, boolean bAllHubs) {
        HubFilter<Email> filter = new HubFilter<Email>(hubMaster, hub) {
            @Override
            public boolean isUsed(Email email) {
                return EmailOpenFilter.this.isUsed(email);
            }
        };
        filter.addDependentProperty(Email.P_SentDateTime);
        filter.addDependentProperty(Email.P_CancelDate);
        filter.addDependentProperty(Email.P_FromEmail);
        filter.addDependentProperty(Email.P_ToEmail);
 
        if (bAllHubs) { 
            new OAObjectCacheFilter<Email>(filter) {
                @Override
                public boolean isUsed(Email email) {
                    if (!super.isUsed(email)) return false;
                    // wants to be added to master, check to see if custom code wants to use it.
                    return isUsedFromObjectCache(email);
                }
            };
        }
        return filter;
    }

    public boolean isUsed(Email email) {
        return email.isOpen();
    }
//qqqqqqqqq needs to have customized from oabuilder object.filter
    public boolean isUsedFromObjectCache(Email email) {
        return true;
    }
    
}
