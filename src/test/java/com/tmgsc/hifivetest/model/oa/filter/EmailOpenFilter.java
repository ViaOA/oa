// Generated by OABuilder
package com.tmgsc.hifivetest.model.oa.filter;

import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import java.util.*;
import com.tmgsc.hifivetest.model.oa.*;

@OAClass(useDataSource=false, localOnly=true)
@OAClassFilter(name = "Open", displayName = "Open Emails", hasInputParams = false)
public class EmailOpenFilter extends OAObject implements CustomHubFilter {
    private static final long serialVersionUID = 1L;


    public static final String PPCode = ":Open()";
    private Hub<Email> hubMaster;
    private Hub<Email> hub;
    private HubFilter<Email> filter;
    private boolean bAllHubs;

    public EmailOpenFilter(Hub<Email> hub) {
        this(true, null, hub);
    }
    public EmailOpenFilter(Hub<Email> hubMaster, Hub<Email> hub) {
        this(false, hubMaster, hub);
    }
    public EmailOpenFilter(boolean bAllHubs, Hub<Email> hubMaster, Hub<Email> hubFiltered) {
        this.hubMaster = hubMaster;
        this.hub = hubFiltered;
        if (hubMaster == null) this.hubMaster = new Hub<Email>(Email.class);
        this.bAllHubs = bAllHubs;
        getHubFilter(); // create filter
    }


    public void reset() {
    }

    public boolean isDataEntered() {
        return false;
    }
    public void refresh() {
        if (filter != null) getHubFilter().refresh();
    }

    @Override
    public HubFilter<Email> getHubFilter() {
        if (filter == null) {
            filter = createHubFilter(hubMaster, hub, bAllHubs);
        }
        return filter;
    }
    protected HubFilter<Email> createHubFilter(final Hub<Email> hubMaster, Hub<Email> hub, boolean bAllHubs) {
        HubFilter<Email> filter = new HubFilter<Email>(hubMaster, hub) {
            @Override
            public boolean isUsed(Email email) {
                return EmailOpenFilter.this.isUsed(email);
            }
        };
        filter.addDependentProperty(Email.P_SentDateTime);
        filter.addDependentProperty(Email.P_CancelDate);
        filter.addDependentProperty(Email.P_FromEmail);
        filter.addDependentProperty(Email.P_ToEmail);
 
        if (!bAllHubs) return filter;
        final ArrayList<Hub> alHub = new ArrayList<Hub>();
        alHub.add(hub);
        alHub.add(hubMaster);
 
        OAObjectCacheDelegate.addListener(Email.class, new HubListenerAdapter() {
            @Override
            public void afterAdd(HubEvent e) {
                Hub h = e.getHub();
                if (h == null || alHub.contains(h)) return;
                alHub.add(h);
                Hub<Email> h2 = new Hub<Email>(Email.class);
                alHub.add(h2);
                createHubFilter(h, h2, false);
                h2.addHubListener(new HubListenerAdapter() {
                    @Override
                    public void afterAdd(HubEvent e) {
                        hubMaster.add((Email)e.getObject());
                    }
                    @Override
                    public void afterRemove(HubEvent e) {
                        Email obj = (Email) e.getObject();
                        if (!OAObjectHubDelegate.isInHub(obj)) {
                            hubMaster.remove(obj);
                        }
                    }
                });
            }
 
            @Override
            public void afterPropertyChange(HubEvent e) {
                String prop = e.getPropertyName();
                if (prop == null) return;
                if (prop.equalsIgnoreCase(Email.P_SentDateTime)) {
                    if (!hubMaster.contains(e.getObject())) hubMaster.add((Email) e.getObject());
                    return;
                }
                if (prop.equalsIgnoreCase(Email.P_CancelDate)) {
                    if (!hubMaster.contains(e.getObject())) hubMaster.add((Email) e.getObject());
                    return;
                }
                if (prop.equalsIgnoreCase(Email.P_FromEmail)) {
                    if (!hubMaster.contains(e.getObject())) hubMaster.add((Email) e.getObject());
                    return;
                }
                if (prop.equalsIgnoreCase(Email.P_ToEmail)) {
                    if (!hubMaster.contains(e.getObject())) hubMaster.add((Email) e.getObject());
                    return;
                }
            }
        });
        return filter;
    }

    public boolean isUsed(Email email) {
        return email.isOpen();
    }
    
}
