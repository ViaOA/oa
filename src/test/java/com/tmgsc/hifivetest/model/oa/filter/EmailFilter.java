// Generated by OABuilder
package com.tmgsc.hifivetest.model.oa.filter;

import com.tmgsc.hifivetest.model.oa.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import java.util.*;

@OAClass(addToCache=false, initialize=true, useDataSource=false, localOnly=true)
public class EmailFilter extends OAObject {
    private static final long serialVersionUID = 1L;


    public HubFilter createOpenFilter(Hub<Email> hubMaster, Hub<Email> hub) {
        return createOpenFilter(hubMaster, hub, false);
    }
    public HubFilter createOpenFilter(final Hub<Email> hubMaster, Hub<Email> hub, boolean bAllHubs) {
        HubFilter filter = new HubFilter(hubMaster, hub) {
            @Override
            public boolean isUsed(Object object) {
                Email email = (Email) object;
                return isUsedForOpenFilter(email);
            }
        };
        filter.addDependentProperty(Email.PROPERTY_SentDateTime);
        filter.addDependentProperty(Email.PROPERTY_FromEmail);
        filter.addDependentProperty(Email.PROPERTY_ToEmail);
        filter.addDependentProperty(Email.PROPERTY_CancelDate);
 
        if (!bAllHubs) return filter;
        filter.setServerSideOnly(true); 
        OAObjectCacheDelegate.addListener(Email.class, new HubListenerAdapter() {
            void update(HubEvent e) {
                Email obj = (Email) e.getObject();
                if (obj == null) return;
                if (!isUsedForOpenFilter(obj)) {
                    hubMaster.remove(obj);
                }
                else if (!hubMaster.contains(e.getObject())) hubMaster.add(obj);
            }

            @Override
            public void afterAdd(HubEvent e) {
                update(e);
            }

            @Override
            public void afterPropertyChange(HubEvent e) {
                String prop = e.getPropertyName();
                if (prop == null) return;
                if (prop.equalsIgnoreCase(Email.PROPERTY_SentDateTime)) {
                    update(e);
                }
                else if (prop.equalsIgnoreCase(Email.PROPERTY_FromEmail)) {
                    update(e);
                }
                else if (prop.equalsIgnoreCase(Email.PROPERTY_ToEmail)) {
                    update(e);
                }
                else if (prop.equalsIgnoreCase(Email.PROPERTY_CancelDate)) {
                    update(e);
                }
            }
        });
        return filter;
    }

    public boolean isUsedForOpenFilter(Email email) {
        return email.isOpen();
    }
    
}
