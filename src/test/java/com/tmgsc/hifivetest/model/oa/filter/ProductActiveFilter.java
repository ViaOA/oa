// Generated by OABuilder
package com.tmgsc.hifivetest.model.oa.filter;

import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import java.util.*;
import com.tmgsc.hifivetest.model.oa.*;

@OAClass(useDataSource=false, localOnly=true)
@OAClassFilter(name = "Active", displayName = "Active", hasInputParams = false)
public class ProductActiveFilter extends OAObject implements CustomHubFilter {
    private static final long serialVersionUID = 1L;


    public static final String PPCode = ":Active()";
    private Hub<Product> hubMaster;
    private Hub<Product> hub;
    private HubFilter<Product> filter;
    private boolean bAllHubs;

    public ProductActiveFilter(Hub<Product> hub) {
        this(true, null, hub);
    }
    public ProductActiveFilter(Hub<Product> hubMaster, Hub<Product> hub) {
        this(false, hubMaster, hub);
    }
    public ProductActiveFilter(boolean bAllHubs, Hub<Product> hubMaster, Hub<Product> hubFiltered) {
        this.hubMaster = hubMaster;
        this.hub = hubFiltered;
        if (hubMaster == null) this.hubMaster = new Hub<Product>(Product.class);
        this.bAllHubs = bAllHubs;
        getHubFilter(); // create filter
    }


    public void reset() {
    }

    public boolean isDataEntered() {
        return false;
    }
    public void refresh() {
        if (filter != null) getHubFilter().refresh();
    }

    @Override
    public HubFilter<Product> getHubFilter() {
        if (filter == null) {
            filter = createHubFilter(hubMaster, hub, bAllHubs);
        }
        return filter;
    }
    protected HubFilter<Product> createHubFilter(final Hub<Product> hubMaster, Hub<Product> hub, boolean bAllHubs) {
        HubFilter<Product> filter = new HubFilter<Product>(hubMaster, hub) {
            @Override
            public boolean isUsed(Product product) {
                return ProductActiveFilter.this.isUsed(product);
            }
        };
        filter.addDependentProperty(Product.P_DiscontinuedDate);
 
        if (!bAllHubs) return filter;
        // need to listen to all Product
        HubObjectCacheAdder hubCacheAdder = new HubObjectCacheAdder(hubMaster);
        return filter;
    }

    public boolean isUsed(Product product) {
        if (product.getDiscontinuedDate() == null) {
            return true;
        }
        return false;
    }
}
