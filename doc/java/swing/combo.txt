


>> date combo + txt editor

        dcbo = new OADateComboBox(getHub(), Pet.PROPERTY_RabiesDate, 8);
        dcbo.setEditor(new OATextField(getHub(), Pet.PROPERTY_RabiesDate, 8));
    note; width is determined by editor width


    public OATextField createInactiveDateTextField() {
        OATextField txt = new OATextField(getHub(), Pet.PROPERTY_InactiveDate, 12);
        txt.setFormat(null);
        txt.setToolTipText("");
        txt.setEnabled(ModelDelegate.getUserAccessHub(), UserAccess.PROPERTY_IsUser);
        setup(txt);
        return txt;
    }
    public OADateComboBox createInactiveDateComboBox(OATextField txtEditor) {
        OADateComboBox cboInactiveDate = new OADateComboBox(getHub(), Pet.PROPERTY_InactiveDate, 8);
        cboInactiveDate.setEditor(txtEditor);
        cboInactiveDate.setToolTipText("inactive date");
        cboInactiveDate.setEnabled(ModelDelegate.getUserAccessHub(), UserAccess.PROPERTY_IsUser);
        return cboInactiveDate;
    }





>> ItemType combo
    public OAComboBox createComboBox() {
        OAComboBox cbo = new OAComboBox(getHub(), ItemType.PROPERTY_Name, 15) {
            @Override
            public Component getRenderer(Component renderer, JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                renderer = super.getRenderer(renderer, list, value, index, isSelected, cellHasFocus);
                /*
                if (value instanceof ItemType && renderer instanceof JLabel) {
                    ItemType user = (ItemType) value;
                    if (user.getInactiveDate() != null) {
                        JLabel lbl = (JLabel) renderer;
                        lbl.setText("<html><b style='color:gray'>"+lbl.getText());
                    }
                }
                */
                return renderer;
            }
            @Override
            public boolean isVisible(boolean bIsCurrentlyVisible) {
                return super.isVisible(bIsCurrentlyVisible);
            }
            @Override
            public boolean isEnabled(boolean bIsCurrentlyEnabled) {
                return super.isEnabled(bIsCurrentlyEnabled);
            }
            @Override
            public String isValid(Object object, Object value) {
                return super.isValid(object, value);
            }
            @Override
            public Dimension getMaximumSize() {
                // since this will be in a toolbar, dont allow it to grow
                return super.getPreferredSize();
            }
        };
        cbo.setPopupColumns(25);
        cbo.setMaximumRowCount(12);
        cbo.setIconColorProperty(PP_BackColor);
        cbo.setImageProperty(PP_Icon);
        cbo.setFormat(null);
        cbo.setNullDescription("<html><i style='color:gray'>select</i></html>");
        cbo.setMaxImageHeight(18);
        cbo.setMaxImageWidth(32);
        return cbo;
    }

    
=================== using name/values and hub.linkOnPos

    public OAComboBox createTypeComboBox() {
        Hub h = ExamItemStatus.hubType.createSharedHub();
        h.setLinkHubOnPos(getHub(), ExamItemStatus.PROPERTY_Type);
        OAComboBox cbo = new OAComboBox(h, "", 12);
        cbo.setPopupColumns(24);
        cbo.setMaximumRowCount(12);
        cbo.setMaxImageHeight(18);
        cbo.setMaxImageWidth(32);
        cbo.setEnabled(ModelDelegate.getUserAccessHub(), UserAccess.PROPERTY_IsAdmin);
        return cbo;
    }


    