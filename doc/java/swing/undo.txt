

********** See editmenu.txt


    private OAUndoManager undoManager;

>> create manager
    undoManager = OAUndoManager.getUndoManager();
    if (undoManager == null) {
        undoManager = OAUndoManager.createUndoManager();
    }
    
    
    
>> UI    
    private final String CMD_Undo              = "Undo";
    private final String CMD_Redo              = "Redo";

    private JMenuItem miUndo;
    private JMenuItem miRedo;

        // MENU "Edit"
        menu = getEditMenu();
        menu.add(getUndoMenuItem());
        menu.add(getRedoMenuItem());


    public JMenuItem getUndoMenuItem() {
        if (miUndo == null) {
            miUndo = new JMenuItem("Undo");
            //miUndo.setMnemonic('C');
            miUndo.setActionCommand(CMD_Undo);
            
            URL url = OAButton.class.getResource("icons/undo.gif");
            if (url != null) 
                miUndo.setIcon(new ImageIcon(url));
            }
            // miUndo.setToolTipText("");
            miUndo.addActionListener(this);
            miUndo.setAccelerator( javax.swing.KeyStroke.getKeyStroke(KeyEvent.VK_Z, java.awt.Event.CTRL_MASK) );
        }
        return miUndo;
    }    
    
    public JMenuItem getRedoMenuItem() {
        if (miRedo == null) {
            miRedo = new JMenuItem("Redo");
            //miRedo.setMnemonic('C');
            miRedo.setActionCommand(CMD_Redo);
            // miRedo.setToolTipText("");
            URL url = OAButton.class.getResource("icons/undo.gif");
            if (url != null) 
                miRedo.setIcon(new ImageIcon(url));
            }
            miRedo.addActionListener(this);
            miRedo.setAccelerator( javax.swing.KeyStroke.getKeyStroke(KeyEvent.VK_Y, java.awt.Event.CTRL_MASK) );
        }
        return miRedo;
    }    
    
    
    
    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand(); 
        if (cmd.equals(CMD_Undo))       onUndo();
        else if (cmd.equals(CMD_Redo))  onRedo();
    }
    
    protected abstract void onUndo();
    protected abstract void onRedo();
    
    
>> menu listener 

    protected void onEditMenuSelected() {
        OAUndoManager man = OAUndoManager.getUndoManager();

        boolean b = false;
        String s = "Undo";
        JMenuItem mi = getClientFrameCommands().getUndoMenuItem();
        if (man != null) {
            if (man.canUndo()) {
                b = true;
                s = man.getUndoPresentationName();
            }
        }
        mi.setEnabled(b);
        mi.setText(s);


        b = false;
        s = "Redo";
        mi = getClientFrameCommands().getRedoMenuItem();
        if (man != null) {
            if (man.canRedo()) {
                b = true;
                s = man.getRedoPresentationName();
            }
        }
        mi.setEnabled(b);
        mi.setText(s);
    }
    
    
qqqqqqqq controller    
            protected void onUndo() {
                if (undoManager == null || !undoManager.canUndo()) {
                    java.awt.Toolkit.getDefaultToolkit().beep();
                }
                else undoManager.undo();
            }
            protected void onRedo() {
                if (undoManager == null || !undoManager.canRedo()) {
                    java.awt.Toolkit.getDefaultToolkit().beep();
                }
                else undoManager.redo();
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    