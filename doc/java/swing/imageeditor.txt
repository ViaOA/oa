

    private OAImagePanelController controlHealthMapImagePanel;


        icon = Resource.getJarIcon("image.jpg");
        icon = new ScaledImageIcon(icon, 32, 20);

        pan = new JPanel(new BorderLayout());
        pan.add(new OAScroller(getHealthMapImagePanelController().getToolBar()), BorderLayout.NORTH);
        pan.add(new JScrollPane(getHealthMapImagePanelController().getOAImagePanel()), BorderLayout.CENTER);
        tab.addTab("HealthMap Image", icon, pan, "Image used on HealthMap report");


    
    public OAImagePanelController getHealthMapImagePanelController() {
        if (controlHealthMapImagePanel != null) return controlHealthMapImagePanel;
        
        controlHealthMapImagePanel = new OAImagePanelController() {
            @Override
            public void onSave() {
                // replaces saving to file
                saveImage();                    
            }
            @Override
            protected void onDelete() {
                super.onDelete();
                saveImage();  // image will be null
            }
            @Override  // an image has been choosen from fileChooser
            public void setImage(String imageName, Image image) {
                super.setImage(imageName, image);
                saveImage();
            }
            @Override
            protected void onImageChanged() {
                saveImage();
            }
            protected void saveImage() {
                Species species = (Species) getHub().getAO();
                if (species == null) return;
                Image image = controlHealthMapImagePanel.getBufferedImage();

                ImageStore imgStore = species.getIconImageStore();
                if (imgStore == null) {
                    if (image == null) return;
                    imgStore = new ImageStore();
                    species.setIconImageStore(imgStore);
                }
                ImageStoreDelegate.setImage(imgStore, image);
            }
        };
        EnabledController ec = new EnabledController(null) {
            @Override
            protected boolean isEnabled(boolean bIsCurrentlyEnabled) {
                SpeciesJfc.this.controlHealthMapImagePanel.setEnabled(bIsCurrentlyEnabled);
                return bIsCurrentlyEnabled;
            }
        };
        ec.add(getHub());
        ec.add(ModelDelegate.getUserAccessHub(), UserAccess.PROPERTY_IsAdmin);
        
        
        //create hubExam listener to set Image on changeAO
        getHub().addHubListener(new HubListenerAdapter() {
            @Override
            public void afterChangeActiveObject(HubEvent evt) {
                Image img = null;
                Species species = getHub().getAO();
                if (species != null) {
                    ImageStore imgStore = species.getIconImageStore();
                    if (imgStore != null) {
                        img = ImageStoreDelegate.getImage(imgStore);
                    }
                }
                controlHealthMapImagePanel.setImage(img);
            }
        });
>> add extra open button
        controlImage.addOpenButton(getOpenPreviouExamImageButton());

        return controlHealthMapImagePanel;
    }
    
    
    
>> extra code to have a previous picture dialog popup    
    public PreviousPictureDialog getPreviousPictureDialog() {
        if (dlgPreviousPicture == null) {
            dlgPreviousPicture = new PreviousPictureDialog(frame, getHub().createSharedHub());
        }
        return dlgPreviousPicture;
    }
    public JButton getOpenPreviouExamImageButton() {
        if (cmdOpenPreviouExamImage == null) {
            cmdOpenPreviouExamImage = new JButton("Previous Image ...");
            cmdOpenPreviouExamImage.setIcon(new ImageIcon(ImageComponents.class.getResource("image/open.gif")));
            cmdOpenPreviouExamImage.setToolTipText("open an image from a previous exam.");
            cmdOpenPreviouExamImage.setRequestFocusEnabled(false);
            cmdOpenPreviouExamImage.setFocusPainted(false);
            OAButton.setup(cmdOpenPreviouExamImage);

            cmdOpenPreviouExamImage.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    ExamJfc.this.onOpenPreviousExamImage();
                }
            });
            EnabledController ec = new EnabledController(cmdOpenPreviouExamImage);
            ec.add(getHub());
            ec.add(ModelDelegate.getUserAccessHub(), UserAccess.PROPERTY_ExamEnabled);
            ec.add(ModelDelegate.getUserAccessHub(), UserAccess.PROPERTY_IsUser);
        }
        return cmdOpenPreviouExamImage;
    }
    protected void onOpenPreviousExamImage() {
        getPreviousPictureDialog().getExams().setAO(getHub().getAO());
        getPreviousPictureDialog().setVisible(true);
        
        Exam exam = getPreviousPictureDialog().getSelectedExam();
        if (exam == null) return;
        
        ImageStore imgstore = exam.getImageStore();
        if (imgstore != null) {
            byte[] bs = imgstore.getBytes();
            if (bs == null) return;
            exam = getHub().getAO();
            if (exam == null) return;
            
            imgstore = exam.getImageStore();
            if (imgstore == null) {
                imgstore = new ImageStore();
                imgstore.setBytes(bs);
                exam.setImageStore(imgstore);
            }
            else imgstore.setBytes(bs);
            try {
                BufferedImage bi = OAImageUtil.convertToBufferedImage(bs);
                getImagePanelController().setImage(bi);
            }
            catch (Exception e) {
                //qqq
            }
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    