

>> render

            @Override
            public Component getTreeCellRendererComponent(Component comp,
                    JTree tree, Object value, boolean selected,
                    boolean expanded, boolean leaf, int row, boolean hasFocus) 
            {
                comp = super.getTreeCellRendererComponent(comp, tree, value, selected, expanded, leaf, row, hasFocus);
                if (comp instanceof JLabel) {
                    if (value instanceof OATreeNodeData) {
                        OATreeNodeData tnd = (OATreeNodeData) value;
                        value = tnd.getObject();
                        if ( ((Exam) value).getEndDate() != null) {
                            JLabel lbl = (JLabel) comp;
                            lbl.setFont(lbl.getFont().deriveFont(Font.BOLD));
                        }
                    }
                }
                return comp;
            }



clicking a node:
    tree.valueChanged(TreeSelectionEvent e)
    tree.nodeSelected(e)  -> sets hubs, AO
    
    user swingworker to call:
        treeNodel.beforeObjectSelected(tnd.getObject(), false)
        treeNodel.beforeObjectSelected(tnd.getObject(), true)  // runs in swingworker thread
        

    if select node=null tree.nodeSelected(null)
    else
        tree.nodeSelected(tnd)
        treeNode.objectSelected(tnd.getObject())
        tree.objectSelected(tnd.getObject()
    }        


        /*
        Object[] objs;
        objs = new Object[] {tsi.user};
        getTree().setSelectedNode(objs);
        getTree().requestFocus();
        */



        OATree tree = getTreeUsed();
        if (tree != null) {
            tree.setSelectedNode(getTreeNode());
        }

        node.setDependentProperties(User.PROPERTY_InactiveDate);




                    
>> TreeNode for Users.fullName
                    
    private OATreeNode nodeUser;
    public OATreeNode getTreeNode() {
        if (nodeUser != null) return nodeUser;
        nodeUser = new OATreeNode(User.PROPERTY_FullName, hubUser) {
            @Override
            public void objectSelected(Object obj) {
                super.objectSelected(obj);
                getUsers().setSharedHub(getAllUsers(), true);
            }
            @Override
            public Component getTreeCellRendererComponent(Component comp, JTree tree, Object value, boolean selected,boolean expanded, boolean leaf, int row, boolean hasFocus) {
                return super.getTreeCellRendererComponent(comp, tree, value, selected, expanded, leaf, row, hasFocus);
            }
            @Override
            public HubFilter getHubFilter(Hub hubMaster) {
                return super.getHubFilter(hubMaster);
            }
            @Override
            public boolean getAllowDrop(Hub hubDrag, Object objectDrag, Hub hubDrop) {
                return super.getAllowDrop(hubDrag, objectDrag, hubDrop);
            }
            @Override
            public void onDoubleClick(Object obj, MouseEvent e) {
                super.onDoubleClick(obj, e);
            }
            @Override
            public String getImage(Object object, String imagePath, String defaultValue) {
                return super.getImage(object, imagePath, defaultValue);
            }
            @Override
            public Font getFont(Object object, Font defalutValue) {
                Font font = super.getFont(object, defalutValue);
                if (font != null) {
                    font = font.deriveFont(Font.BOLD).deriveFont(font.getSize()+1.0f);
                }
                return font;
            }
            @Override
            public Color getBackgroundColor(Object object, Color defalutValue) {
                return super.getBackgroundColor(object, defalutValue);
            }
            @Override
            public Color getForegroundColor(Object object, Color defalutValue) {
                if (object instanceof User) {
                    User user = (User) object;
                    if (user.getInactiveDate() != null) {
                        return Color.gray;
                    }
                }
                return super.getForegroundColor(object, defalutValue);
            }
            @Override
            public Color getIconColor(Object object, Color defalutValue) {
                return super.getIconColor(object, defalutValue);
            }
            @Override
            public String getText(Object object, String text) {
                return super.getText(object, text);
            }
            @Override
            public String getToolTipText(Object object, String defalutValue) {
                if (object instanceof User) {
                    User user = (User) object;
                    String tt = "<html>";
                    tt += user.getFullName();
                    tt += " <i>" + OAString.fmt(user.getTitle()) + "</i>";
                    if (user.getInactiveDate() != null) tt += " <b>Inactive: </b>"+user.getInactiveDate();
                    return tt;
                }
                return super.getToolTipText(object, defalutValue);
            }
        };
        // Font font = nodeUser.getFont();
        // font = new Font(font.getName(), font.BOLD, font.getSize());
        // nodeUser.setFont(font);
        
        nodeUser.setIcon(UserJfc.getIcon());
        nodeUser.setPopupMenu(getTreeNodePopupMenu());
        nodeUser.setToolTipTextProperty(User.PROPERTY_FullName);
        nodeUser.setForegroundColorProperty(UserJfc.PP_ForeColor);
        nodeUser.setBackgroundColorProperty(UserJfc.PP_BackColor);
        nodeUser.setImageProperty(UserJfc.PP_Icon);
        nodeUser.setAllowDnD(true);
        nodeUser.setAllowDrop(true);
        nodeUser.setAllowDrag(true);
        nodeUser.setFontProperty(UserJfc.PP_Font);
        nodeUser.setSuffix(null);
        nodeUser.setMaxImageHeight(18);
        nodeUser.setMaxImageWidth(18);
        // nodeUser.setEditor(getTreeNodeTextField());
        // nodeUser.setSelectedHub(getSelectUsers());  // adds checkboxes
        nodeUser.setDependentProperties(User.PROPERTY_InactiveDate);
        return nodeUser;
    }
                    
                    
>> Tree node for ItemTypes
    public OATreeNode getTreeNode() {
        if (node != null) return node;
        node = new OATreeNode(ItemType.PROPERTY_Name, getHub(), getHub()) {
            @Override
            public void objectSelected(Object obj) {
                super.objectSelected(obj);
                onShowEditPanel();
            }
            @Override
            public Component getTreeCellRendererComponent(Component comp, JTree tree, Object value, boolean selected,boolean expanded, boolean leaf, int row, boolean hasFocus) {
                return super.getTreeCellRendererComponent(comp, tree, value, selected, expanded, leaf, row, hasFocus);
            }
            @Override
            public HubFilter getHubFilter(Hub hubMaster) {
                return super.getHubFilter(hubMaster);
            }
            @Override
            public boolean getAllowDrop(Hub hubDrag, Object objectDrag, Hub hubDrop) {
                return super.getAllowDrop(hubDrag, objectDrag, hubDrop);
            }
            @Override
            public void onDoubleClick(Object obj, MouseEvent e) {
                super.onDoubleClick(obj, e);
            }
            @Override
            public String getImage(Object object, String imagePath, String defaultValue) {
                return super.getImage(object, imagePath, defaultValue);
            }
            @Override
            public Font getFont(Object object, Font defalutValue) {
                Font font = super.getFont(object, defalutValue);
                if (font != null) {
                    font = font.deriveFont(Font.BOLD).deriveFont(font.getSize()+1.0f);
                }
                return font;
            }
            @Override
            public Color getBackgroundColor(Object object, Color defalutValue) {
                return super.getBackgroundColor(object, defalutValue);
            }
            @Override
            public Color getForegroundColor(Object object, Color defalutValue) {
                return super.getForegroundColor(object, defalutValue);
            }
            @Override
            public Color getIconColor(Object object, Color defalutValue) {
                return super.getIconColor(object, defalutValue);
            }
            @Override
            public String getText(Object object, String text) {
                return super.getText(object, text);
            }
            @Override
            public String getToolTipText(Object object, String defalutValue) {
                return super.getToolTipText(object, defalutValue);
            }
        };
        // Font font = nodeItemType.getFont();
        // font = new Font(font.getName(), font.BOLD, font.getSize());
        // nodeItemType.setFont(font);
        
        node.setIcon(getIcon());
        node.setPopupMenu(getTreeNodePopupMenu());
        // nodeItemType.setToolTipTextProperty(ItemType.PROPERTY_Name);
        node.setForegroundColorProperty(PP_ForeColor);
        node.setBackgroundColorProperty(PP_BackColor);
        node.setImageProperty(PP_Icon);
        node.setAllowDnD(true);
        node.setAllowDrop(true);
        node.setAllowDrag(true);
        node.setFontProperty(PP_Font);
        node.setSuffix(null);
        node.setMaxImageHeight(18);
        node.setMaxImageWidth(32);
        // node.setEditor(createNameTextField());
        // nodeItemType.setSelectedHub(getSelectItemTypes());  // adds checkboxes
        // nodeItemType.setDependentProperties(ItemType.PROPERTY_InactiveDate);
        return node;
    }
                    
                    
>> select node
        // select tree node (in case it is not expanded)
        ItemCategory[] ics = null;
        for ( ;ic!= null; ic=ic.getParentItemCategory()) {
            ics = (ItemCategory[]) OAArray.insert(ItemCategory.class, ics, ic, 0);
        }

        OATree tree = getTreeUsed();
        if (tree != null) {
            tree.setSelectedNode(ics);
        }
                    
                    
                    
                    
                    
                    
                    
                    