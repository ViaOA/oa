


    protected void _writeSerializeToFile(File fileTemp) throws Exception {

        FileOutputStream fos = new FileOutputStream(fileTemp);

        Deflater deflater = new Deflater(Deflater.BEST_COMPRESSION);
        DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(fos, deflater, 1024*5);

        /** Notes on serialization:
         *  The ObjectStream will make sure that objects are only saved/visited once.
         *  These 3 wrappers all use the same ObjectStream.
         */
        ObjectOutputStream oos = new ObjectOutputStream(deflaterOutputStream);
        OAObjectSerializer wrap;
        
        ServerRoot sr = ServerDelegate.getServerRoot();
        wrap = new OAObjectSerializer(sr, false, true);
        wrap.setExcludedReferences(new Class[] {DeliveryDate.class});
        oos.writeObject(wrap);
        
        Hub h = ServerDelegate.getDeliveryDates();
        wrap = new OAObjectSerializer(h, false, true);
        oos.writeObject(wrap);

        String s = Resource.getValue(Resource.APP_DataVersion);
        oos.writeObject(s);
        
        deflaterOutputStream.finish();
        oos.close();
        fos.close();
    }

        
    public boolean readSerializeFromFile() throws Exception {
        LOG.log(Level.CONFIG, "Reading from file data.bin");
        File file = new File("data.bin");
        if (!file.exists()) {
            LOG.log(Level.CONFIG, "file data.bin does not exist");
            return false;
        }
        FileInputStream fis = new FileInputStream(file);
    
        Inflater inflater = new Inflater();
        InflaterInputStream inflaterInputStream = new InflaterInputStream(fis, inflater, 1024*3);
        
        ObjectInputStream ois = new ObjectInputStream(inflaterInputStream);
        
        OAObjectSerializer wrap = (OAObjectSerializer) ois.readObject(); 
        ServerRoot sr = (ServerRoot) wrap.getObject();

        wrap = (OAObjectSerializer) ois.readObject(); 
        Hub hubDeliveryDate = (Hub) wrap.getObject();

        ServerDelegate.setFromExternalData(sr, hubDeliveryDate);

        try {
            String s = (String) ois.readObject();
            Resource.setValue(Resource.TYPE_Server, Resource.APP_DataVersion, s);
        }
        catch (EOFException e) {
        }
        
        ois.close();
        fis.close();
        LOG.log(Level.CONFIG, "reading from file data.bin completed");

        return true;
    }
        
        
        
//qqqqqqqqqqqqqqqqqqqqqqq ANother example that allows to "intercept" each object as it is written

        FileOutputStream fos = new FileOutputStream(fileTemp);

        Deflater deflater = new Deflater(Deflater.BEST_COMPRESSION);
        DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(fos, deflater, 1024*5);

        class MyObjectOutputStream extends ObjectOutputStream {
            public MyObjectOutputStream(OutputStream os) throws IOException {
                super(os);
                // this part is not needed - it was used to fix/cleanup some object issues
                if (!bVerifiedOutputStream) {
                    bVerifiedOutputStream = false; // only verify the first time serialization is done
                    enableReplaceObject(true);
                }
            }
            @Override
            protected Object replaceObject(Object obj) throws IOException {
                return DataSourceController.this.onReplaceObject(obj);
            }
        };


        /** Notes on serialization:
         *  The ObjectStream will make sure that objects are only saved/visited once.
         *  These 3 wrappers all use the same ObjectStream.
         */
        ObjectOutputStream oos = new MyObjectOutputStream(deflaterOutputStream);
        OAObjectSerializer wrap;
        
        ServerRoot sr = ServerDelegate.getServerRoot();
        wrap = new OAObjectSerializer(sr, false, true);
        wrap.setExcludedReferences(new Class[] {DeliveryDate.class});
        oos.writeObject(wrap);
        
        Hub h = ServerDelegate.getProductionDates();
        wrap = new OAObjectSerializer(h, false, true);
        wrap.setExcludedReferences(new Class[] {DeliveryDate.class});
        oos.writeObject(wrap);
        
        h = ServerDelegate.getDeliveryDates();
        wrap = new OAObjectSerializer(h, false, true);
        wrap.setExcludedReferences(new Class[] {DeliveryDate.class});
        oos.writeObject(wrap);

        String s = Resource.getValue(Resource.APP_DataVersion);
        oos.writeObject(s);
        
        deflaterOutputStream.finish();
        oos.close();
        fos.close();
        
        