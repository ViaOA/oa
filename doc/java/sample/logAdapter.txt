

// setup consoles to show log messages 
        Handler handler = new Handler() {
            public void publish(LogRecord record) {
                if (!isLoggable(record)) return;
                Quickbook quickbook = hubQuickbook.getAt(0);
                if (record.getLevel().intValue() >= Level.WARNING.intValue()) {
                    if (quickbook != null) quickbook.setWarningConsole(record.getMessage());
                }
                if (quickbook != null) quickbook.setConsole(record.getMessage());
            }
            public void close() throws SecurityException {
            }
            public void flush() {
            }
        };
        handler.setLevel(Level.FINE);
        LOG.addHandler(handler);
        LOG.setLevel(Level.FINER);

        // qb console
        handler = new Handler() {
            public void publish(LogRecord record) {
                if (!isLoggable(record)) return;
                Quickbook quickbook = hubQuickbook.getAt(0);
                if (record.getLevel().intValue() >= Level.WARNING.intValue()) {
                    if (quickbook != null) quickbook.setWarningConsole(record.getMessage());
                }
                if (quickbook != null) quickbook.setQbwcConsole(record.getMessage());
            }
            public void close() throws SecurityException {
            }
            public void flush() {
            }
        };
        handler.setLevel(Level.FINE);
        Logger logx = Logger.getLogger("com.intuit.developer");
        logx.setLevel(Level.FINER);
        logx.addHandler(handler);
        logx = Logger.getLogger("com.cdi.qbwc.dao");
        logx.setLevel(Level.FINER);
        logx.addHandler(handler);
        
        // finer console
        handler = new Handler() {
            public void publish(LogRecord record) {
                if (!isLoggable(record)) return;
                Quickbook quickbook = hubQuickbook.getAt(0);
                if (quickbook != null) quickbook.setFinerConsole(record.getMessage());
            }
            public void close() throws SecurityException {
            }
            public void flush() {
            }
        };
        handler.setLevel(Level.FINER);
        LOG.addHandler(handler);
        logx = Logger.getLogger("com.intuit.developer");
        logx.addHandler(handler);
        logx = Logger.getLogger("com.cdi.qbwc.dao");
        logx.addHandler(handler);


qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq


public void javaLoggingAdapter() {
    
    // 1: turn off default logging
    Logger log = Logger.getLogger("");
    log.setLevel(Level.OFF);        
    Handler[] hs = log.getHandlers();
    for (int i=0; hs != null && i<hs.length; i++) {
        hs[i].setLevel(Level.OFF);
    }
    
    // 2: create log for a specific package 
    log = Logger.getLogger("com.theice.gsmr");
    log.setLevel(Level.FINE);
    
    // 3: create handler that gets called
    handler = new Handler() {
        @Override
        public void publish(LogRecord record) {
            if (!isLoggable(record)) return;

            Level level = record.getLevel();
            int x = level.intValue();
            
            if (x < Level.FINE.intValue()) return;
            
            Thrown thrown = record.getThrown();
            String msg = record.getMessage();
            
            // 4: handle message
            // todo: your code here
        }
        @Override
        public void flush() {
        }
        @Override
        public void close() throws SecurityException {
        }
    };
    handler.setLevel(Level.FINE);
    log.addHandler(handler);
}
