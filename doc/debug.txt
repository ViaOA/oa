// Generated by OABuilder 

package com.tmgsc.hifive.view.oa;

import java.awt.*;
import java.awt.event.*;
import java.awt.Dialog.*;
import java.lang.ref.WeakReference;
import java.util.*;
import java.util.logging.*;
import java.util.concurrent.atomic.AtomicInteger;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.text.*;
import javax.swing.event.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.jfc.*;
import com.viaoa.jfc.control.*;
import com.viaoa.jfc.table.*;
import com.viaoa.jfc.text.*;
import com.viaoa.jfc.text.autocomplete.*;
import com.viaoa.jfc.image.*;
import com.viaoa.util.*;

import com.tmgsc.hifive.model.*;
import com.tmgsc.hifive.model.method.*;
import com.tmgsc.hifive.model.search.*;
import com.tmgsc.hifive.model.oa.*;
import com.tmgsc.hifive.model.oa.propertypath.*;
import com.tmgsc.hifive.model.oa.method.*;
import com.tmgsc.hifive.model.oa.custom.*;
import com.tmgsc.hifive.delegate.*;
import com.tmgsc.hifive.delegate.oa.*;
import com.tmgsc.hifive.resource.Resource;
import com.tmgsc.hifive.view.*;

public class LineItemJfc implements OAModelJfcInterface {
    private static Logger LOG = Logger.getLogger(LineItemJfc.class.getName());
    
    public static final String PP_Display    = OAString.cpp(LineItem.P_Description);
    public static final String PP_Icon       = null;
    public static final String PP_Image      = null;
    public static final String PP_ForeColor  = null;
    public static final String PP_BackColor  = null;
    public static final String PP_Font       = null;
    // Hub
    protected Hub<LineItem> hub;   // This is the Hub used for binding.
    protected LineItemModel model;
    
    // Tree
    protected OATreeNode lastTreeNode;  // used by getTreeUsed()
    protected OATreeTitleNode titleNode;
    protected OATreeNode node;
    
    // ComboBox
    protected OAComboBox cbo;
    protected OATableComboBox cboTable;
    
    // List
    protected OAList lst;
    
    // edit dialog
    private WeakReference<JDialog> wrEditDialog;
    
    // Card Panel
    public static final String CARD_List = "list";
    public static final String CARD_Edit = "edit";
    protected JPanel cardPanel;
    protected CardLayout cardLayout;
    protected HashMap<Integer, JDialog> hmReportDialog;
    
    
    // Search
    protected LineItemSearchJfc searchJfc;
    // Inner Search
    protected LineItemSearchJfc hubSearchJfc;
    
    // Filters
    
    // focus components
    protected OATextArea txtaDescription;
    protected OATextArea tableTxtaDescription;
    // commands for methods
    
    protected AwardCardOrderJfc jfcAwardCardOrder;
    protected EmailJfc jfcEmail;
    protected EmployeeJfc jfcEmployee;
    protected EmployeeAwardJfc jfcEmployeeAward;
    protected EmployeeAwardJfc jfcEmployeeAwardCash;
    protected EmployeeAwardCharityJfc jfcEmployeeAwardCharity;
    protected EmployeeAwardJfc jfcEmployeeAwardIntlVisa;
    protected EmployeeEcardToJfc jfcEmployeeEcardTo;
    protected InspireOrderJfc jfcInspireOrder;
    protected InspireOrderJfc jfcInspireOrderCash;
    protected InspireOrderCharityJfc jfcInspireOrderCharity;
    protected InspireOrderJfc jfcInspireOrderIntlVisa;
    protected InspireOrderItemJfc jfcInspireOrderItem;
    protected InspireRecipientJfc jfcInspireRecipient;
    protected LocationJfc jfcLocation;
    protected PointsRecordJfc jfcPointsRecord;
    protected PointsRequestJfc jfcPointsRequest;
    protected ProgramJfc jfcProgram;
    protected AwardCardOrderJfc jfcGroupByAwardCardOrder;
    protected LineItemJfc jfcLineItemsGroupByAwardCardOrder;
    protected EmployeeJfc jfcGroupByEmployee;
    protected LineItemJfc jfcLineItemsGroupByEmployee;
    protected EmployeeAwardJfc jfcGroupByEmployeeAward;
    protected LineItemJfc jfcLineItemsGroupByEmployeeAward;
    protected InspireOrderJfc jfcGroupByInspireOrder;
    protected LineItemJfc jfcLineItemsGroupByInspireOrder;
    protected LocationJfc jfcGroupByLocation;
    protected LineItemJfc jfcLineItemsGroupByLocation;
    protected PointsRecordJfc jfcGroupByPointsRecord;
    protected LineItemJfc jfcLineItemsGroupByPointsRecord;
    protected ProgramJfc jfcGroupByProgram;
    protected LineItemJfc jfcLineItemsGroupByProgram;
    
    public LineItemJfc() {
        this.model = new LineItemModel();
        OAModelJfcUtil.register(this);
    }
    
    public LineItemJfc(Hub<LineItem> hubLineItem) {
        this.model = new LineItemModel(hubLineItem);
        OAModelJfcUtil.register(this);
    }
    public LineItemJfc(LineItemModel modelLineItem) {
        this.model = modelLineItem;
        OAModelJfcUtil.register(this);
    }
    
    // Hub
    public Hub<LineItem> getHub() {
        if (hub == null) {
            hub = model.getHub();
        }
        return hub;
    }
    
    private int level;
    public int getLevel() {
        return this.level;
    }
    public void setLevel(int level) {
        this.level = level;
    }
    
    
    // Model
    public LineItemModel getModel() {
        if (model == null) {
            model = new LineItemModel(getHub());
            model.setAllowHubSearch(true);
        }
        return model;
    }
    
    
    
    // Images
    public static Icon getIcon() {
        return Resource.getJarIcon("lineItem.gif");
    }
    public static Icon getTitleIcon() {
        return Resource.getJarIcon("lineItems.gif");
    }
    
    // Tree
    public OATree getTreeUsed() {
        if (lastTreeNode != null) return lastTreeNode.getTree();
        return null;
    }
    protected void setLastTreeNode(OATreeNode tn) {
        if (lastTreeNode == null || lastTreeNode.getTree() == null) {
            lastTreeNode = tn;
        }
    }
    public OATreeTitleNode getTreeTitleNode() {
        if (titleNode == null) {
            titleNode = createTreeTitleNode();
        }
        return titleNode;
    }
    
    public OATreeTitleNode createTreeTitleNode() {
        OATreeTitleNode treeTitleNode = new OATreeTitleNode(getModel().getDisplayNamePlural()) {
            @Override
            public void objectSelected(Object obj) {
                super.objectSelected(obj);
                onShowListPanel();
            }
            JLabel lbl;
            @Override
            public Component getTreeCellRendererComponent(Component comp,
                JTree tree, Object value, boolean selected,
                boolean expanded, boolean leaf, int row, boolean hasFocus)
            {
                comp = super.getTreeCellRendererComponent(comp, tree, value, selected, expanded, leaf, row, hasFocus);
                if (lbl == null) {
                    if (comp instanceof JLabel) lbl = (JLabel) comp;
                }
                if (lbl != null) lbl.setFont(lbl.getFont().deriveFont(Font.BOLD|Font.ITALIC));
                return comp;
            }
        };
        treeTitleNode.setCountHub(getHub());
        treeTitleNode.setIcon(getTitleIcon());
        treeTitleNode.setPopupMenu(createTreeTitleNodePopupMenu(treeTitleNode));
        treeTitleNode.setMaxImageHeight(20);
        treeTitleNode.setMaxImageWidth(32);
        setLastTreeNode(treeTitleNode);
        return treeTitleNode;
     }
    
    public JPopupMenu createTreeTitleNodePopupMenu(OATreeNode tn) {
        JPopupMenu menu = new JPopupMenu();
    
        JMenuItem miSearch = createSearchMenuItem();
        if (miSearch != null) menu.add(miSearch);
        JMenuItem miNew = createNewMenuItem();
        if (miNew != null) menu.add(miNew);
    
    
        if (miSearch != null || miNew != null) menu.addSeparator();
        JMenuItem miPaste = createPasteMenuItem();
        if (miPaste != null) {
            menu.add(miPaste);
            menu.addSeparator();
        }
    
        menu.add(createCollapseOthersMenuItem(tn));
        return menu;
    }
    
    public OAMenuItem createAddMenuItem() {
        if (!getModel().getAllowAdd() && !getModel().getAllowAutoCreate()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAButton.ADD_MANUAL) {
            @Override
            public boolean onActionPerformed() {
                LineItemJfc.this.onAdd();
                return true;
            }
        };
        mi.setText("Add a "+getModel().getDisplayName());
        mi.setToolTipText("Add a "+getModel().getDisplayName());
        return mi;
    }
    
    public OAMenuItem createNewMenuItem() {
        return createNewMenuItem(getHub());
    }
    public OAMenuItem createNewMenuItem(Hub<LineItem> hub) {
        if (!getModel().getAllowNew()) return null;
        OAMenuItem mi = new OAMenuItem(hub, OAMenuItem.NEW) {
            @Override
            public void afterActionPerformed() {
                // LineItemJfc.this.getEditDialog(this).setVisible(true);
                LineItemJfc.this.onNewLineItemCreated();
                super.afterActionPerformed();
            }
        };
        mi.setMnemonic(KeyEvent.VK_N);
        mi.setText("Create a new "+getModel().getDisplayName());
        mi.setToolTipText("Create a new "+getModel().getDisplayName());
        mi.setFocusComponent(txtaDescription);
        return mi;
    }
    
    public JMenuItem createCollapseOthersMenuItem(final OATreeNode tn) {
        JMenuItem mi = new JMenuItem();
        mi.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                OATree t = tn.getTree();
                if (t != null) {
                    t.expandOnlySelectedTreeNode();
                }
            }
        });
        mi.setMnemonic(KeyEvent.VK_C);
        mi.setText("Collapse others");
        mi.setToolTipText("Collapse other tree nodes");
        return mi;
    }
    public OATreeNode getTreeNode() {
        if (node != null) return node;
        node = createTreeNode(null, null, true);
        if (getModel().getAllowMultiSelect()) {
            node.setSelectedHub(getModel().getMultiSelectHub());
        }
        return node;
    }
    public OATreeNode createTreeNode(String leadingPropertyPath, Hub<LineItem> hubRoot, boolean bIncludeChildren, OATreeNode ... parentNodes) {
        if (hubRoot == null && OAString.isEmpty(leadingPropertyPath)) hubRoot = getHub();
        OATreeNode node = new OATreeNode(OAString.cpp(leadingPropertyPath, LineItem.P_Description), hubRoot, getHub()) {
            @Override
            public void objectSelected(Object obj) {
                super.objectSelected(obj);
                LineItemJfc.this.onShowEditPanel();
            }
            @Override
            public void onDoubleClick(Object obj, MouseEvent e) {
                LineItemJfc.this.onDoubleClickTreeNode();
            }
            @Override
            public JPopupMenu getPopupMenu() {
                JPopupMenu pm = super.getPopupMenu();
                if (pm == null) {
                    pm = createTreeNodePopupMenu(this);
                    setPopupMenu(pm);
                }
                return pm;
            }
        };
        node.setIcon(getIcon());
        node.setForegroundColorProperty(PP_ForeColor);
        node.setBackgroundColorProperty(PP_BackColor);
        node.setImageProperty(PP_Icon);
        node.setAllowDnD(true);
        node.setAllowDrop(true);
        node.setAllowDrag(true);
        node.setFontProperty(PP_Font);
        node.setSuffix(null);
        node.setMaxImageHeight(20);
        node.setMaxImageWidth(32);
        setLastTreeNode(node);
    
        if (!bIncludeChildren) {
            return node;
        }
     
        OATreeNode[] nodes = (OATreeNode[]) OAArray.add(OATreeNode.class, parentNodes, node);
     
        return node;
    }
    protected OATreeNode findNode(String propertyPath, OATreeNode ... parentNodes) {
        if (propertyPath == null) return null;
        for (OATreeNode tn : parentNodes) {
            if (tn.getHub() != null) continue;
            String pp = tn.getPropertyPath();
            if (pp == null) continue;
            if (pp.toLowerCase().startsWith(propertyPath.toLowerCase()+".")) return tn;
        }
        return null;
    }
    
    public JPopupMenu createTreeNodePopupMenu(OATreeNode tn) {
        JPopupMenu menu = new JPopupMenu();
    
        JMenuItem miSearch = createSearchMenuItem();
        if (miSearch != null) menu.add(miSearch);
        JMenuItem miNew = createNewMenuItem();
        if (miNew != null) menu.add(createNewMenuItem());
        if (miSearch != null || miNew != null) menu.addSeparator();
    
    
        JMenuItem miRemove = createRemoveMenuItem();
        if (miRemove != null) menu.add(miRemove);
        JMenuItem miDelete = createDeleteMenuItem();
        if (miDelete != null) menu.add(miDelete);
    
        if (miRemove != null || miDelete != null) menu.addSeparator();
        JMenuItem miCut = createCutMenuItem();
    
        if (miCut != null) menu.add(miCut);
        JMenuItem miCopy = createCopyMenuItem();
        if (miCopy != null) menu.add(miCopy);
        JMenuItem miPaste = createPasteMenuItem();
        if (miPaste != null) menu.add(miPaste);
    
        if (miCut != null || miCopy != null || miPaste != null) menu.addSeparator();
    
        JMenuItem miCollapse = createCollapseOthersMenuItem(tn);
        if (miCollapse != null) menu.add(miCollapse);
    
        return menu;
    }
    
    public JMenuItem createSearchMenuItem() {
        if (!getModel().getAllowSearch()) return null;
        JMenuItem mi = new JMenuItem(getModel().getDisplayName() + " search ...", Resource.getJarIcon("search.gif"));
        mi.setMnemonic(KeyEvent.VK_S);
        mi.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                LineItemJfc.this.onSearch();
           }
        });
        return mi;
    }
    public JMenuItem createHubSearchMenuItem() {
        if (!getModel().getAllowHubSearch()) return null;
        JMenuItem mi = new JMenuItem(getModel().getDisplayName() + " inner search ...", Resource.getJarIcon("search.gif"));
        mi.setMnemonic(KeyEvent.VK_I);
        mi.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                LineItemJfc.this.onHubSearch();
           }
        });
        return mi;
    }
    public OAMenuItem createCutMenuItem() {
        if (!getModel().getAllowCut()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAMenuItem.CUT);
        return mi;
    }
    public OAMenuItem createCopyMenuItem() {
        if (!getModel().getAllowCopy()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAMenuItem.COPY);
        mi.setText("Copy "+getModel().getDisplayName());
        mi.setToolTipText("Create a copy of "+getModel().getDisplayName());
        return mi;
    }
    public OAMenuItem createPasteMenuItem() {
        if (!getModel().getAllowPaste()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAMenuItem.PASTE);
        mi.setText("Paste "+getModel().getDisplayName());
        mi.setToolTipText("Paste "+getModel().getDisplayName());
        return mi;
    }
    public OAMenuItem createDeleteMenuItem() {
        if (!getModel().getAllowDelete()) return null;
        OAMenuItem miDelete = new OAMenuItem(getHub(), OAMenuItem.DELETE);
        miDelete.setText("Delete "+getModel().getDisplayName()+" ...");
        miDelete.setConfirmMessage("OK to Delete this "+getModel().getDisplayName()+" from system?");
        miDelete.setMnemonic(KeyEvent.VK_D);
        miDelete.setUseSwingWorker(true);
        miDelete.setProcessingText("Processing ...", "Please wait while deleting Client");
        // miDelete.setToolTipText("Delete "+getModel().getDisplayName()+" from system, must be an Admin to do this.");
        return miDelete;
    }
    public OAMenuItem createRemoveMenuItem() {
        if (!getModel().getAllowRemove()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAMenuItem.REMOVE);
        mi.setText("Remove "+getModel().getDisplayName()+" ...");
        mi.setToolTipText("remove "+getModel().getDisplayName()+" from the list");
        mi.setMnemonic(KeyEvent.VK_R);
        return mi;
    }
    
    // Label
    public OALabel createLabel() {
        OALabel lbl = new OALabel(getHub(), OAString.cpp(LineItem.P_Description), 100) {
            @Override
            public void customizeTableRenderer(JLabel lbl, JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column, boolean wasChanged, boolean wasMouseOver) {
                LineItemJfc.this.customizeTableRenderer(lbl, table, value, isSelected, hasFocus, row, column, wasChanged, wasMouseOver);
            }
            @Override
            public String getToolTipText(int row, int col, String defaultValue) {
                return LineItemJfc.this.getToolTipText(row, col, defaultValue);
            }
        };
        lbl.setIconColorProperty(PP_BackColor);
        lbl.setImageProperty(PP_Icon);
        lbl.setFormat(null);
        lbl.setMaxImageHeight(20);
        lbl.setMaxImageWidth(32);
        return lbl;
    }
    // used for Label, ComboBox
    protected void customizeTableRenderer(JLabel lbl, JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column, boolean wasChanged, boolean wasMouseOver) {
    }
    protected String getToolTipText(int row, int col, String defaultValue) {
        return defaultValue;
    }
    
    // ComboBox
    public OAComboBox getComboBox() {
        if (cbo == null) {
            cbo = createComboBox();
        }
        return cbo;
    }
    
    public OAComboBox createComboBox() {
        OAComboBox cbo = new OAComboBox(getHub(), OAString.cpp(LineItem.P_Description), 100) {
            @Override
            public void customizeTableRenderer(JLabel lbl, JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column, boolean wasChanged, boolean wasMouseOver) {
                LineItemJfc.this.customizeTableRenderer(lbl, table, value, isSelected, hasFocus, row, column, wasChanged, wasMouseOver );
            }
            @Override
            public String getToolTipText(int row, int col, String defaultValue) {
                return LineItemJfc.this.getToolTipText(row, col, defaultValue);
            }
        };
    
        cbo.setPopupColumns(106);
        cbo.setMaximumRowCount(15);
        cbo.setIconColorProperty(PP_BackColor);
        cbo.setImageProperty(PP_Icon);
        cbo.setFormat(null);
        cbo.setNullDescription("<html><i style='color:gray'>select</i></html>]");
        cbo.setMaxImageHeight(20);
        cbo.setMaxImageWidth(32);
        return cbo;
    }
    
    public OATableComboBox getTableComboBox() {
        if (cboTable == null) {
            cboTable = createTableComboBox();
        }
        return cboTable;
    }
    public OATableComboBox createTableComboBox() {
        OATable table = new OATable(getHub());
        table.setAllowDnD(false);
        table.setAllowSorting(false);
        table.addCounterColumn();
        getSearchJfc().createTableColumns(table);
        table.setPreferredSize(11, 3, true);
        table.resizeColumnsToFitHeading();
        
        OATableComboBox cboTable = new OATableComboBox(table, getHub(), PP_Display) {
            @Override
            public void onClear() {
                getHub().setAO(null);
            }
        };
        cboTable.allowClearButton(true);
        cboTable.setColumns(100);
        return cboTable;
    }
    
    
    // List
    public OAList getList() {
        if (lst == null) {
            lst = createList();
        }
        return lst;
    }
    public OAList createList() {
        OAList lst = new OAList(getHub(), OAString.cpp(LineItem.P_Description), 12, 108);
        lst.setAllowDnD(true);
        lst.setAllowRemove(true);
        lst.setAllowDelete(false);
        lst.setAllowInsert(false);
        lst.setImageProperty(null);
        lst.setMaxImageHeight(20);
        lst.setMaxImageWidth(32);
        lst.setConfirmMessage("Ok to remove "+getModel().getDisplayName());
        lst.setIconColorProperty(null);
        lst.setBackgroundColorProperty(null);
        lst.setDoubleClickButton(null);
        // lst.setSelectionHub(getSelectClients());
        lst.setBorder(new EmptyBorder(3,3,1,1));
        
        return lst;
    }
    
    // comboBoxTree
    public OATreeComboBox createSearchTreeComboBox() {
        OATreeComboBox cbo = new OATreeComboBox(createSearchTree(), getHub(), PP_Display);
        cbo.setColumns(32);
        return cbo;
    }
    public OATree createSearchTree() {
        OATree tree = new OATree();
        tree.setPreferredSize(10, 36);
        OATreeTitleNode tnode;
        OATreeNode node, node2;
    
        tnode = new OATreeTitleNode(getModel().getDisplayNamePlural());
        tnode.setIcon(LineItemJfc.getTitleIcon());
        tree.add(tnode);
        node = new OATreeNode(LineItemJfc.PP_Display, getHub()) {
            @Override
            public void onDoubleClick(Object obj, MouseEvent e) {
                LineItemJfc.this.onDoubleClickTreeNode();
            }
        };
        node.setIcon(LineItemJfc.getIcon());
        node.setForegroundColorProperty(LineItemJfc.PP_ForeColor);
        node.setBackgroundColorProperty(LineItemJfc.PP_BackColor);
        node.setImageProperty(LineItemJfc.PP_Icon);
        node.setFontProperty(LineItemJfc.PP_Font);
        node.setMaxImageHeight(20);
        node.setMaxImageWidth(32);
        tnode.add(node);
        return tree;
    }
    
    
    // Table
    // this is to show multiple tables
    protected JPanel cardPanelTable;
    protected CardLayout cardLayoutTable;
    public JPanel getTableCardPanel() {
        JPanel pan = new JPanel(new BorderLayout());
        pan.add(getTableCardPanel(false));
        pan.add(createNorthTableToolBar(), BorderLayout.NORTH);
        return pan;
    }
    public JPanel getTableCardPanel(boolean bIncludeToolbar) {
        if (cardPanelTable != null) return cardPanelTable;
        cardLayoutTable = new CardLayout(5,5);
        cardPanelTable = new JPanel(cardLayoutTable);
        
        cardPanelTable.add(createTablePanel(bIncludeToolbar, false), "Default");
        JSplitPane splitPane;
        splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
            getGroupByAwardCardOrderJfc().createReadOnlyTablePanel(),
            getLineItemsGroupedByAwardCardOrderJfc().createTablePanel(false, false)
        );
        cardPanelTable.add(splitPane, "GroupByAwardCardOrder");
        splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
            getGroupByEmployeeJfc().createReadOnlyTablePanel(),
            getLineItemsGroupedByEmployeeJfc().createTablePanel(false, false)
        );
        cardPanelTable.add(splitPane, "GroupByEmployee");
        splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
            getGroupByEmployeeAwardJfc().createReadOnlyTablePanel(),
            getLineItemsGroupedByEmployeeAwardJfc().createTablePanel(false, false)
        );
        cardPanelTable.add(splitPane, "GroupByEmployeeAward");
        splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
            getGroupByInspireOrderJfc().createReadOnlyTablePanel(),
            getLineItemsGroupedByInspireOrderJfc().createTablePanel(false, false)
        );
        cardPanelTable.add(splitPane, "GroupByInspireOrder");
        splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
            getGroupByLocationJfc().createReadOnlyTablePanel(),
            getLineItemsGroupedByLocationJfc().createTablePanel(false, false)
        );
        cardPanelTable.add(splitPane, "GroupByLocation");
        splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
            getGroupByPointsRecordJfc().createReadOnlyTablePanel(),
            getLineItemsGroupedByPointsRecordJfc().createTablePanel(false, false)
        );
        cardPanelTable.add(splitPane, "GroupByPointsRecord");
        splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
            getGroupByProgramJfc().createReadOnlyTablePanel(),
            getLineItemsGroupedByProgramJfc().createTablePanel(false, false)
        );
        cardPanelTable.add(splitPane, "GroupByProgram");
        
        cardLayoutTable.show(cardPanelTable, "Default");
        cardPanelTable.setMinimumSize(new Dimension(5,5));
        return cardPanelTable;
    }
    
    public JPanel createTablePanel() {
        return createTablePanel(true, true);
    }
    public JPanel createTablePanel(boolean bIncludeNorthToolbar, boolean bIncludeSouthToolbar) {
        OATable table = createTable();
        // table.setSelectHub(getModel().getMultiSelectHub());
        table.setComponentPopupMenu(createTablePopupMenu());
    
        OATableScrollPane tableScrollPane = createTableScrollPane(table);
        tableScrollPane.setBorder(new TitledBorder(""));
        JPanel pan = new JPanel(new BorderLayout());
        pan.add(tableScrollPane, BorderLayout.CENTER);
        
        if (bIncludeNorthToolbar) {
            JToolBar toolBar = createNorthTableFindToolBar();
            if (toolBar != null) pan.add(new OAScroller(toolBar), BorderLayout.NORTH);
        }
        if (bIncludeSouthToolbar) {
            JToolBar toolBar = createSouthTableToolBar();
            if (toolBar != null) pan.add(new OAScroller(toolBar), BorderLayout.SOUTH);
        }
        return pan;
    }
    public JPanel createReadOnlyTablePanel() {
        OATable table = createReadOnlyTable();
        // table.setSelectHub(getModel().getMultiSelectHub());
        table.setComponentPopupMenu(createTablePopupMenu());
    
        OATableScrollPane tableScrollPane = createTableScrollPane(table);
        tableScrollPane.setBorder(new TitledBorder(""));
        JPanel pan = new JPanel(new BorderLayout());
        pan.add(tableScrollPane, BorderLayout.CENTER);
        
        JToolBar toolBar = createSouthTableToolBar();
        if (toolBar != null) pan.add(new OAScroller(toolBar), BorderLayout.SOUTH);
        
        return pan;
    }
    public JPanel createCombinedPanel() {
        return createCombinedPanel(false); 
    }
    public JPanel createCombinedPanel(final boolean bUseList) {
        final JComponent comp = new JScrollPane(createEditPanel(false));
        Dimension d = new Dimension(5,5);
        comp.setMinimumSize(d);
        JSplitPane splitPane = new JSplitPane(bUseList ? JSplitPane.HORIZONTAL_SPLIT : JSplitPane.VERTICAL_SPLIT,
                bUseList ? new JScrollPane(createList()) : getTableCardPanel(false), 
                comp
        ) {
            @Override
            public void addNotify() {
                super.addNotify();
                Dimension d = getSize();
                Dimension d2 = comp.getPreferredSize();
                if (!bUseList && d2.height > d.height) {
                    setResizeWeight(.25);
                }
                if (!bUseList && getLevel() > 1) setDividerLocation(9999);
            }
        };
        
        splitPane.setOneTouchExpandable(true);
        splitPane.setDividerSize(12);
        splitPane.setResizeWeight(bUseList ? .0 : .95);
        
        JPanel pan = new JPanel(new BorderLayout());
        pan.add(splitPane, BorderLayout.CENTER);
        
        pan.add(new OAScroller(createTableToolBar()), BorderLayout.NORTH);
        return pan;
    }
    public JPopupMenu createTablePopupMenu() {
        JPopupMenu pmenu = new JPopupMenu();
        OAMenuItem mi = createGotoEditMenuItem();
        if (mi != null) pmenu.add(mi);
    
        mi = createTableNewMenuItem();
        if (mi != null) {
            mi.setFocusComponent(tableTxtaDescription);
            pmenu.add(mi);
        }
    
        mi = createRemoveMenuItem();
        if (mi != null) {
            pmenu.add(mi);
            pmenu.addSeparator();
        }
        mi = createDeleteMenuItem();
        if (mi != null) {
            pmenu.add(mi);
            pmenu.addSeparator();
        }
        mi = createCutMenuItem();
        if (mi != null) pmenu.add(mi);
        mi = createCopyMenuItem();
        if (mi != null) pmenu.add(mi);
        mi = createPasteMenuItem();
        if (mi != null) pmenu.add(mi);
        return pmenu;
    }
    
    public OAMenuItem createGotoEditMenuItem() {
        if (!getModel().getAllowGotoEdit()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), "Goto") {
            @Override
            public boolean onActionPerformed() {
                LineItemJfc.this.getEditDialog(this).setVisible(true);
                return true;
            }
        };
        mi.setMnemonic(KeyEvent.VK_G);
        return mi;
    }
    
    public OAMenuItem createTableNewMenuItem() {
        if (!getModel().getAllowNew()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAMenuItem.NEW);
        mi.setMnemonic(KeyEvent.VK_N);
        mi.setText("Create a new "+getModel().getDisplayName());
        mi.setFocusComponent(tableTxtaDescription);
        return mi;
    }
    
    public OATableScrollPane createTableScrollPane(final OATable table) {
        OATableScrollPane spTable = new OATableScrollPane(table, 1); // set number of fixed columns
        return spTable;
    }
    protected String getToolTipText(OATable table, int row, int col, String defaultValue) {
        // LineItem client = getHub().getAt(row);
        // defaultValue = LineItemDelegate.getToolTipText(client, true);
        return defaultValue;
    }
    public OATable createTable() {
        Hub<LineItem> hubTable;
        if (getModel().getAllowTableFilter()) hubTable = new Hub<LineItem>(LineItem.class);
        else hubTable = getModel().getTableHub();
     
        OATable table = new OATable(hubTable) {
            @Override
            public void customizeRenderer(JLabel lbl, JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column, boolean wasChanged, boolean wasMouseOver) {
            }
            @Override
            public String getToolTipText(int row, int col, String defaultValue) {
                defaultValue = super.getToolTipText(row, col, defaultValue);
                return defaultValue;
            }
            @Override
            public void onDoubleClick() {
                if (LineItemJfc.this.getModel().getAllowGotoEdit()) {
                    LineItemJfc.this.getEditDialog(this).setVisible(true);
                }
            }
        };
     
        // table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        if (getModel().getAllowTableFilter()) {
            table.setMasterFilterHub(getModel().getTableHub());
        }
        table.setAllowDnD(false);
        table.setAllowSorting(true);
        table.setColumnProperties(ModelDelegate.getProperties(), "LineItem");
    
        table.addCounterColumn();
        if (getModel().getAllowMultiSelect()) {
            table.addSelectionColumn(getModel().getMultiSelectHub(), "Select", 9);
        }
        createTableColumns(table);
        
        table.setPreferredSize(3, 3, true);
        table.setShowChanges(true);
        table.resizeColumnsToFitHeading();
        return table;
    }
    
    public void createTableColumns(OATable table) {
        OALabel lbl;
        OATableColumn tc;
        tc = table.addColumn("Description", 100, new OALabel(getHub(), OAString.cpp(LineItem.P_Description)));
        if (getModel().getAllowTableFilter()) {
            tc.setFilterComponent(new OATextFieldFilter(LineItem.P_Description));
        }
    }
    
    public OATable createReadOnlyTable() {
        Hub<LineItem> h = new Hub<LineItem>(LineItem.class);
        OATable table = new OATable(h) {
            @Override
            public void customizeRenderer(JLabel lbl, JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column, boolean wasChanged, boolean wasMouseOver) {
            }
            @Override
            public String getToolTipText(int row, int col, String defaultValue) {
                defaultValue = super.getToolTipText(row, col, defaultValue);
                return defaultValue;
            }
            @Override
            public void onDoubleClick() {
                if (LineItemJfc.this.getModel().getAllowGotoEdit()) {
                    LineItemJfc.this.getEditDialog(this).setVisible(true);
                }
            }
        };
     
        // table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        table.setAllowDnD(false);
        table.setAllowSorting(true);
        table.setMasterFilterHub(getModel().getTableHub());
        table.setColumnProperties(ModelDelegate.getProperties(), "LineItem");
    
        table.addCounterColumn();
        if (getModel().getAllowMultiSelect()) {
            table.addSelectionColumn(getModel().getMultiSelectHub(), "Select", 9);
        }
        createReadOnlyTableColumns(table);
        
        table.resizeColumnsToFitHeading();
        table.setPreferredSize(3, 3, true);
        return table;
    }
    
    protected void createReadOnlyTableColumns(OATable table) {
        OALabel lbl;
        OATableColumn tc;
        tc = table.addColumn("Description", 100, new OALabel(getHub(), LineItem.P_Description, 100));
        if (getModel().getAllowTableFilter()) {
            tc.setFilterComponent(new OATextFieldFilter(LineItem.P_Description));
        }
    }
    
    public void addCalculatedProperties(JToolBar toolBar) {
        OALabel lbl;
        lbl = createSumLabel();
        if (lbl != null) {
            toolBar.add(new JLabel("Sum:"));
            new EnabledController(lbl, getHub());
            toolBar.add(lbl);
            toolBar.add(Box.createHorizontalStrut(6));
        }
    }
    public OAButton createGotoEditButton() {
        if (!getModel().getAllowGotoEdit()) return null;
        OAButton cmd = new OAButton(getHub(), "Details ...", Resource.getJarIcon(Resource.IMG_Goto)) {
            @Override
            public void afterActionPerformed() {
                LineItemJfc.this.getEditDialog(this).setVisible(true);
                super.afterActionPerformed();
            }
        };
        cmd.setToolTipText("go to the selected "+getModel().getDisplayName());
        OAButton.setup(cmd);
        return cmd;
    }
    
    public OAButton createAddButton() {
        if (!getModel().getAllowAdd() && !getModel().getAllowAutoCreate()) return null;
        OAButton cmd = new OAButton(getHub(), OAButton.ADD_MANUAL) {
            @Override
            public boolean onActionPerformed() {
                LineItemJfc.this.onAdd();
                return true;
            }
        };
        cmd.setText("Add ...");
        OAButton.setup(cmd);
        return cmd;
    }
    public OAButton createNewButton() {
        if (!getModel().getAllowNew()) return null;
        OAButton cmd = new OAButton(getHub(), OAButton.NEW) {
            public void afterActionPerformed() {
                LineItemJfc.this.onNewLineItemCreated();
                super.afterActionPerformed();
            }
        };
        cmd.setText("New");
        cmd.setup();
        return cmd;
    }
    public OAButton createRemoveButton() {
        if (!getModel().getAllowRemove()) return null;
        OAButton cmd = new OAButton(getHub(), OAButton.REMOVE);
        cmd.setMultiSelectHub(getModel().getMultiSelectHub());
        cmd.setText("Remove");
        cmd.setup();
        cmd.setToolTipText("Remove "+getModel().getDisplayName()+" from this list");
        return cmd;
    }
    public OAButton createDeleteButton() {
        if (!getModel().getAllowDelete()) return null;
        OAButton cmd = new OAButton(getHub(), OAButton.DELETE);
        cmd.setMultiSelectHub(getModel().getMultiSelectHub());
        cmd.setConfirmMessage("OK to Delete this "+getModel().getDisplayName()+" from system?");
        cmd.setText("Delete");
        cmd.setup();
        cmd.setUseSwingWorker(true);
        cmd.setProcessingText("Processing ...", "Please wait while deleting "+getModel().getDisplayName());
        return cmd;
    }
    
    public JToolBar createToolBar() {
        JToolBar toolBar = createToolBar(
            true, true, true,
            true, true, true,
            true, true, true,
            true, true, true);
        return toolBar;
    }
    public JToolBar createTableToolBar() {
        JToolBar toolBar = createToolBar(
            false, false, false,
            true, true, false,
            true, false, false,
            true, true, true);
        return toolBar;
    }
    public JToolBar createNorthTableToolBar() {
        JToolBar toolBar = createToolBar(
            false, true, false,
            false, false, false,
            true, false, false,
            true, true, false);
        return toolBar;
    }
    public JToolBar createNorthTableFindToolBar() {
        JToolBar toolBar = createToolBar(
            false, false, false,
            false, false, true,
            true, false, false,
            true, true, false);
        return toolBar;
    }
    public JToolBar createNorthTableSearchToolBar() {
        JToolBar toolBar = createToolBar(
            false, true, false,
            false, false, true,
            false, false, false,
            true, true, false);
        return toolBar;
    }
    public JToolBar createNorthTableSearchFinderToolBar() {
        JToolBar toolBar = createToolBar(
            false, false, false,
            false, false, true,
            false, false, false,
            true, true, false);
        return toolBar;
    }
    public JToolBar createSouthTableToolBar() {
        JToolBar toolBar = createToolBar(
            false, false, false,
            true, true, false,
            false, true, true,
            false, false, true);
        return toolBar;
    }
    public JToolBar createSouthTableSearchToolBar() {
        JToolBar toolBar = createToolBar(
            false, false, false,
            true, true, false,
            false, true, true,
            false, false, false);
        return toolBar;
    }
    public JToolBar createEditPanelToolBar() {
        JToolBar toolBar = createToolBar(
            true, true, false,
            false, true, false,
            false, true, false,
            true, false, false);
        return toolBar;
    }
    public JToolBar createDialogToolBar() {
        JToolBar toolBar = createToolBar(
            false, false, true,
            false, true, false,
            false, true, false,
            true, false, false);
        return toolBar;
    }
    public JToolBar createToolBar(
        boolean bGoBack, boolean bIcon, boolean bLabel,
        boolean bGoto, boolean bCommands, boolean bSearch,
        boolean bFind, boolean bCustom, boolean bHubCalc,
        boolean bReport, boolean bTable, boolean bHubSearch)
    {
        JToolBar toolBar = new JToolBar();
        toolBar.setFloatable(false);
        toolBar.setRollover(true);
        toolBar.add(Box.createHorizontalStrut(10));
        updateToolBar(toolBar,
            bGoBack, bIcon, bLabel,
            bGoto, bCommands, bSearch,
            bFind, bCustom, bHubCalc,
            bReport, bTable, bHubSearch);
        toolBar.add(Box.createHorizontalGlue());
        return toolBar;
    }
    // main createToolBar
    public void updateToolBar(JToolBar toolBar,
        boolean bGoBack, boolean bIcon, boolean bLabel,
        boolean bGoto, boolean bCommands, boolean bSearch,
        boolean bFind, boolean bCustom, boolean bHubCalc,
        boolean bReport, boolean bTable, boolean bHubSearch)
    {
        JButton jcmd;
        OAButton cmd;
        
        if (bGoBack) {
            jcmd = createGotoListButton();
            if (jcmd != null) {
                toolBar.add(jcmd);
                toolBar.add(Box.createHorizontalStrut(7));
            }
        }
        if (bIcon) {
            Icon icon = getTitleIcon();
            JLabel lbl = new JLabel(getModel().getDisplayNamePlural(), icon, JLabel.LEFT);
            lbl.setFont(lbl.getFont().deriveFont(Font.ITALIC));
            toolBar.add(lbl);
            toolBar.add(Box.createHorizontalStrut(10));
        }
        if (bLabel) {
            OALabel lbl = new OALabel(getHub(), OAString.cpp(LineItem.P_Description));
            lbl.setFont(lbl.getFont().deriveFont(Font.ITALIC));
            lbl.setBorder(new EmptyBorder(0,0,0,0));
            toolBar.add(lbl);
            toolBar.add(Box.createHorizontalStrut(10));
        }
        if (bGoto) {
            cmd = createGotoEditButton();
            if (cmd != null) {
                toolBar.add(cmd);
                if (!bCommands) toolBar.add(Box.createHorizontalStrut(10));
            }
        }
        if (bCommands) {
            cmd = createAddButton();
            if (cmd != null) toolBar.add(cmd);
            
            cmd = createNewButton();
            if (cmd != null) {
                cmd.setFocusComponent(tableTxtaDescription);
                toolBar.add(cmd);
            }
            cmd = createRemoveButton();
            if (cmd != null) toolBar.add(cmd);
            cmd = createDeleteButton();
            if (cmd != null) toolBar.add(cmd);
            toolBar.add(Box.createHorizontalStrut(10));
        }
        if (bSearch) {
            jcmd = createSearchButton();
            if (jcmd == null) bSearch = false;
            else {
                toolBar.add(jcmd);
                toolBar.add(Box.createHorizontalStrut(10));
            }
        }
        if (bFind) {
            JTextField txt = createAutoCompleteTextField();
            if (txt != null) {
                toolBar.add(Box.createHorizontalStrut(6));
                JLabel lbl = new JLabel(Resource.getJarIcon("find16.png"));
                lbl.setText("Find:");
                new EnabledController(lbl, getHub()) {
                    @Override
                    protected boolean isValid(boolean bIsEnabled) {
                        return bIsEnabled || getHub().getSize()>0;
                    }
                };
                toolBar.add(lbl);
                toolBar.add(Box.createHorizontalStrut(5));
                txt.setColumns(14);
                txt.setToolTipText("find value in listing");
                toolBar.add(txt);
                new EnabledController(txt, getHub()) {
                    @Override
                    protected boolean isValid(boolean bCurrentValue) {
                        return getHub().getSize() > 0;
                    }
                };
                toolBar.add(Box.createHorizontalStrut(10));
            }
        }
        if (!bSearch && bHubSearch) {
            jcmd = createHubSearchButton();
            if (jcmd != null) {
                toolBar.add(jcmd);
                toolBar.add(Box.createHorizontalStrut(10));
            }
        }
        if (bCustom) {
            toolBar.addSeparator();
            addCustomCommands(toolBar);
            toolBar.add(Box.createHorizontalStrut(10));
        }
        if (bHubCalc) {
            addCalculatedProperties(toolBar);
            toolBar.add(Box.createHorizontalStrut(10));
        }
        
        if (bTable) {
            jcmd = createTableButton();
            if (jcmd != null) {
                toolBar.add(Box.createHorizontalStrut(5));
                JLabel lbl = new JLabel(Resource.getJarIcon("table16.png"));
                lbl.setText("Table Options:");
                toolBar.add(lbl);
                toolBar.add(Box.createHorizontalStrut(5));
                toolBar.add(jcmd);
                toolBar.add(Box.createHorizontalStrut(10));
            }
        }
    }
    public void addCustomCommands(JToolBar toolBar) {
        toolBar.add(Box.createHorizontalStrut(8));
        toolBar.add(createLineItemUpdateMethodButton());
    }
    public JButton createGoBackButton() {
        return null;
    }
    public JButton createGotoListButton() {
        if (!getModel().getAllowGotoList()) return null;
        JButton cmd = new JButton();
        cmd.setIcon(Resource.getJarIcon(Resource.getValue(Resource.IMG_GoBack)));
        cmd.setToolTipText("Go to listing");
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                LineItemJfc.this.showCardPanel(LineItemJfc.this.CARD_List);
            }
        });
        OAButton.setup(cmd);
        return cmd;
    }
    
    public JButton createSearchButton() {
        if (!getModel().getAllowSearch()) return null;
        JButton cmd = new JButton("Search ...");
        cmd.setIcon(Resource.getJarIcon(Resource.getValue(Resource.IMG_Search)));
        cmd.setToolTipText("advanced search.");
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                LineItemJfc.this.onSearch();
            }
        });
        OAButton.setup(cmd);
        return cmd;
    }
    
    public JButton createHubSearchButton() {
        if (!getModel().getAllowHubSearch()) return null;
        JButton cmd = new JButton("Search ...");
        cmd.setIcon(Resource.getJarIcon("hubSearch.gif"));
        cmd.setToolTipText("advanced search for current list.");
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                LineItemJfc.this.onHubSearch();
            }
        });
        OAButton.setup(cmd);
        return cmd;
    }
    // Card Panel
    public JPanel getCardPanel() {
        if (cardPanel != null) return cardPanel;
        cardPanel = new JPanel(getCardLayout());
        JToolBar toolBar;
        if (getModel().getAllowSearch()) toolBar = createNorthTableSearchToolBar();
        else toolBar = createNorthTableToolBar();
        JPanel pan = new JPanel(new BorderLayout());
        pan.add(new OAScroller(toolBar), BorderLayout.NORTH);
        pan.add(getTableCardPanel(false), BorderLayout.CENTER);
        cardPanel.add(pan, CARD_List);
    
        pan = new JPanel(new BorderLayout());
        pan.add(new OAScroller(createEditPanelToolBar()), BorderLayout.NORTH);
        pan.add(new JScrollPane(createEditPanel(true)), BorderLayout.CENTER);
        cardPanel.add(pan, CARD_Edit);
    
        getCardLayout().show(cardPanel, CARD_List);
        return cardPanel;
    }
    public CardLayout getCardLayout() {
        if (cardLayout == null) {
            cardLayout = new CardLayout(5,5);
        }
        return cardLayout;
    }
    
    // Edit Panel
    public JPanel createEditPanel() {
        return createEditPanel(true);
    }
    public JPanel createEditPanel(boolean bUseCombinedDetail) {
        JPanel panel = new JPanel(new BorderLayout());
        panel.add(createMainTabPanel(bUseCombinedDetail));
        return panel;
    }
    public JPanel createDefaultEditPanel(final boolean bUseCombinedDetail) {
        GridBagConstraints gc = new GridBagConstraints();
        gc.insets = new Insets(1, 3, 1, 3);
        gc.anchor = gc.WEST;
        JPanel panel;
        JLabel lbl;
        JButton cmd;
        OALabel olbl;
        OATextArea txta;
        OATextField txt;
        OACheckBox chk;
        OADateComboBox dcbo;
        OATreeComboBox tcbo;
        JPanel pan;
        panel = new JPanel(new GridBagLayout());
        panel.setBorder(new EmptyBorder(5,5, 3,3));
    
        lbl = new JLabel("Id:");
        new EnabledController(lbl, getHub());
        olbl = createIdLabel();
        lbl.setLabelFor(olbl);
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        gc.gridwidth = gc.REMAINDER;
        panel.add(olbl, gc);
        gc.gridwidth = 1;
    
        lbl = new JLabel("Description:");
        new EnabledController(lbl, getHub());
        txta = createDescriptionTextArea();
        lbl.setLabelFor(txta);
        gc.anchor = gc.NORTHWEST;
        gc.gridwidth = gc.REMAINDER;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        txtaDescription = txta;
        gc.insets = new Insets(0, 10, 0, 0);
        gc.weightx = 0.75f;
        gc.weighty = 0.75f;
        gc.fill = gc.BOTH;
        panel.add(new OAResizePanel(new JScrollPane(txta), 90, true), gc);
        gc.fill = gc.NONE;
        gc.weightx = 0.0f;
        gc.weighty = 0.0f;
        gc.insets = new Insets(0, 0, 0, 0);
        gc.gridwidth = 1;
    
        lbl = new JLabel("Billed Amount:");
        new EnabledController(lbl, getHub());
        txt = createBilledAmountTextField();
        lbl.setLabelFor(txt);
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        gc.gridwidth = gc.REMAINDER;
        panel.add(txt, gc);
        gc.gridwidth = 1;
    
        lbl = new JLabel("Paid Amount:");
        new EnabledController(lbl, getHub());
        txt = createPaidAmountTextField();
        lbl.setLabelFor(txt);
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        gc.gridwidth = gc.REMAINDER;
        panel.add(txt, gc);
        gc.gridwidth = 1;
    
        lbl = new JLabel("Billed:");
        new EnabledController(lbl, getHub());
        chk = createBilledCheckBox();
        lbl.setLabelFor(chk);
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        gc.gridwidth = gc.REMAINDER;
        panel.add(chk, gc);
        gc.gridwidth = 1;
    
        lbl = new JLabel("Paid:");
        new EnabledController(lbl, getHub());
        chk = createPaidCheckBox();
        lbl.setLabelFor(chk);
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        gc.gridwidth = gc.REMAINDER;
        panel.add(chk, gc);
        gc.gridwidth = 1;
    
        lbl = new JLabel("Invoice Number:");
        new EnabledController(lbl, getHub());
        txt = createInvoiceNumberTextField();
        lbl.setLabelFor(txt);
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        gc.gridwidth = gc.REMAINDER;
        panel.add(txt, gc);
        gc.gridwidth = 1;
    
        lbl = new JLabel("Invoicedate:");
        new EnabledController(lbl, getHub());
        dcbo = createInvoicedateDateComboBox();
        lbl.setLabelFor(dcbo);
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        panel.add(new OAResizePanel(dcbo, 20), gc);
        gc.fill = gc.NONE;
        gc.gridwidth = 1;
    
        lbl = new JLabel("Billable:");
        new EnabledController(lbl, getHub());
        chk = createBillableCheckBox();
        lbl.setLabelFor(chk);
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        gc.gridwidth = gc.REMAINDER;
        panel.add(chk, gc);
        gc.gridwidth = 1;
    
        lbl = new JLabel("Needs Update:");
        new EnabledController(lbl, getHub());
        olbl = createNeedsUpdateLabel();
        lbl.setLabelFor(olbl);
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        panel.add(new OAResizePanel(olbl, 10), gc);
        gc.fill = gc.NONE;
        gc.gridwidth = 1;
    
        lbl = new JLabel("Balance:");
        new EnabledController(lbl, getHub());
        olbl = createBalanceLabel();
        lbl.setLabelFor(olbl);
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        gc.gridwidth = gc.REMAINDER;
        panel.add(olbl, gc);
        gc.gridwidth = 1;
    
        lbl = new JLabel("Value:");
        new EnabledController(lbl, getHub());
        olbl = createValueLabel();
        lbl.setLabelFor(olbl);
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        gc.gridwidth = gc.REMAINDER;
        panel.add(olbl, gc);
        gc.gridwidth = 1;
        if (getModel().getInspireOrderModel().getViewOnly()) {
            lbl = new JLabel("Inspire Order:");
            new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            cmd = createInspireOrderCommand();
            if (getModel().getInspireOrderModel().getCreateUI()) {
                panel.add(new OAResizePanel(getInspireOrderJfc().createLabel(), cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        else {
            lbl = new JLabel("Inspire Order:");
            new EnabledController(lbl, getHub());
            olbl = createInspireOrderLabel();
            lbl.setLabelFor(olbl);
            if (getModel().getInspireOrderModel().getCreateUI()) {
                gc.anchor = gc.WEST;
                panel.add(lbl, gc);
                gc.anchor = gc.NORTHWEST;
            }
            new VisibleController(lbl, model.getInspireOrderHub(), LineItemPP.inspireOrder().pp, true);
            cmd = createInspireOrderCommand();
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getInspireOrderModel().getCreateUI()) {
                panel.add(new OAResizePanel(olbl, cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        if (getModel().getPointsRecordModel().getViewOnly()) {
            lbl = new JLabel("Points Record:");
            new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            cmd = createPointsRecordCommand();
            if (getModel().getPointsRecordModel().getCreateUI()) {
                panel.add(new OAResizePanel(getPointsRecordJfc().createLabel(), cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        else {
            lbl = new JLabel("Points Record:");
            new EnabledController(lbl, getHub());
            olbl = createPointsRecordLabel();
            lbl.setLabelFor(olbl);
            if (getModel().getPointsRecordModel().getCreateUI()) {
                gc.anchor = gc.WEST;
                panel.add(lbl, gc);
                gc.anchor = gc.NORTHWEST;
            }
            new VisibleController(lbl, model.getPointsRecordHub(), LineItemPP.pointsRecord().pp, true);
            cmd = createPointsRecordCommand();
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getPointsRecordModel().getCreateUI()) {
                panel.add(new OAResizePanel(olbl, cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        if (getModel().getEmailModel().getViewOnly()) {
            lbl = new JLabel("Email:");
            new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            cmd = createEmailCommand();
            if (getModel().getEmailModel().getCreateUI()) {
                panel.add(new OAResizePanel(getEmailJfc().createLabel(), cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        else {
            lbl = new JLabel("Email:");
            new EnabledController(lbl, getHub());
            olbl = createEmailLabel();
            lbl.setLabelFor(olbl);
            if (getModel().getEmailModel().getCreateUI()) {
                gc.anchor = gc.WEST;
                panel.add(lbl, gc);
                gc.anchor = gc.NORTHWEST;
            }
//qqqqqqqqqqqqqqqqqqqq correct            
            new VisibleController(lbl, model.getEmailHub(), LineItemPP.email().pp, true);
            cmd = createEmailCommand();
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getEmailModel().getCreateUI()) {
//qqqqqqqqqq resizePanel should have visibleControlle                
                panel.add(new OAResizePanel(olbl, cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        if (getModel().getAwardCardOrderModel().getViewOnly()) {
            lbl = new JLabel("Award Card Order:");
            new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            cmd = createAwardCardOrderCommand();
            if (getModel().getAwardCardOrderModel().getCreateUI()) {
                panel.add(new OAResizePanel(getAwardCardOrderJfc().createLabel(), cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        else {
            lbl = new JLabel("Award Card Order:");
            new EnabledController(lbl, getHub());
            olbl = createAwardCardOrderLabel();
            lbl.setLabelFor(olbl);
            if (getModel().getAwardCardOrderModel().getCreateUI()) {
                gc.anchor = gc.WEST;
                panel.add(lbl, gc);
                gc.anchor = gc.NORTHWEST;
            }
            new VisibleController(lbl, model.getAwardCardOrderHub(), LineItemPP.awardCardOrder().pp, true);
            cmd = createAwardCardOrderCommand();
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getAwardCardOrderModel().getCreateUI()) {
                panel.add(new OAResizePanel(olbl, cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        if (getModel().getEmployeeAwardModel().getViewOnly()) {
            lbl = new JLabel("Employee Award:");
            new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            cmd = createEmployeeAwardCommand();
            if (getModel().getEmployeeAwardModel().getCreateUI()) {
                panel.add(new OAResizePanel(getEmployeeAwardJfc().createLabel(), cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        else {
            lbl = new JLabel("Employee Award:");
            new EnabledController(lbl, getHub());
            olbl = createEmployeeAwardLabel();
            lbl.setLabelFor(olbl);
            if (getModel().getEmployeeAwardModel().getCreateUI()) {
                gc.anchor = gc.WEST;
                panel.add(lbl, gc);
                gc.anchor = gc.NORTHWEST;
            }
            new VisibleController(lbl, model.getEmployeeAwardHub(), LineItemPP.employeeAward().pp, true);
            cmd = createEmployeeAwardCommand();
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getEmployeeAwardModel().getCreateUI()) {
                panel.add(new OAResizePanel(olbl, cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        if (getModel().getEmployeeModel().getViewOnly()) {
            lbl = new JLabel("Employee:");
            new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            cmd = createEmployeeCommand();
            if (getModel().getEmployeeModel().getCreateUI()) {
                panel.add(new OAResizePanel(getEmployeeJfc().createLabel(), cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        else {
            lbl = new JLabel("Employee:");
            new EnabledController(lbl, getHub());
            tcbo = createEmployeeTreeComboBox();
            lbl.setLabelFor(tcbo);
            if (getModel().getEmployeeModel().getCreateUI()) {
                gc.anchor = gc.WEST;
                panel.add(lbl, gc);
                gc.anchor = gc.NORTHWEST;
            }
            new VisibleController(lbl, model.getEmployeeHub(), LineItemPP.employee().pp, true);
            cmd = createEmployeeCommand();
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getEmployeeModel().getCreateUI()) {
                panel.add(new OAResizePanel(tcbo, cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        if (getModel().getLocationModel().getViewOnly()) {
            lbl = new JLabel("Location:");
            new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            cmd = createLocationCommand();
            if (getModel().getLocationModel().getCreateUI()) {
                panel.add(new OAResizePanel(getLocationJfc().createLabel(), cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        else {
            lbl = new JLabel("Location:");
            new EnabledController(lbl, getHub());
            tcbo = createLocationTreeComboBox();
            lbl.setLabelFor(tcbo);
            if (getModel().getLocationModel().getCreateUI()) {
                gc.anchor = gc.WEST;
                panel.add(lbl, gc);
                gc.anchor = gc.NORTHWEST;
            }
            new VisibleController(lbl, model.getLocationHub(), LineItemPP.location().pp, true);
            cmd = createLocationCommand();
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getLocationModel().getCreateUI()) {
                panel.add(new OAResizePanel(tcbo, cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        if (getModel().getProgramModel().getViewOnly()) {
            lbl = new JLabel("Program:");
            new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            cmd = createProgramCommand();
            if (getModel().getProgramModel().getCreateUI()) {
                panel.add(new OAResizePanel(getProgramJfc().createLabel(), cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        else {
            lbl = new JLabel("Program:");
            new EnabledController(lbl, getHub());
            tcbo = createProgramTreeComboBox();
            lbl.setLabelFor(tcbo);
            if (getModel().getProgramModel().getCreateUI()) {
                gc.anchor = gc.WEST;
                panel.add(lbl, gc);
                gc.anchor = gc.NORTHWEST;
            }
            new VisibleController(lbl, model.getProgramHub(), LineItemPP.program().pp, true);
            cmd = createProgramCommand();
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getProgramModel().getCreateUI()) {
                panel.add(new OAResizePanel(tcbo, cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
    
        lbl = new JLabel("Created:");
        new EnabledController(lbl, getHub());
        dcbo = createCreatedDateComboBox();
        lbl.setLabelFor(dcbo);
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        panel.add(new OAResizePanel(dcbo, 20), gc);
        gc.fill = gc.NONE;
        gc.gridwidth = 1;
    
        lbl = new JLabel("Current Value:");
        new EnabledController(lbl, getHub());
        txt = createCurrentValueTextField();
        lbl.setLabelFor(txt);
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        panel.add(new OAResizePanel(txt, 75), gc);
        gc.fill = gc.NONE;
        gc.gridwidth = 1;
    
        lbl = new JLabel("Base Creation Date:");
        new EnabledController(lbl, getHub());
        dcbo = createBaseCreationDateDateComboBox();
        lbl.setLabelFor(dcbo);
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        panel.add(new OAResizePanel(dcbo, 20), gc);
        gc.fill = gc.NONE;
        gc.gridwidth = 1;
        if (getModel().getInspireRecipientModel().getViewOnly()) {
            lbl = new JLabel("Inspire Recipient:");
            new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            cmd = createInspireRecipientCommand();
            if (getModel().getInspireRecipientModel().getCreateUI()) {
                panel.add(new OAResizePanel(getInspireRecipientJfc().createLabel(), cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        else {
            lbl = new JLabel("Inspire Recipient:");
            new EnabledController(lbl, getHub());
            olbl = createInspireRecipientLabel();
            lbl.setLabelFor(olbl);
            if (getModel().getInspireRecipientModel().getCreateUI()) {
                gc.anchor = gc.WEST;
                panel.add(lbl, gc);
                gc.anchor = gc.NORTHWEST;
            }
            new VisibleController(lbl, model.getInspireRecipientHub(), LineItemPP.inspireRecipient().pp, true);
            cmd = createInspireRecipientCommand();
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getInspireRecipientModel().getCreateUI()) {
                panel.add(new OAResizePanel(olbl, cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        if (getModel().getInspireOrderItemModel().getViewOnly()) {
            lbl = new JLabel("Inspire Order Item:");
            new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            cmd = createInspireOrderItemCommand();
            if (getModel().getInspireOrderItemModel().getCreateUI()) {
                panel.add(new OAResizePanel(getInspireOrderItemJfc().createLabel(), cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        else {
            lbl = new JLabel("Inspire Order Item:");
            new EnabledController(lbl, getHub());
            olbl = createInspireOrderItemLabel();
            lbl.setLabelFor(olbl);
            if (getModel().getInspireOrderItemModel().getCreateUI()) {
                gc.anchor = gc.WEST;
                panel.add(lbl, gc);
                gc.anchor = gc.NORTHWEST;
            }
            new VisibleController(lbl, model.getInspireOrderItemHub(), LineItemPP.inspireOrderItem().pp, true);
            cmd = createInspireOrderItemCommand();
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getInspireOrderItemModel().getCreateUI()) {
                panel.add(new OAResizePanel(olbl, cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        if (getModel().getInspireOrderIntlVisaModel().getViewOnly()) {
            lbl = new JLabel("Inspire Order:");
            new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            cmd = createInspireOrderIntlVisaCommand();
            if (getModel().getInspireOrderIntlVisaModel().getCreateUI()) {
                panel.add(new OAResizePanel(getInspireOrderIntlVisaJfc().createLabel(), cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        else {
            lbl = new JLabel("Inspire Order:");
            new EnabledController(lbl, getHub());
            olbl = createInspireOrderIntlVisaLabel();
            lbl.setLabelFor(olbl);
            if (getModel().getInspireOrderIntlVisaModel().getCreateUI()) {
                gc.anchor = gc.WEST;
                panel.add(lbl, gc);
                gc.anchor = gc.NORTHWEST;
            }
            new VisibleController(lbl, model.getInspireOrderIntlVisaHub(), LineItemPP.inspireOrderIntlVisa().pp, true);
            cmd = createInspireOrderIntlVisaCommand();
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getInspireOrderIntlVisaModel().getCreateUI()) {
                panel.add(new OAResizePanel(olbl, cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        if (getModel().getInspireOrderCharityModel().getViewOnly()) {
            lbl = new JLabel("Inspire Order Charity:");
            new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            cmd = createInspireOrderCharityCommand();
            if (getModel().getInspireOrderCharityModel().getCreateUI()) {
                panel.add(new OAResizePanel(getInspireOrderCharityJfc().createLabel(), cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        else {
            lbl = new JLabel("Inspire Order Charity:");
            new EnabledController(lbl, getHub());
            olbl = createInspireOrderCharityLabel();
            lbl.setLabelFor(olbl);
            if (getModel().getInspireOrderCharityModel().getCreateUI()) {
                gc.anchor = gc.WEST;
                panel.add(lbl, gc);
                gc.anchor = gc.NORTHWEST;
            }
            new VisibleController(lbl, model.getInspireOrderCharityHub(), LineItemPP.inspireOrderCharity().pp, true);
            cmd = createInspireOrderCharityCommand();
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getInspireOrderCharityModel().getCreateUI()) {
                panel.add(new OAResizePanel(olbl, cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        if (getModel().getInspireOrderCashModel().getViewOnly()) {
            lbl = new JLabel("Inspire Order:");
            new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            cmd = createInspireOrderCashCommand();
            if (getModel().getInspireOrderCashModel().getCreateUI()) {
                panel.add(new OAResizePanel(getInspireOrderCashJfc().createLabel(), cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        else {
            lbl = new JLabel("Inspire Order:");
            new EnabledController(lbl, getHub());
            olbl = createInspireOrderCashLabel();
            lbl.setLabelFor(olbl);
            if (getModel().getInspireOrderCashModel().getCreateUI()) {
                gc.anchor = gc.WEST;
                panel.add(lbl, gc);
                gc.anchor = gc.NORTHWEST;
            }
            new VisibleController(lbl, model.getInspireOrderCashHub(), LineItemPP.inspireOrderCash().pp, true);
            cmd = createInspireOrderCashCommand();
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getInspireOrderCashModel().getCreateUI()) {
                panel.add(new OAResizePanel(olbl, cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        if (getModel().getEmployeeEcardToModel().getViewOnly()) {
            lbl = new JLabel("Ecard Recipient:");
            new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            cmd = createEmployeeEcardToCommand();
            if (getModel().getEmployeeEcardToModel().getCreateUI()) {
                panel.add(new OAResizePanel(getEmployeeEcardToJfc().createLabel(), cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        else {
            lbl = new JLabel("Ecard Recipient:");
            new EnabledController(lbl, getHub());
            olbl = createEmployeeEcardToLabel();
            lbl.setLabelFor(olbl);
            if (getModel().getEmployeeEcardToModel().getCreateUI()) {
                gc.anchor = gc.WEST;
                panel.add(lbl, gc);
                gc.anchor = gc.NORTHWEST;
            }
            new VisibleController(lbl, model.getEmployeeEcardToHub(), LineItemPP.employeeEcardTo().pp, true);
            cmd = createEmployeeEcardToCommand();
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getEmployeeEcardToModel().getCreateUI()) {
                panel.add(new OAResizePanel(olbl, cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        if (getModel().getEmployeeAwardIntlVisaModel().getViewOnly()) {
            lbl = new JLabel("Employee Award:");
            new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            cmd = createEmployeeAwardIntlVisaCommand();
            if (getModel().getEmployeeAwardIntlVisaModel().getCreateUI()) {
                panel.add(new OAResizePanel(getEmployeeAwardIntlVisaJfc().createLabel(), cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        else {
            lbl = new JLabel("Employee Award:");
            new EnabledController(lbl, getHub());
            olbl = createEmployeeAwardIntlVisaLabel();
            lbl.setLabelFor(olbl);
            if (getModel().getEmployeeAwardIntlVisaModel().getCreateUI()) {
                gc.anchor = gc.WEST;
                panel.add(lbl, gc);
                gc.anchor = gc.NORTHWEST;
            }
            new VisibleController(lbl, model.getEmployeeAwardIntlVisaHub(), LineItemPP.employeeAwardIntlVisa().pp, true);
            cmd = createEmployeeAwardIntlVisaCommand();
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getEmployeeAwardIntlVisaModel().getCreateUI()) {
                panel.add(new OAResizePanel(olbl, cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        if (getModel().getEmployeeAwardCharityModel().getViewOnly()) {
            lbl = new JLabel("Employee Award Charity:");
            new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            cmd = createEmployeeAwardCharityCommand();
            if (getModel().getEmployeeAwardCharityModel().getCreateUI()) {
                panel.add(new OAResizePanel(getEmployeeAwardCharityJfc().createLabel(), cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        else {
            lbl = new JLabel("Employee Award Charity:");
            new EnabledController(lbl, getHub());
            olbl = createEmployeeAwardCharityLabel();
            lbl.setLabelFor(olbl);
            if (getModel().getEmployeeAwardCharityModel().getCreateUI()) {
                gc.anchor = gc.WEST;
                panel.add(lbl, gc);
                gc.anchor = gc.NORTHWEST;
            }
            new VisibleController(lbl, model.getEmployeeAwardCharityHub(), LineItemPP.employeeAwardCharity().pp, true);
            cmd = createEmployeeAwardCharityCommand();
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getEmployeeAwardCharityModel().getCreateUI()) {
                panel.add(new OAResizePanel(olbl, cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        if (getModel().getEmployeeAwardCashModel().getViewOnly()) {
            lbl = new JLabel("Employee Award:");
            new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            cmd = createEmployeeAwardCashCommand();
            if (getModel().getEmployeeAwardCashModel().getCreateUI()) {
                panel.add(new OAResizePanel(getEmployeeAwardCashJfc().createLabel(), cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        else {
            lbl = new JLabel("Employee Award:");
            new EnabledController(lbl, getHub());
            olbl = createEmployeeAwardCashLabel();
            lbl.setLabelFor(olbl);
            if (getModel().getEmployeeAwardCashModel().getCreateUI()) {
                gc.anchor = gc.WEST;
                panel.add(lbl, gc);
                gc.anchor = gc.NORTHWEST;
            }
            new VisibleController(lbl, model.getEmployeeAwardCashHub(), LineItemPP.employeeAwardCash().pp, true);
            cmd = createEmployeeAwardCashCommand();
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getEmployeeAwardCashModel().getCreateUI()) {
                panel.add(new OAResizePanel(olbl, cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        if (getModel().getPointsRequestModel().getViewOnly()) {
            lbl = new JLabel("Points Request:");
            new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            cmd = createPointsRequestCommand();
            if (getModel().getPointsRequestModel().getCreateUI()) {
                panel.add(new OAResizePanel(getPointsRequestJfc().createLabel(), cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        else {
            lbl = new JLabel("Points Request:");
            new EnabledController(lbl, getHub());
            olbl = createPointsRequestLabel();
            lbl.setLabelFor(olbl);
            if (getModel().getPointsRequestModel().getCreateUI()) {
                gc.anchor = gc.WEST;
                panel.add(lbl, gc);
                gc.anchor = gc.NORTHWEST;
            }
            cmd = createPointsRequestCommand();
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getPointsRequestModel().getCreateUI()) {
                panel.add(new OAResizePanel(olbl, cmd, 75), gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
    
        // take up remaining space
        lbl = new JLabel("");
        panel.add(lbl, gc);
        lbl = new JLabel("");
        panel.add(lbl, gc);
        lbl = new JLabel("");
        gc.gridwidth = gc.REMAINDER;
        gc.weightx = 0.25f;
        gc.weighty = 0.25f;
        gc.fill = gc.BOTH;
        panel.add(lbl, gc);
        gc.gridwidth = 1;
        gc.weightx = gc.weighty = 0.0f;
        gc.fill = gc.NONE;
    
    
        return panel;
    }
    
    
    // edit dialog
    public JDialog getEditDialog(Component comp) {
        JDialog dlgEdit;
        if (wrEditDialog != null) {
            dlgEdit = wrEditDialog.get();
            if (dlgEdit != null) return dlgEdit;
        }
        Window win = JfcDelegate.getWindow(comp);
        dlgEdit = new JDialog(win, getModel().getDisplayName(), ModalityType.MODELESS);
        wrEditDialog = new WeakReference(dlgEdit);
        dlgEdit.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
        dlgEdit.setLayout(new BorderLayout());
        JToolBar tb = createDialogToolBar();
        if (tb != null) {
            dlgEdit.add(new OAScroller(tb), BorderLayout.NORTH);
        }
        JPanel panEdit = createEditPanel();
        dlgEdit.add(new JScrollPane(panEdit), BorderLayout.CENTER);
        
        panEdit.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, false), "esc");
        panEdit.getActionMap().put("esc", new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                getEditDialog(null).setVisible(false);
            }
        });
        
        dlgEdit.pack();
        Dimension dimMax;
        dimMax = Toolkit.getDefaultToolkit().getScreenSize();
        dimMax.width *= .9;
        dimMax.height *= .9;
        Dimension dim = dlgEdit.getSize();
        dim.width = (int) Math.min(dim.width+25, dimMax.width);
        dim.height = (int) Math.min(dim.height+25, dimMax.height);
        dlgEdit.setSize(dim);
        
        dim.width = (int) Math.max(dim.width, dimMax.width/3);
        dim.height = (int) Math.max(dim.height, dimMax.height/3);
        
        if (win != null) dlgEdit.setLocationRelativeTo(win);
        return dlgEdit;
    }
    
    protected JPanel createMainTabPanel(final boolean bUseCombinedDetail) { // label=Main Tab, type=One Column
        GridBagConstraints gc = new GridBagConstraints();
        gc.insets = new Insets(1, 3, 1, 3);
        gc.anchor = gc.NORTHWEST;
        JLabel lbl;
        JComponent comp;
        JPanel pan;
        JButton cmd;
        JPanel panel = new JPanel(new GridBagLayout());
        Border border;
        border = new EmptyBorder(5, 5, 3, 3);
        panel.setBorder(border);
        lbl = new JLabel("Id:");
        new EnabledController(lbl, getHub());
        panel.add(lbl, gc);
        gc.gridwidth = gc.REMAINDER;
        comp = createIdLabel();
        panel.add(comp, gc);
        lbl = new JLabel("Description:");
        new EnabledController(lbl, getHub());
        panel.add(lbl, gc);
        gc.gridwidth = gc.REMAINDER;
        gc.weightx = 0.75f;
        gc.fill = gc.BOTH;
        comp = new OAResizePanel(new JScrollPane(createDescriptionTextArea()), 90);
        panel.add(comp, gc);
        gc.fill = gc.NONE;
        gc.weightx = 0.0f;
        lbl = new JLabel("Billed Amount:");
        new EnabledController(lbl, getHub());
        panel.add(lbl, gc);
        gc.gridwidth = gc.REMAINDER;
        comp = createBilledAmountTextField();
        panel.add(comp, gc);
        lbl = new JLabel("Paid Amount:");
        new EnabledController(lbl, getHub());
        panel.add(lbl, gc);
        gc.gridwidth = gc.REMAINDER;
        comp = createPaidAmountTextField();
        panel.add(comp, gc);
        lbl = new JLabel("Billed:");
        new EnabledController(lbl, getHub());
        panel.add(lbl, gc);
        gc.gridwidth = gc.REMAINDER;
        comp = createBilledCheckBox();
        panel.add(comp, gc);
        lbl = new JLabel("Paid:");
        new EnabledController(lbl, getHub());
        panel.add(lbl, gc);
        gc.gridwidth = gc.REMAINDER;
        comp = createPaidCheckBox();
        panel.add(comp, gc);
        lbl = new JLabel("Invoice Number:");
        new EnabledController(lbl, getHub());
        panel.add(lbl, gc);
        gc.gridwidth = gc.REMAINDER;
        comp = createInvoiceNumberTextField();
        panel.add(comp, gc);
        lbl = new JLabel("Invoicedate:");
        new EnabledController(lbl, getHub());
        panel.add(lbl, gc);
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        comp = new OAResizePanel(createInvoicedateDateComboBox(), 20);
        panel.add(comp, gc);
        gc.fill = gc.NONE;
        lbl = new JLabel("Billable:");
        new EnabledController(lbl, getHub());
        panel.add(lbl, gc);
        gc.gridwidth = gc.REMAINDER;
        comp = createBillableCheckBox();
        panel.add(comp, gc);
        lbl = new JLabel("Needs Update:");
        new EnabledController(lbl, getHub());
        panel.add(lbl, gc);
        gc.fill = gc.HORIZONTAL;
        comp = new OAResizePanel(createNeedsUpdateLabel(), 10);
        panel.add(comp, gc);
        gc.fill = gc.NONE;
        lbl = new JLabel("Balance:");
        new EnabledController(lbl, getHub());
        panel.add(lbl, gc);
        comp = createBalanceLabel();
        panel.add(comp, gc);
        lbl = new JLabel("Value:");
        new EnabledController(lbl, getHub());
        panel.add(lbl, gc);
        comp = createValueLabel();
        panel.add(comp, gc);
        lbl = new JLabel("Inspire Order:");
        new EnabledController(lbl, getHub());
        new VisibleController(lbl, LineItemJfc.this.getHub(), LineItemPP.inspireOrder().pp, true);
        panel.add(lbl, gc);
        cmd = createInspireOrderCommand();
        comp = new OAResizePanel(createInspireOrderLabel(), cmd, 20);
        panel.add(comp, gc);
        lbl = new JLabel("Points Record:");
        new EnabledController(lbl, getHub());
        new VisibleController(lbl, LineItemJfc.this.getHub(), LineItemPP.pointsRecord().pp, true);
        panel.add(lbl, gc);
        cmd = createPointsRecordCommand();
        comp = new OAResizePanel(createPointsRecordLabel(), cmd, 20);
        panel.add(comp, gc);
        lbl = new JLabel("Email:");
//correct        
        new EnabledController(lbl, getHub());
//correct        
        new VisibleController(lbl, LineItemJfc.this.getHub(), LineItemPP.email().pp, true);
        panel.add(lbl, gc);
        cmd = createEmailCommand();
        comp = new OAResizePanel(createEmailLabel(), cmd, 20);
//qqqqqqqqqq needs to have visibleController for resizePanel        
        
        
        panel.add(comp, gc);
        lbl = new JLabel("Award Card Order:");
        new EnabledController(lbl, getHub());
        new VisibleController(lbl, LineItemJfc.this.getHub(), LineItemPP.awardCardOrder().pp, true);
        panel.add(lbl, gc);
        cmd = createAwardCardOrderCommand();
        comp = new OAResizePanel(createAwardCardOrderLabel(), cmd, 20);
        panel.add(comp, gc);
        lbl = new JLabel("Employee Award:");
        new EnabledController(lbl, getHub());
        new VisibleController(lbl, LineItemJfc.this.getHub(), LineItemPP.employeeAward().pp, true);
        panel.add(lbl, gc);
        cmd = createEmployeeAwardCommand();
        comp = new OAResizePanel(createEmployeeAwardLabel(), cmd, 20);
        panel.add(comp, gc);
        lbl = new JLabel("Employee:");
        new EnabledController(lbl, getHub());
        new VisibleController(lbl, LineItemJfc.this.getHub(), LineItemPP.employee().pp, true);
        panel.add(lbl, gc);
        cmd = createEmployeeCommand();
        comp = new OAResizePanel(createEmployeeTreeComboBox(), cmd, 20);
        panel.add(comp, gc);
        lbl = new JLabel("Location:");
        new EnabledController(lbl, getHub());
        new VisibleController(lbl, LineItemJfc.this.getHub(), LineItemPP.location().pp, true);
        panel.add(lbl, gc);
        cmd = createLocationCommand();
        comp = new OAResizePanel(createLocationTreeComboBox(), cmd, 20);
        panel.add(comp, gc);
        lbl = new JLabel("Program:");
        new EnabledController(lbl, getHub());
        new VisibleController(lbl, LineItemJfc.this.getHub(), LineItemPP.program().pp, true);
        panel.add(lbl, gc);
        cmd = createProgramCommand();
        comp = new OAResizePanel(createProgramTreeComboBox(), cmd, 20);
        panel.add(comp, gc);
        lbl = new JLabel("Created:");
        new EnabledController(lbl, getHub());
        panel.add(lbl, gc);
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        comp = new OAResizePanel(createCreatedDateComboBox(), 20);
        panel.add(comp, gc);
        gc.fill = gc.NONE;
        lbl = new JLabel("Current Value:");
        new EnabledController(lbl, getHub());
        panel.add(lbl, gc);
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        comp = new OAResizePanel(createCurrentValueTextField(), 75);
        panel.add(comp, gc);
        gc.fill = gc.NONE;
        lbl = new JLabel("Base Creation Date:");
        new EnabledController(lbl, getHub());
        panel.add(lbl, gc);
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        comp = new OAResizePanel(createBaseCreationDateDateComboBox(), 20);
        panel.add(comp, gc);
        gc.fill = gc.NONE;
        lbl = new JLabel("Inspire Recipient:");
        new EnabledController(lbl, getHub());
        new VisibleController(lbl, LineItemJfc.this.getHub(), LineItemPP.inspireRecipient().pp, true);
        panel.add(lbl, gc);
        cmd = createInspireRecipientCommand();
        comp = new OAResizePanel(createInspireRecipientLabel(), cmd, 20);
        panel.add(comp, gc);
        lbl = new JLabel("Inspire Order Item:");
        new EnabledController(lbl, getHub());
        new VisibleController(lbl, LineItemJfc.this.getHub(), LineItemPP.inspireOrderItem().pp, true);
        panel.add(lbl, gc);
        cmd = createInspireOrderItemCommand();
        comp = new OAResizePanel(createInspireOrderItemLabel(), cmd, 20);
        panel.add(comp, gc);
        lbl = new JLabel("Inspire Order Intl Visa:");
        new EnabledController(lbl, getHub());
        new VisibleController(lbl, LineItemJfc.this.getHub(), LineItemPP.inspireOrderIntlVisa().pp, true);
        panel.add(lbl, gc);
        cmd = createInspireOrderIntlVisaCommand();
        comp = new OAResizePanel(createInspireOrderIntlVisaLabel(), cmd, 20);
        panel.add(comp, gc);
        lbl = new JLabel("Inspire Order Charity:");
        new EnabledController(lbl, getHub());
        new VisibleController(lbl, LineItemJfc.this.getHub(), LineItemPP.inspireOrderCharity().pp, true);
        panel.add(lbl, gc);
        cmd = createInspireOrderCharityCommand();
        comp = new OAResizePanel(createInspireOrderCharityLabel(), cmd, 20);
        panel.add(comp, gc);
        lbl = new JLabel("Inspire Order Cash:");
        new EnabledController(lbl, getHub());
        new VisibleController(lbl, LineItemJfc.this.getHub(), LineItemPP.inspireOrderCash().pp, true);
        panel.add(lbl, gc);
        cmd = createInspireOrderCashCommand();
        comp = new OAResizePanel(createInspireOrderCashLabel(), cmd, 20);
        panel.add(comp, gc);
        lbl = new JLabel("Employee Ecard To:");
        new EnabledController(lbl, getHub());
        new VisibleController(lbl, LineItemJfc.this.getHub(), LineItemPP.employeeEcardTo().pp, true);
        panel.add(lbl, gc);
        cmd = createEmployeeEcardToCommand();
        comp = new OAResizePanel(createEmployeeEcardToLabel(), cmd, 20);
        panel.add(comp, gc);
        lbl = new JLabel("Employee Award Intl Visa:");
        new EnabledController(lbl, getHub());
        new VisibleController(lbl, LineItemJfc.this.getHub(), LineItemPP.employeeAwardIntlVisa().pp, true);
        panel.add(lbl, gc);
        cmd = createEmployeeAwardIntlVisaCommand();
        comp = new OAResizePanel(createEmployeeAwardIntlVisaLabel(), cmd, 20);
        panel.add(comp, gc);
        lbl = new JLabel("Employee Award Charity:");
        new EnabledController(lbl, getHub());
        new VisibleController(lbl, LineItemJfc.this.getHub(), LineItemPP.employeeAwardCharity().pp, true);
        panel.add(lbl, gc);
        cmd = createEmployeeAwardCharityCommand();
        comp = new OAResizePanel(createEmployeeAwardCharityLabel(), cmd, 20);
        panel.add(comp, gc);
        lbl = new JLabel("Employee Award Cash:");
        new EnabledController(lbl, getHub());
        new VisibleController(lbl, LineItemJfc.this.getHub(), LineItemPP.employeeAwardCash().pp, true);
        panel.add(lbl, gc);
        cmd = createEmployeeAwardCashCommand();
        comp = new OAResizePanel(createEmployeeAwardCashLabel(), cmd, 20);
        panel.add(comp, gc);
        // take up remaining space
        lbl = new JLabel("");
        gc.gridwidth = gc.REMAINDER;
        gc.weightx = 1.0f;
        gc.weighty = 1.0f;
        panel.add(lbl, gc);
        gc.gridwidth = 1;
        gc.weightx = gc.weighty = 0.0f;
        return panel;
    }
    // Filters
    
    public OALabel createIdLabel() {
        OALabel lbl = new OALabel(getHub(), LineItem.P_Id, 7);
        return lbl;
    }
    
    public OATextArea createDescriptionTextArea() {
        OATextArea txta = new OATextArea(getHub(), LineItem.P_Description, 2, 100);
        txta.setWrapStyleWord(true);
        txta.setLineWrap(true);
        setup(txta);
        return txta;
    }
    public OALabel createDescriptionLabel() {
        OALabel lbl = new OALabel(getHub(), LineItem.P_Description, 100);
        return lbl;
    }
    
    public OATextField createBilledAmountTextField() {
        OATextField txt = new OATextField(getHub(), LineItem.P_BilledAmount, 10);
        // setup(txt);
        return txt;
    }
    
    public OATextField createPaidAmountTextField() {
        OATextField txt = new OATextField(getHub(), LineItem.P_PaidAmount, 10);
        // setup(txt);
        return txt;
    }
    
    public OACheckBox createBilledCheckBox() {
        OACheckBox chk = new OACheckBox(getHub(), LineItem.P_Billed);
        // chk.setText("Billed")
        chk.setToolTipText("");
        return chk;
    }
    
    public OACheckBox createPaidCheckBox() {
        OACheckBox chk = new OACheckBox(getHub(), LineItem.P_Paid);
        // chk.setText("Paid")
        chk.setToolTipText("");
        return chk;
    }
    
    public OATextField createInvoiceNumberTextField() {
        OATextField txt = new OATextField(getHub(), LineItem.P_InvoiceNumber, 5);
        // setup(txt);
        return txt;
    }
    
    public OADateComboBox createInvoicedateDateComboBox() {
        OADateComboBox dcbo = new OADateComboBox(getHub(), LineItem.P_Invoicedate, 5);
        dcbo.setMaximumColumns(9);
        OATextField txt = new OATextField(getHub(), LineItem.P_Invoicedate, 10);
        dcbo.setEditor(txt);
        return dcbo;
    }
    
    public OACheckBox createBillableCheckBox() {
        OACheckBox chk = new OACheckBox(getHub(), LineItem.P_Billable);
        // chk.setText("Billable")
        chk.setToolTipText("");
        return chk;
    }
    
    public OADateComboBox createCreatedDateComboBox() {
        OADateComboBox dcbo = new OADateComboBox(getHub(), LineItem.P_Created, 5);
        dcbo.setMaximumColumns(9);
        OATextField txt = new OATextField(getHub(), LineItem.P_Created, 10);
        dcbo.setEnabled(ModelDelegate.getLoginUserHub(), User.P_EditProcessed, true);
        txt.setEnabled(ModelDelegate.getLoginUserHub(), User.P_EditProcessed, true);
        dcbo.setEditor(txt);
        return dcbo;
    }
    
    public OATextField createCurrentValueTextField() {
        OATextField txt = new OATextField(getHub(), LineItem.P_CurrentValue, 7);
        txt.setEnabled(ModelDelegate.getLoginUserHub(), User.P_EditProcessed, true);
        // setup(txt);
        return txt;
    }
    
    public OADateComboBox createBaseCreationDateDateComboBox() {
        OADateComboBox dcbo = new OADateComboBox(getHub(), LineItem.P_BaseCreationDate, 5);
        dcbo.setMaximumColumns(9);
        OATextField txt = new OATextField(getHub(), LineItem.P_BaseCreationDate, 10);
        dcbo.setEnabled(ModelDelegate.getLoginUserHub(), User.P_EditProcessed, true);
        txt.setEnabled(ModelDelegate.getLoginUserHub(), User.P_EditProcessed, true);
        dcbo.setEditor(txt);
        return dcbo;
    }
    
    public OALabel createNeedsUpdateLabel() {
        OALabel lbl = new OALabel(getHub(), LineItem.P_NeedsUpdate, 7);
        return lbl;
    }
    
    public OALabel createBalanceLabel() {
        OALabel lbl = new OALabel(getHub(), LineItem.P_Balance, 9);
        return lbl;
    }
    
    public OALabel createValueLabel() {
        OALabel lbl = new OALabel(getHub(), LineItem.P_Value, 9);
        return lbl;
    }
    
    public OALabel createSumLabel() {
        OALabel lbl = new OALabel(getHub(), LineItem.P_Sum, 17);
        return lbl;
    }
    
    public OAButton createLineItemUpdateMethodButton() {
        OAButton cmd = new OAButton(getHub(), "Update ...");
        cmd.setMultiSelectHub(getModel().getMultiSelectHub());
        cmd.setIcon(Resource.getJarIcon("dot.gif"));
        cmd.setUseSwingWorker(true);
        cmd.setProcessingText("Update", "null");
        cmd.setMethodName("update");
        cmd.setup();
        return cmd;
    }
    
    public OALabel createAwardCardOrderLabel() {
        OALabel lbl = getAwardCardOrderJfc().createLabel();
        new VisibleController(lbl, getHub(), LineItemPP.awardCardOrder().pp, true);
        return lbl;
    }
    public JButton createAwardCardOrderCommand() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getAwardCardOrderJfc().createGotoEditButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = getAwardCardOrderJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            mscmd.addButton(cmd);
        }
        cmd = getAwardCardOrderJfc().createNewButton();
        if (cmd != null) {
            mscmd.addButton(cmd);
        ((OAButton)cmd).setVisible(getHub(), LineItemPP.awardCardOrder().pp, true);
        }
        cmd = getAwardCardOrderJfc().createSearchButton();
        if (cmd != null) {
            new EnabledController(cmd, getHub());
            cmd.setText("Search ...");
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            ((OAButton) cmd).setUpdateObject(LineItem.P_AwardCardOrder, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getAwardCardOrderHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
                ((OAButton)cmd).setVisible(getHub(), LineItemPP.awardCardOrder().pp, true);
    
        }
        return mscmd;
    }
    
    public OALabel createEmailLabel() {
        OALabel lbl = getEmailJfc().createLabel();
        new VisibleController(lbl, getHub(), LineItemPP.email().pp, true);
        return lbl;
    }
    public JButton createEmailCommand() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getEmailJfc().createGotoEditButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = getEmailJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            mscmd.addButton(cmd);
        }
        cmd = getEmailJfc().createNewButton();
        if (cmd != null) {
            mscmd.addButton(cmd);
        ((OAButton)cmd).setVisible(getHub(), LineItemPP.email().pp, true);
        }
        cmd = getEmailJfc().createSearchButton();
        if (cmd != null) {
            new EnabledController(cmd, getHub());
            cmd.setText("Search ...");
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            ((OAButton) cmd).setUpdateObject(LineItem.P_Email, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getEmailHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
                ((OAButton)cmd).setVisible(getHub(), LineItemPP.email().pp, true);
    
        }
        return mscmd;
    }
    
    public OATreeComboBox createEmployeeTreeComboBox() {
        OATreeComboBox tcbo = getEmployeeJfc().createSearchTreeComboBox();
        tcbo.setVisible(getHub(), LineItemPP.employee().pp, true);
        return tcbo;
    }
    public JButton createEmployeeCommand() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getEmployeeJfc().createGotoEditButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = getEmployeeJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            mscmd.addButton(cmd);
        }
        cmd = getEmployeeJfc().createNewButton();
        if (cmd != null) {
            mscmd.addButton(cmd);
        ((OAButton)cmd).setVisible(getHub(), LineItemPP.employee().pp, true);
        }
        cmd = getEmployeeJfc().createSearchButton();
        if (cmd != null) {
            new EnabledController(cmd, getHub());
            cmd.setText("Search ...");
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            ((OAButton) cmd).setUpdateObject(LineItem.P_Employee, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getEmployeeHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
                ((OAButton)cmd).setVisible(getHub(), LineItemPP.employee().pp, true);
    
        }
        return mscmd;
    }
    
    public OALabel createEmployeeAwardLabel() {
        OALabel lbl = getEmployeeAwardJfc().createLabel();
        new VisibleController(lbl, getHub(), LineItemPP.employeeAward().pp, true);
        return lbl;
    }
    public JButton createEmployeeAwardCommand() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getEmployeeAwardJfc().createGotoEditButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = getEmployeeAwardJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            mscmd.addButton(cmd);
        }
        cmd = getEmployeeAwardJfc().createNewButton();
        if (cmd != null) {
            mscmd.addButton(cmd);
        ((OAButton)cmd).setVisible(getHub(), LineItemPP.employeeAward().pp, true);
        }
        cmd = getEmployeeAwardJfc().createSearchButton();
        if (cmd != null) {
            new EnabledController(cmd, getHub());
            cmd.setText("Search ...");
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            ((OAButton) cmd).setUpdateObject(LineItem.P_EmployeeAward, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getEmployeeAwardHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
                ((OAButton)cmd).setVisible(getHub(), LineItemPP.employeeAward().pp, true);
    
        }
        return mscmd;
    }
    
    public OALabel createEmployeeAwardCashLabel() {
        OALabel lbl = getEmployeeAwardCashJfc().createLabel();
        new VisibleController(lbl, getHub(), LineItemPP.employeeAwardCash().pp, true);
        return lbl;
    }
    public JButton createEmployeeAwardCashCommand() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getEmployeeAwardCashJfc().createGotoEditButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = getEmployeeAwardCashJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            mscmd.addButton(cmd);
        }
        cmd = getEmployeeAwardCashJfc().createNewButton();
        if (cmd != null) {
            mscmd.addButton(cmd);
        ((OAButton)cmd).setVisible(getHub(), LineItemPP.employeeAwardCash().pp, true);
        }
        cmd = getEmployeeAwardCashJfc().createSearchButton();
        if (cmd != null) {
            new EnabledController(cmd, getHub());
            cmd.setText("Search ...");
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            ((OAButton) cmd).setUpdateObject(LineItem.P_EmployeeAwardCash, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getEmployeeAwardCashHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
                ((OAButton)cmd).setVisible(getHub(), LineItemPP.employeeAwardCash().pp, true);
    
        }
        return mscmd;
    }
    
    public OALabel createEmployeeAwardCharityLabel() {
        OALabel lbl = getEmployeeAwardCharityJfc().createLabel();
        new VisibleController(lbl, getHub(), LineItemPP.employeeAwardCharity().pp, true);
        return lbl;
    }
    public JButton createEmployeeAwardCharityCommand() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getEmployeeAwardCharityJfc().createGotoEditButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = getEmployeeAwardCharityJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            mscmd.addButton(cmd);
        }
        cmd = getEmployeeAwardCharityJfc().createNewButton();
        if (cmd != null) {
            mscmd.addButton(cmd);
        ((OAButton)cmd).setVisible(getHub(), LineItemPP.employeeAwardCharity().pp, true);
        }
        cmd = getEmployeeAwardCharityJfc().createSearchButton();
        if (cmd != null) {
            new EnabledController(cmd, getHub());
            cmd.setText("Search ...");
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            ((OAButton) cmd).setUpdateObject(LineItem.P_EmployeeAwardCharity, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getEmployeeAwardCharityHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
                ((OAButton)cmd).setVisible(getHub(), LineItemPP.employeeAwardCharity().pp, true);
    
        }
        return mscmd;
    }
    
    public OALabel createEmployeeAwardIntlVisaLabel() {
        OALabel lbl = getEmployeeAwardIntlVisaJfc().createLabel();
        new VisibleController(lbl, getHub(), LineItemPP.employeeAwardIntlVisa().pp, true);
        return lbl;
    }
    public JButton createEmployeeAwardIntlVisaCommand() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getEmployeeAwardIntlVisaJfc().createGotoEditButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = getEmployeeAwardIntlVisaJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            mscmd.addButton(cmd);
        }
        cmd = getEmployeeAwardIntlVisaJfc().createNewButton();
        if (cmd != null) {
            mscmd.addButton(cmd);
        ((OAButton)cmd).setVisible(getHub(), LineItemPP.employeeAwardIntlVisa().pp, true);
        }
        cmd = getEmployeeAwardIntlVisaJfc().createSearchButton();
        if (cmd != null) {
            new EnabledController(cmd, getHub());
            cmd.setText("Search ...");
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            ((OAButton) cmd).setUpdateObject(LineItem.P_EmployeeAwardIntlVisa, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getEmployeeAwardIntlVisaHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
                ((OAButton)cmd).setVisible(getHub(), LineItemPP.employeeAwardIntlVisa().pp, true);
    
        }
        return mscmd;
    }
    
    public OALabel createEmployeeEcardToLabel() {
        OALabel lbl = getEmployeeEcardToJfc().createLabel();
        new VisibleController(lbl, getHub(), LineItemPP.employeeEcardTo().pp, true);
        return lbl;
    }
    public JButton createEmployeeEcardToCommand() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getEmployeeEcardToJfc().createGotoEditButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = getEmployeeEcardToJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            mscmd.addButton(cmd);
        }
        cmd = getEmployeeEcardToJfc().createNewButton();
        if (cmd != null) {
            mscmd.addButton(cmd);
        ((OAButton)cmd).setVisible(getHub(), LineItemPP.employeeEcardTo().pp, true);
        }
        cmd = getEmployeeEcardToJfc().createSearchButton();
        if (cmd != null) {
            new EnabledController(cmd, getHub());
            cmd.setText("Search ...");
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            ((OAButton) cmd).setUpdateObject(LineItem.P_EmployeeEcardTo, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getEmployeeEcardToHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
                ((OAButton)cmd).setVisible(getHub(), LineItemPP.employeeEcardTo().pp, true);
    
        }
        return mscmd;
    }
    
    public OALabel createInspireOrderLabel() {
        OALabel lbl = getInspireOrderJfc().createLabel();
        new VisibleController(lbl, getHub(), LineItemPP.inspireOrder().pp, true);
        return lbl;
    }
    public JButton createInspireOrderCommand() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getInspireOrderJfc().createGotoEditButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = getInspireOrderJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            mscmd.addButton(cmd);
        }
        cmd = getInspireOrderJfc().createNewButton();
        if (cmd != null) {
            mscmd.addButton(cmd);
        ((OAButton)cmd).setVisible(getHub(), LineItemPP.inspireOrder().pp, true);
        ((OAButton)cmd).setEnabled(getHub(), OAString.cpp(LineItem.P_InspireOrder, InspireOrder.P_CompletedDate), false);
        }
        cmd = getInspireOrderJfc().createSearchButton();
        if (cmd != null) {
            new EnabledController(cmd, getHub());
            cmd.setText("Search ...");
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            ((OAButton) cmd).setUpdateObject(LineItem.P_InspireOrder, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getInspireOrderHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
                ((OAButton)cmd).setVisible(getHub(), LineItemPP.inspireOrder().pp, true);
        ((OAButton)cmd).setEnabled(getHub(), OAString.cpp(LineItem.P_InspireOrder, InspireOrder.P_CompletedDate), false);
    
        }
        return mscmd;
    }
    
    public OALabel createInspireOrderCashLabel() {
        OALabel lbl = getInspireOrderCashJfc().createLabel();
        new VisibleController(lbl, getHub(), LineItemPP.inspireOrderCash().pp, true);
        return lbl;
    }
    public JButton createInspireOrderCashCommand() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getInspireOrderCashJfc().createGotoEditButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = getInspireOrderCashJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            mscmd.addButton(cmd);
        }
        cmd = getInspireOrderCashJfc().createNewButton();
        if (cmd != null) {
            mscmd.addButton(cmd);
        ((OAButton)cmd).setVisible(getHub(), LineItemPP.inspireOrderCash().pp, true);
        ((OAButton)cmd).setEnabled(getHub(), OAString.cpp(LineItem.P_InspireOrderCash, InspireOrder.P_CompletedDate), false);
        }
        cmd = getInspireOrderCashJfc().createSearchButton();
        if (cmd != null) {
            new EnabledController(cmd, getHub());
            cmd.setText("Search ...");
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            ((OAButton) cmd).setUpdateObject(LineItem.P_InspireOrderCash, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getInspireOrderCashHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
                ((OAButton)cmd).setVisible(getHub(), LineItemPP.inspireOrderCash().pp, true);
        ((OAButton)cmd).setEnabled(getHub(), OAString.cpp(LineItem.P_InspireOrderCash, InspireOrder.P_CompletedDate), false);
    
        }
        return mscmd;
    }
    
    public OALabel createInspireOrderCharityLabel() {
        OALabel lbl = getInspireOrderCharityJfc().createLabel();
        new VisibleController(lbl, getHub(), LineItemPP.inspireOrderCharity().pp, true);
        return lbl;
    }
    public JButton createInspireOrderCharityCommand() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getInspireOrderCharityJfc().createGotoEditButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = getInspireOrderCharityJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            mscmd.addButton(cmd);
        }
        cmd = getInspireOrderCharityJfc().createNewButton();
        if (cmd != null) {
            mscmd.addButton(cmd);
        ((OAButton)cmd).setVisible(getHub(), LineItemPP.inspireOrderCharity().pp, true);
        ((OAButton)cmd).setEnabled(getHub(), OAString.cpp(LineItem.P_InspireOrderCharity, InspireOrderCharity.P_InspireOrder, InspireOrder.P_CompletedDate), false);
        }
        cmd = getInspireOrderCharityJfc().createSearchButton();
        if (cmd != null) {
            new EnabledController(cmd, getHub());
            cmd.setText("Search ...");
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            ((OAButton) cmd).setUpdateObject(LineItem.P_InspireOrderCharity, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getInspireOrderCharityHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
                ((OAButton)cmd).setVisible(getHub(), LineItemPP.inspireOrderCharity().pp, true);
        ((OAButton)cmd).setEnabled(getHub(), OAString.cpp(LineItem.P_InspireOrderCharity, InspireOrderCharity.P_InspireOrder, InspireOrder.P_CompletedDate), false);
    
        }
        return mscmd;
    }
    
    public OALabel createInspireOrderIntlVisaLabel() {
        OALabel lbl = getInspireOrderIntlVisaJfc().createLabel();
        new VisibleController(lbl, getHub(), LineItemPP.inspireOrderIntlVisa().pp, true);
        return lbl;
    }
    public JButton createInspireOrderIntlVisaCommand() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getInspireOrderIntlVisaJfc().createGotoEditButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = getInspireOrderIntlVisaJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            mscmd.addButton(cmd);
        }
        cmd = getInspireOrderIntlVisaJfc().createNewButton();
        if (cmd != null) {
            mscmd.addButton(cmd);
        ((OAButton)cmd).setVisible(getHub(), LineItemPP.inspireOrderIntlVisa().pp, true);
        ((OAButton)cmd).setEnabled(getHub(), OAString.cpp(LineItem.P_InspireOrderIntlVisa, InspireOrder.P_CompletedDate), false);
        }
        cmd = getInspireOrderIntlVisaJfc().createSearchButton();
        if (cmd != null) {
            new EnabledController(cmd, getHub());
            cmd.setText("Search ...");
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            ((OAButton) cmd).setUpdateObject(LineItem.P_InspireOrderIntlVisa, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getInspireOrderIntlVisaHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
                ((OAButton)cmd).setVisible(getHub(), LineItemPP.inspireOrderIntlVisa().pp, true);
        ((OAButton)cmd).setEnabled(getHub(), OAString.cpp(LineItem.P_InspireOrderIntlVisa, InspireOrder.P_CompletedDate), false);
    
        }
        return mscmd;
    }
    
    public OALabel createInspireOrderItemLabel() {
        OALabel lbl = getInspireOrderItemJfc().createLabel();
        new VisibleController(lbl, getHub(), LineItemPP.inspireOrderItem().pp, true);
        return lbl;
    }
    public JButton createInspireOrderItemCommand() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getInspireOrderItemJfc().createGotoEditButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = getInspireOrderItemJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            mscmd.addButton(cmd);
        }
        cmd = getInspireOrderItemJfc().createNewButton();
        if (cmd != null) {
            mscmd.addButton(cmd);
        ((OAButton)cmd).setVisible(getHub(), LineItemPP.inspireOrderItem().pp, true);
        ((OAButton)cmd).setEnabled(getHub(), OAString.cpp(LineItem.P_InspireOrderItem, InspireOrderItem.P_InspireOrder, InspireOrder.P_CompletedDate), false);
        }
        cmd = getInspireOrderItemJfc().createSearchButton();
        if (cmd != null) {
            new EnabledController(cmd, getHub());
            cmd.setText("Search ...");
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            ((OAButton) cmd).setUpdateObject(LineItem.P_InspireOrderItem, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getInspireOrderItemHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
                ((OAButton)cmd).setVisible(getHub(), LineItemPP.inspireOrderItem().pp, true);
        ((OAButton)cmd).setEnabled(getHub(), OAString.cpp(LineItem.P_InspireOrderItem, InspireOrderItem.P_InspireOrder, InspireOrder.P_CompletedDate), false);
    
        }
        return mscmd;
    }
    
    public OALabel createInspireRecipientLabel() {
        OALabel lbl = getInspireRecipientJfc().createLabel();
        new VisibleController(lbl, getHub(), LineItemPP.inspireRecipient().pp, true);
        return lbl;
    }
    public JButton createInspireRecipientCommand() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getInspireRecipientJfc().createGotoEditButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = getInspireRecipientJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            mscmd.addButton(cmd);
        }
        cmd = getInspireRecipientJfc().createNewButton();
        if (cmd != null) {
            mscmd.addButton(cmd);
        ((OAButton)cmd).setVisible(getHub(), LineItemPP.inspireRecipient().pp, true);
        }
        cmd = getInspireRecipientJfc().createSearchButton();
        if (cmd != null) {
            new EnabledController(cmd, getHub());
            cmd.setText("Search ...");
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            ((OAButton) cmd).setUpdateObject(LineItem.P_InspireRecipient, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getInspireRecipientHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
                ((OAButton)cmd).setVisible(getHub(), LineItemPP.inspireRecipient().pp, true);
    
        }
        return mscmd;
    }
    
    public OATreeComboBox createLocationTreeComboBox() {
        OATreeComboBox tcbo = getLocationJfc().createSearchTreeComboBox();
        tcbo.setVisible(getHub(), LineItemPP.location().pp, true);
        return tcbo;
    }
    public JButton createLocationCommand() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getLocationJfc().createGotoEditButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = getLocationJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            mscmd.addButton(cmd);
        }
        cmd = getLocationJfc().createNewButton();
        if (cmd != null) {
            mscmd.addButton(cmd);
        ((OAButton)cmd).setVisible(getHub(), LineItemPP.location().pp, true);
        }
        cmd = getLocationJfc().createSearchButton();
        if (cmd != null) {
            new EnabledController(cmd, getHub());
            cmd.setText("Search ...");
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            ((OAButton) cmd).setUpdateObject(LineItem.P_Location, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getLocationHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
                ((OAButton)cmd).setVisible(getHub(), LineItemPP.location().pp, true);
    
        }
        return mscmd;
    }
    
    public OALabel createPointsRecordLabel() {
        OALabel lbl = getPointsRecordJfc().createLabel();
        new VisibleController(lbl, getHub(), LineItemPP.pointsRecord().pp, true);
        return lbl;
    }
    public JButton createPointsRecordCommand() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getPointsRecordJfc().createGotoEditButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = getPointsRecordJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            mscmd.addButton(cmd);
        }
        cmd = getPointsRecordJfc().createNewButton();
        if (cmd != null) {
            mscmd.addButton(cmd);
        ((OAButton)cmd).setVisible(getHub(), LineItemPP.pointsRecord().pp, true);
        }
        cmd = getPointsRecordJfc().createSearchButton();
        if (cmd != null) {
            new EnabledController(cmd, getHub());
            cmd.setText("Search ...");
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            ((OAButton) cmd).setUpdateObject(LineItem.P_PointsRecord, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getPointsRecordHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
                ((OAButton)cmd).setVisible(getHub(), LineItemPP.pointsRecord().pp, true);
    
        }
        return mscmd;
    }
    
    public OALabel createPointsRequestLabel() {
        OALabel lbl = getPointsRequestJfc().createLabel();
        return lbl;
    }
    public JButton createPointsRequestCommand() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getPointsRequestJfc().createGotoEditButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = getPointsRequestJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            mscmd.addButton(cmd);
        }
        cmd = getPointsRequestJfc().createNewButton();
        if (cmd != null) {
            mscmd.addButton(cmd);
        }
        cmd = getPointsRequestJfc().createSearchButton();
        if (cmd != null) {
            new EnabledController(cmd, getHub());
            cmd.setText("Search ...");
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            ((OAButton) cmd).setUpdateObject(LineItem.P_PointsRequest, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getPointsRequestHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
        }
        return mscmd;
    }
    
    public OATreeComboBox createProgramTreeComboBox() {
        OATreeComboBox tcbo = getProgramJfc().createSearchTreeComboBox();
        tcbo.setVisible(getHub(), LineItemPP.program().pp, true);
        return tcbo;
    }
    public JButton createProgramCommand() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getProgramJfc().createGotoEditButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = getProgramJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            mscmd.addButton(cmd);
        }
        cmd = getProgramJfc().createNewButton();
        if (cmd != null) {
            mscmd.addButton(cmd);
        ((OAButton)cmd).setVisible(getHub(), LineItemPP.program().pp, true);
        }
        cmd = getProgramJfc().createSearchButton();
        if (cmd != null) {
            new EnabledController(cmd, getHub());
            cmd.setText("Search ...");
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            ((OAButton) cmd).setUpdateObject(LineItem.P_Program, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getProgramHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
                ((OAButton)cmd).setVisible(getHub(), LineItemPP.program().pp, true);
    
        }
        return mscmd;
    }
    
    protected void setup(JTextComponent txt) {
        OATextController tc = new OATextController(txt, Resource.getSpellChecker(), true);
        String s = txt.getToolTipText();
        if (!OAString.isEmpty(s)) s = "<html>"+s+"<br>";
        else s = "<html>";
        s += "<small><i>Right click for more options";
        txt.setToolTipText(s);
    }
    
    // Autocomplete
    public JTextField createAutoCompleteTextField() {
        return createAutoCompleteTextField(PP_Display);
    }
    public JTextField createAutoCompleteTextField(String propertyPath) {
        JTextField txt = new JTextField() {
            @Override
            public Dimension getMaximumSize() {
                return super.getPreferredSize();
            }
        };
        createAutoCompleteTextField(txt, propertyPath);
        return txt;
    }
    
    public void createAutoCompleteTextField(JTextField txtAutoComplete) {
        createAutoCompleteTextField(txtAutoComplete, PP_Display);
    }
    public void createAutoCompleteTextField(JTextField txtAutoComplete, final String properyPath) {
        txtAutoComplete.setColumns(100);
        txtAutoComplete.setToolTipText("Search for " + getModel().getDisplayName());
        
        JList jlist = new JList();
        
        AutoCompleteList autoCompleteList = new AutoCompleteList(txtAutoComplete, jlist, true) {  // true=exact match only
            ArrayList<TreeSearchItem> alList = new ArrayList<TreeSearchItem>();
            
            // data structure used for search data
            class TreeSearchItem implements Comparable {
                LineItem obj;
                String sortValue;
                int pos; // start pos
                String display;
                String text;
                public TreeSearchItem(String sortValue, String display, LineItem obj) {
                    this.sortValue = sortValue;
                    this.display = display;
                    this.obj = obj;
                }
                
                @Override
                public int compareTo(Object o) {
                    if (sortValue != null && o instanceof TreeSearchItem) {
                        return this.sortValue.compareTo( ((TreeSearchItem)o).sortValue);
                    }
                    return -1;
                }
            }
            
            private AtomicInteger aiCnt = new AtomicInteger();
            private void _search(Hub<LineItem> h, String text, final int cnt) {
                for (LineItem obj : h) {
                    String s = obj.getPropertyAsString(properyPath);
                    if (s == null || s.length() == 0) continue;
                    int pos = s.toUpperCase().indexOf(text);
                    if (cnt != aiCnt.get()) break;
                    if (pos >= 0) {
                        TreeSearchItem tsi = new TreeSearchItem(s.substring(pos).toUpperCase(), null, obj);
                        
                        tsi.pos = pos;
                        tsi.display = "<html>";
                        tsi.display += s.substring(0, pos);
                        tsi.display += "<b style='background:rgb(253,250,218)'>"+s.substring(pos, pos + text.length())+"</b>";
                        tsi.display += s.substring(pos + text.length());
                        tsi.text = s;
                        alList.add(tsi);
                        if (alList.size() == 35) break;
                    }
                }
            }
     
            @Override
            protected String[] getSearchData(String text, int offset) {
                final int cnt = aiCnt.incrementAndGet();
                alList.clear();
                
                if (offset == 0) return null;
                if (text == null || text.length() < 1) return null;
                
                if (offset < text.length()) {
                    text = text.substring(0, offset);  // cursor could be in middle of text
                }
                
                text = text.toUpperCase();
                _search(getHub(), text, cnt);
                if (cnt != aiCnt.get()) return null;
                Collections.sort(alList);
                String[] ss = new String[alList.size()];
                for (int i=0; i<ss.length; i++) {
                    TreeSearchItem tsi = alList.get(i);
                    ss[i] = tsi.display;
                }
                return ss;
            }
            @Override
            protected String getClosestMatch(String text) {
                return text;
                /*
                if (text == null || text.length() == 0) return null;
                String[] ss = getSearchData(text, text.length());
                if (s == null || ss.length == 0) return null;
                TreeSearchItem tsi = alList.get(0);
                return tsi.obj.getPropertyAsString(properyPath).substring(tsi.pos);
                */
            }
            
            @Override
            protected String getTextForSelectedValue(int pos, String value) {
                if (pos >= 0 && pos < alList.size()) {
                    TreeSearchItem tsi = alList.get(pos);
                    return tsi.obj.getPropertyAsString(properyPath);
                }
                return value;
            }
            @Override
            protected void onValueSelected(int pos, String value) {
                //System.out.println("onValueSelected => "+value+"  "+pos);
                if (pos >= 0 && pos < alList.size()) {
                    // show tree node
                    TreeSearchItem tsi = alList.get(pos);
                    getHub().setAO(tsi.obj);
                    // LineItemJfc.this.onShowEditPanel();
                    super.onValueSelected(pos, tsi.text);
                }
            }
            @Override
            protected String getToolTipText(int pos) {
                String s = null;
                if (pos >= 0) {
                    TreeSearchItem tsi = alList.get(pos);
                    s = OAString.fmt(tsi.obj.getPropertyAsString(properyPath));
                }
                return "<html>"+s;
            }
        };
        autoCompleteList.setShowOne(true);
        // base enabled on valid Hub
        new EnabledController(txtAutoComplete, getHub(), null, OAAnyValueObject.instance);
    }
    
    public AwardCardOrderJfc getAwardCardOrderJfc() {
        if (jfcAwardCardOrder != null) return jfcAwardCardOrder;
        jfcAwardCardOrder = new AwardCardOrderJfc(getModel().getAwardCardOrderModel()) {
            @Override
            protected void onNewAwardCardOrderCreated() {
                getEditDialog(LineItemJfc.this.getCardPanel()).setVisible(true);
            }
            @Override
            protected void onSearch() {
                getSearchJfc().getDialog(getCardPanel()).setVisible(true);
                if (!getSearchJfc().wasSelected()) return;
                AwardCardOrder value = getSearchJfc().getSelected();
                LineItem obj = LineItemJfc.this.getHub().getAO();
                obj.setAwardCardOrder(value);
            }
        };
        jfcAwardCardOrder.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcAwardCardOrder, this);
        return jfcAwardCardOrder;
    }
    public EmailJfc getEmailJfc() {
        if (jfcEmail != null) return jfcEmail;
        jfcEmail = new EmailJfc(getModel().getEmailModel()) {
            @Override
            protected void onNewEmailCreated() {
                getEditDialog(LineItemJfc.this.getCardPanel()).setVisible(true);
            }
            @Override
            protected void onSearch() {
                getSearchJfc().getDialog(getCardPanel()).setVisible(true);
                if (!getSearchJfc().wasSelected()) return;
                Email value = getSearchJfc().getSelected();
                LineItem obj = LineItemJfc.this.getHub().getAO();
                obj.setEmail(value);
            }
        };
        jfcEmail.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcEmail, this);
        return jfcEmail;
    }
    public EmployeeJfc getEmployeeJfc() {
        if (jfcEmployee != null) return jfcEmployee;
        jfcEmployee = new EmployeeJfc(getModel().getEmployeeModel()) {
            @Override
            protected void onNewEmployeeCreated() {
                getEditDialog(LineItemJfc.this.getCardPanel()).setVisible(true);
            }
            @Override
            protected void onSearch() {
                getSearchJfc().getDialog(getCardPanel()).setVisible(true);
                if (!getSearchJfc().wasSelected()) return;
                Employee value = getSearchJfc().getSelected();
                LineItem obj = LineItemJfc.this.getHub().getAO();
                obj.setEmployee(value);
            }
        };
        jfcEmployee.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcEmployee, this);
        return jfcEmployee;
    }
    public EmployeeAwardJfc getEmployeeAwardJfc() {
        if (jfcEmployeeAward != null) return jfcEmployeeAward;
        jfcEmployeeAward = new EmployeeAwardJfc(getModel().getEmployeeAwardModel()) {
            @Override
            protected void onNewEmployeeAwardCreated() {
                getEditDialog(LineItemJfc.this.getCardPanel()).setVisible(true);
            }
            @Override
            protected void onSearch() {
                getSearchJfc().getDialog(getCardPanel()).setVisible(true);
                if (!getSearchJfc().wasSelected()) return;
                EmployeeAward value = getSearchJfc().getSelected();
                LineItem obj = LineItemJfc.this.getHub().getAO();
                obj.setEmployeeAward(value);
            }
        };
        jfcEmployeeAward.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcEmployeeAward, this);
        return jfcEmployeeAward;
    }
    public EmployeeAwardJfc getEmployeeAwardCashJfc() {
        if (jfcEmployeeAwardCash != null) return jfcEmployeeAwardCash;
        jfcEmployeeAwardCash = new EmployeeAwardJfc(getModel().getEmployeeAwardCashModel()) {
            @Override
            protected void onNewEmployeeAwardCreated() {
                getEditDialog(LineItemJfc.this.getCardPanel()).setVisible(true);
            }
            @Override
            protected void onSearch() {
                getSearchJfc().getDialog(getCardPanel()).setVisible(true);
                if (!getSearchJfc().wasSelected()) return;
                EmployeeAward value = getSearchJfc().getSelected();
                LineItem obj = LineItemJfc.this.getHub().getAO();
                obj.setEmployeeAwardCash(value);
            }
        };
        jfcEmployeeAwardCash.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcEmployeeAwardCash, this);
        return jfcEmployeeAwardCash;
    }
    public EmployeeAwardCharityJfc getEmployeeAwardCharityJfc() {
        if (jfcEmployeeAwardCharity != null) return jfcEmployeeAwardCharity;
        jfcEmployeeAwardCharity = new EmployeeAwardCharityJfc(getModel().getEmployeeAwardCharityModel()) {
            @Override
            protected void onNewEmployeeAwardCharityCreated() {
                getEditDialog(LineItemJfc.this.getCardPanel()).setVisible(true);
            }
            @Override
            protected void onSearch() {
                getSearchJfc().getDialog(getCardPanel()).setVisible(true);
                if (!getSearchJfc().wasSelected()) return;
                EmployeeAwardCharity value = getSearchJfc().getSelected();
                LineItem obj = LineItemJfc.this.getHub().getAO();
                obj.setEmployeeAwardCharity(value);
            }
        };
        jfcEmployeeAwardCharity.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcEmployeeAwardCharity, this);
        return jfcEmployeeAwardCharity;
    }
    public EmployeeAwardJfc getEmployeeAwardIntlVisaJfc() {
        if (jfcEmployeeAwardIntlVisa != null) return jfcEmployeeAwardIntlVisa;
        jfcEmployeeAwardIntlVisa = new EmployeeAwardJfc(getModel().getEmployeeAwardIntlVisaModel()) {
            @Override
            protected void onNewEmployeeAwardCreated() {
                getEditDialog(LineItemJfc.this.getCardPanel()).setVisible(true);
            }
            @Override
            protected void onSearch() {
                getSearchJfc().getDialog(getCardPanel()).setVisible(true);
                if (!getSearchJfc().wasSelected()) return;
                EmployeeAward value = getSearchJfc().getSelected();
                LineItem obj = LineItemJfc.this.getHub().getAO();
                obj.setEmployeeAwardIntlVisa(value);
            }
        };
        jfcEmployeeAwardIntlVisa.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcEmployeeAwardIntlVisa, this);
        return jfcEmployeeAwardIntlVisa;
    }
    public EmployeeEcardToJfc getEmployeeEcardToJfc() {
        if (jfcEmployeeEcardTo != null) return jfcEmployeeEcardTo;
        jfcEmployeeEcardTo = new EmployeeEcardToJfc(getModel().getEmployeeEcardToModel()) {
            @Override
            protected void onNewEmployeeEcardToCreated() {
                getEditDialog(LineItemJfc.this.getCardPanel()).setVisible(true);
            }
            @Override
            protected void onSearch() {
                getSearchJfc().getDialog(getCardPanel()).setVisible(true);
                if (!getSearchJfc().wasSelected()) return;
                EmployeeEcardTo value = getSearchJfc().getSelected();
                LineItem obj = LineItemJfc.this.getHub().getAO();
                obj.setEmployeeEcardTo(value);
            }
        };
        jfcEmployeeEcardTo.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcEmployeeEcardTo, this);
        return jfcEmployeeEcardTo;
    }
    public InspireOrderJfc getInspireOrderJfc() {
        if (jfcInspireOrder != null) return jfcInspireOrder;
        jfcInspireOrder = new InspireOrderJfc(getModel().getInspireOrderModel()) {
            @Override
            protected void onNewInspireOrderCreated() {
                getEditDialog(LineItemJfc.this.getCardPanel()).setVisible(true);
            }
            @Override
            protected void onSearch() {
                getSearchJfc().getDialog(getCardPanel()).setVisible(true);
                if (!getSearchJfc().wasSelected()) return;
                InspireOrder value = getSearchJfc().getSelected();
                LineItem obj = LineItemJfc.this.getHub().getAO();
                obj.setInspireOrder(value);
            }
        };
        jfcInspireOrder.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcInspireOrder, this);
        return jfcInspireOrder;
    }
    public InspireOrderJfc getInspireOrderCashJfc() {
        if (jfcInspireOrderCash != null) return jfcInspireOrderCash;
        jfcInspireOrderCash = new InspireOrderJfc(getModel().getInspireOrderCashModel()) {
            @Override
            protected void onNewInspireOrderCreated() {
                getEditDialog(LineItemJfc.this.getCardPanel()).setVisible(true);
            }
            @Override
            protected void onSearch() {
                getSearchJfc().getDialog(getCardPanel()).setVisible(true);
                if (!getSearchJfc().wasSelected()) return;
                InspireOrder value = getSearchJfc().getSelected();
                LineItem obj = LineItemJfc.this.getHub().getAO();
                obj.setInspireOrderCash(value);
            }
        };
        jfcInspireOrderCash.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcInspireOrderCash, this);
        return jfcInspireOrderCash;
    }
    public InspireOrderCharityJfc getInspireOrderCharityJfc() {
        if (jfcInspireOrderCharity != null) return jfcInspireOrderCharity;
        jfcInspireOrderCharity = new InspireOrderCharityJfc(getModel().getInspireOrderCharityModel()) {
            @Override
            protected void onNewInspireOrderCharityCreated() {
                getEditDialog(LineItemJfc.this.getCardPanel()).setVisible(true);
            }
            @Override
            protected void onSearch() {
                getSearchJfc().getDialog(getCardPanel()).setVisible(true);
                if (!getSearchJfc().wasSelected()) return;
                InspireOrderCharity value = getSearchJfc().getSelected();
                LineItem obj = LineItemJfc.this.getHub().getAO();
                obj.setInspireOrderCharity(value);
            }
        };
        jfcInspireOrderCharity.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcInspireOrderCharity, this);
        return jfcInspireOrderCharity;
    }
    public InspireOrderJfc getInspireOrderIntlVisaJfc() {
        if (jfcInspireOrderIntlVisa != null) return jfcInspireOrderIntlVisa;
        jfcInspireOrderIntlVisa = new InspireOrderJfc(getModel().getInspireOrderIntlVisaModel()) {
            @Override
            protected void onNewInspireOrderCreated() {
                getEditDialog(LineItemJfc.this.getCardPanel()).setVisible(true);
            }
            @Override
            protected void onSearch() {
                getSearchJfc().getDialog(getCardPanel()).setVisible(true);
                if (!getSearchJfc().wasSelected()) return;
                InspireOrder value = getSearchJfc().getSelected();
                LineItem obj = LineItemJfc.this.getHub().getAO();
                obj.setInspireOrderIntlVisa(value);
            }
        };
        jfcInspireOrderIntlVisa.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcInspireOrderIntlVisa, this);
        return jfcInspireOrderIntlVisa;
    }
    public InspireOrderItemJfc getInspireOrderItemJfc() {
        if (jfcInspireOrderItem != null) return jfcInspireOrderItem;
        jfcInspireOrderItem = new InspireOrderItemJfc(getModel().getInspireOrderItemModel()) {
            @Override
            protected void onNewInspireOrderItemCreated() {
                getEditDialog(LineItemJfc.this.getCardPanel()).setVisible(true);
            }
            @Override
            protected void onSearch() {
                getSearchJfc().getDialog(getCardPanel()).setVisible(true);
                if (!getSearchJfc().wasSelected()) return;
                InspireOrderItem value = getSearchJfc().getSelected();
                LineItem obj = LineItemJfc.this.getHub().getAO();
                obj.setInspireOrderItem(value);
            }
        };
        jfcInspireOrderItem.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcInspireOrderItem, this);
        return jfcInspireOrderItem;
    }
    public InspireRecipientJfc getInspireRecipientJfc() {
        if (jfcInspireRecipient != null) return jfcInspireRecipient;
        jfcInspireRecipient = new InspireRecipientJfc(getModel().getInspireRecipientModel()) {
            @Override
            protected void onNewInspireRecipientCreated() {
                getEditDialog(LineItemJfc.this.getCardPanel()).setVisible(true);
            }
            @Override
            protected void onSearch() {
                getSearchJfc().getDialog(getCardPanel()).setVisible(true);
                if (!getSearchJfc().wasSelected()) return;
                InspireRecipient value = getSearchJfc().getSelected();
                LineItem obj = LineItemJfc.this.getHub().getAO();
                obj.setInspireRecipient(value);
            }
        };
        jfcInspireRecipient.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcInspireRecipient, this);
        return jfcInspireRecipient;
    }
    public LocationJfc getLocationJfc() {
        if (jfcLocation != null) return jfcLocation;
        jfcLocation = new LocationJfc(getModel().getLocationModel()) {
            @Override
            protected void onNewLocationCreated() {
                getEditDialog(LineItemJfc.this.getCardPanel()).setVisible(true);
            }
            @Override
            protected void onSearch() {
                getSearchJfc().getDialog(getCardPanel()).setVisible(true);
                if (!getSearchJfc().wasSelected()) return;
                Location value = getSearchJfc().getSelected();
                LineItem obj = LineItemJfc.this.getHub().getAO();
                obj.setLocation(value);
            }
        };
        jfcLocation.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcLocation, this);
        return jfcLocation;
    }
    public PointsRecordJfc getPointsRecordJfc() {
        if (jfcPointsRecord != null) return jfcPointsRecord;
        jfcPointsRecord = new PointsRecordJfc(getModel().getPointsRecordModel()) {
            @Override
            protected void onNewPointsRecordCreated() {
                getEditDialog(LineItemJfc.this.getCardPanel()).setVisible(true);
            }
            @Override
            protected void onSearch() {
                getSearchJfc().getDialog(getCardPanel()).setVisible(true);
                if (!getSearchJfc().wasSelected()) return;
                PointsRecord value = getSearchJfc().getSelected();
                LineItem obj = LineItemJfc.this.getHub().getAO();
                obj.setPointsRecord(value);
            }
        };
        jfcPointsRecord.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcPointsRecord, this);
        return jfcPointsRecord;
    }
    public PointsRequestJfc getPointsRequestJfc() {
        if (jfcPointsRequest != null) return jfcPointsRequest;
        jfcPointsRequest = new PointsRequestJfc(getModel().getPointsRequestModel()) {
            @Override
            protected void onNewPointsRequestCreated() {
                getEditDialog(LineItemJfc.this.getCardPanel()).setVisible(true);
            }
            @Override
            protected void onSearch() {
                getSearchJfc().getDialog(getCardPanel()).setVisible(true);
                if (!getSearchJfc().wasSelected()) return;
                PointsRequest value = getSearchJfc().getSelected();
                LineItem obj = LineItemJfc.this.getHub().getAO();
                obj.setPointsRequest(value);
            }
        };
        jfcPointsRequest.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcPointsRequest, this);
        return jfcPointsRequest;
    }
    public ProgramJfc getProgramJfc() {
        if (jfcProgram != null) return jfcProgram;
        jfcProgram = new ProgramJfc(getModel().getProgramModel()) {
            @Override
            protected void onNewProgramCreated() {
                getEditDialog(LineItemJfc.this.getCardPanel()).setVisible(true);
            }
            @Override
            protected void onSearch() {
                getSearchJfc().getDialog(getCardPanel()).setVisible(true);
                if (!getSearchJfc().wasSelected()) return;
                Program value = getSearchJfc().getSelected();
                LineItem obj = LineItemJfc.this.getHub().getAO();
                obj.setProgram(value);
            }
        };
        jfcProgram.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcProgram, this);
        return jfcProgram;
    }
    public AwardCardOrderJfc getGroupByAwardCardOrderJfc() {
        if (jfcGroupByAwardCardOrder != null) return jfcGroupByAwardCardOrder;
        jfcGroupByAwardCardOrder = new AwardCardOrderJfc(getModel().getGroupedByAwardCardOrderModel()) {
            @Override
            public JToolBar createSouthTableToolBar() {
                return null;
            }
        };
        return jfcGroupByAwardCardOrder;
    }
    public LineItemJfc getLineItemsGroupedByAwardCardOrderJfc() {
        if (jfcLineItemsGroupByAwardCardOrder != null) return jfcLineItemsGroupByAwardCardOrder;
        jfcLineItemsGroupByAwardCardOrder = new LineItemJfc(getModel().getLineItemsGroupedByAwardCardOrderModel());
        return jfcLineItemsGroupByAwardCardOrder;
    }
    public EmployeeJfc getGroupByEmployeeJfc() {
        if (jfcGroupByEmployee != null) return jfcGroupByEmployee;
        jfcGroupByEmployee = new EmployeeJfc(getModel().getGroupedByEmployeeModel()) {
            @Override
            public JToolBar createSouthTableToolBar() {
                return null;
            }
        };
        return jfcGroupByEmployee;
    }
    public LineItemJfc getLineItemsGroupedByEmployeeJfc() {
        if (jfcLineItemsGroupByEmployee != null) return jfcLineItemsGroupByEmployee;
        jfcLineItemsGroupByEmployee = new LineItemJfc(getModel().getLineItemsGroupedByEmployeeModel());
        return jfcLineItemsGroupByEmployee;
    }
    public EmployeeAwardJfc getGroupByEmployeeAwardJfc() {
        if (jfcGroupByEmployeeAward != null) return jfcGroupByEmployeeAward;
        jfcGroupByEmployeeAward = new EmployeeAwardJfc(getModel().getGroupedByEmployeeAwardModel()) {
            @Override
            public JToolBar createSouthTableToolBar() {
                return null;
            }
        };
        return jfcGroupByEmployeeAward;
    }
    public LineItemJfc getLineItemsGroupedByEmployeeAwardJfc() {
        if (jfcLineItemsGroupByEmployeeAward != null) return jfcLineItemsGroupByEmployeeAward;
        jfcLineItemsGroupByEmployeeAward = new LineItemJfc(getModel().getLineItemsGroupedByEmployeeAwardModel());
        return jfcLineItemsGroupByEmployeeAward;
    }
    public InspireOrderJfc getGroupByInspireOrderJfc() {
        if (jfcGroupByInspireOrder != null) return jfcGroupByInspireOrder;
        jfcGroupByInspireOrder = new InspireOrderJfc(getModel().getGroupedByInspireOrderModel()) {
            @Override
            public JToolBar createSouthTableToolBar() {
                return null;
            }
        };
        return jfcGroupByInspireOrder;
    }
    public LineItemJfc getLineItemsGroupedByInspireOrderJfc() {
        if (jfcLineItemsGroupByInspireOrder != null) return jfcLineItemsGroupByInspireOrder;
        jfcLineItemsGroupByInspireOrder = new LineItemJfc(getModel().getLineItemsGroupedByInspireOrderModel());
        return jfcLineItemsGroupByInspireOrder;
    }
    public LocationJfc getGroupByLocationJfc() {
        if (jfcGroupByLocation != null) return jfcGroupByLocation;
        jfcGroupByLocation = new LocationJfc(getModel().getGroupedByLocationModel()) {
            @Override
            public JToolBar createSouthTableToolBar() {
                return null;
            }
        };
        return jfcGroupByLocation;
    }
    public LineItemJfc getLineItemsGroupedByLocationJfc() {
        if (jfcLineItemsGroupByLocation != null) return jfcLineItemsGroupByLocation;
        jfcLineItemsGroupByLocation = new LineItemJfc(getModel().getLineItemsGroupedByLocationModel());
        return jfcLineItemsGroupByLocation;
    }
    public PointsRecordJfc getGroupByPointsRecordJfc() {
        if (jfcGroupByPointsRecord != null) return jfcGroupByPointsRecord;
        jfcGroupByPointsRecord = new PointsRecordJfc(getModel().getGroupedByPointsRecordModel()) {
            @Override
            public JToolBar createSouthTableToolBar() {
                return null;
            }
        };
        return jfcGroupByPointsRecord;
    }
    public LineItemJfc getLineItemsGroupedByPointsRecordJfc() {
        if (jfcLineItemsGroupByPointsRecord != null) return jfcLineItemsGroupByPointsRecord;
        jfcLineItemsGroupByPointsRecord = new LineItemJfc(getModel().getLineItemsGroupedByPointsRecordModel());
        return jfcLineItemsGroupByPointsRecord;
    }
    public ProgramJfc getGroupByProgramJfc() {
        if (jfcGroupByProgram != null) return jfcGroupByProgram;
        jfcGroupByProgram = new ProgramJfc(getModel().getGroupedByProgramModel()) {
            @Override
            public JToolBar createSouthTableToolBar() {
                return null;
            }
        };
        return jfcGroupByProgram;
    }
    public LineItemJfc getLineItemsGroupedByProgramJfc() {
        if (jfcLineItemsGroupByProgram != null) return jfcLineItemsGroupByProgram;
        jfcLineItemsGroupByProgram = new LineItemJfc(getModel().getLineItemsGroupedByProgramModel());
        return jfcLineItemsGroupByProgram;
    }
    // OnShowCommands
    public void showCardPanel(String name) {
        if (name == null) return;
        if (cardPanel == null) return;
        getCardLayout().show(getCardPanel(), name);
    }
    protected void onShowListPanel() {
        showCardPanel(CARD_List);
    }
    protected void onShowEditPanel() {
        showCardPanel(CARD_Edit);
    }
    protected void onNewLineItemCreated() {
        onShowEditPanel();
        getModel().resetTableHub(); // in case filter was being used
    }
    protected void onDoubleClickTreeNode() {
        if (getModel().getAllowGotoEdit()) {
            getEditDialog(null).setVisible(true);
        }
    }
    
    // Inner Search
    public LineItemSearchJfc getHubSearchJfc() {
        if (hubSearchJfc == null) {
            hubSearchJfc = new LineItemSearchJfc();
            hubSearchJfc.getModel().setSearchHub(getHub());
        }
        return hubSearchJfc;
    }
    protected void onHubSearch() {
        getHubSearchJfc().getDialog(getCardPanel()).setVisible(true);
        if (!getHubSearchJfc().wasSelected()) return;
        LineItem lineItem = getHubSearchJfc().getSelected();
        if (lineItem == null) return;
        getHub().setAO(lineItem);
    }
    // Search
    protected LineItemSearchJfc getSearchJfc() {
        if (searchJfc == null) {
            searchJfc = new LineItemSearchJfc();
        }
        return searchJfc;
    }
    protected void onSearch() {
        getSearchJfc().getDialog(getCardPanel()).setVisible(true);
        if (!getSearchJfc().wasSelected()) return;
        LineItem lineItem = getSearchJfc().getSelected();
    
        if (lineItem == null) return;
    
        getHub().setAO(lineItem);
        
        OATree tree = getTreeUsed();
        if (tree != null) {
            tree.setSelectedNode(lineItem);
        }
        
        onShowEditPanel();
    }
    protected void onAdd() {
        getSearchJfc().getDialog(getCardPanel()).setVisible(true);
        if (!getSearchJfc().wasSelected()) return;
        LineItem lineItem = getSearchJfc().getSelected();
        
        if (lineItem == null) return;
        
        if (!getHub().contains(lineItem)) {
            getHub().add(lineItem);
        }
        getHub().setAO(lineItem);
    }
    
    
    public OAMultiButtonSplitButton createTableButton() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(true);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        
        JButton cmd = createUnFilterButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = createIsBillableFilterButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = createIsMoreThanZeroFilterButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = createGroupByAwardCardOrderButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = createGroupByEmployeeButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = createGroupByEmployeeAwardButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = createGroupByInspireOrderButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = createGroupByLocationButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = createGroupByPointsRecordButton();
        if (cmd != null) mscmd.addButton(cmd);
        cmd = createGroupByProgramButton();
        if (cmd != null) mscmd.addButton(cmd);
        if (mscmd.getButtonCount() < 2) return null;
        mscmd.setBorderPainted(true);
        return mscmd;
    }
    public JButton createUnFilterButton() {
        JButton cmd = new JButton("show all");
        cmd.setFont(cmd.getFont().deriveFont(Font.ITALIC)); 
        cmd.setToolTipText("show default list, without grouping or filtering"); 
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                LineItemJfc.this.getModel().resetTableHub();
                if (cardLayoutTable != null) {
                    cardLayoutTable.show(cardPanelTable, "Default");
                }
            }
        });
        OAButton.setup(cmd);
        return cmd;
    }
    public JButton createIsBillableFilterButton() {
        final JButton cmd = new JButton("Is Billable");
        cmd.setIcon(Resource.getJarIcon(Resource.getValue(Resource.IMG_Filter)));
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Hub h = getModel().getIsBillableLineItemsModel().getHub();
                getModel().getTableHub().setSharedHub(h, true);
                if (cardLayoutTable != null) {
                    cardLayoutTable.show(cardPanelTable, "Flat");
                }
            }
        });
        OAButton.setup(cmd);
        return cmd;
    }
    public JButton createIsMoreThanZeroFilterButton() {
        final JButton cmd = new JButton("Is More Than Zero");
        cmd.setIcon(Resource.getJarIcon(Resource.getValue(Resource.IMG_Filter)));
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Hub h = getModel().getIsMoreThanZeroLineItemsModel().getHub();
                getModel().getTableHub().setSharedHub(h, true);
                if (cardLayoutTable != null) {
                    cardLayoutTable.show(cardPanelTable, "Flat");
                }
            }
        });
        OAButton.setup(cmd);
        return cmd;
    }
    public JButton createGroupByAwardCardOrderButton() {
        if (AwardCardOrder.class.equals(getHub().getMasterClass())) return null;
        JButton cmd = new JButton("Grouped by Award Card Order");
        cmd.setIcon(Resource.getJarIcon(Resource.getValue(Resource.IMG_GroupBy)));
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cardLayoutTable.show(cardPanelTable, "GroupByAwardCardOrder");
            }
        });
        OAButton.setup(cmd);
        return cmd;
    }
    public JButton createGroupByEmployeeButton() {
        if (Employee.class.equals(getHub().getMasterClass())) return null;
        JButton cmd = new JButton("Grouped by Employee");
        cmd.setIcon(Resource.getJarIcon(Resource.getValue(Resource.IMG_GroupBy)));
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cardLayoutTable.show(cardPanelTable, "GroupByEmployee");
            }
        });
        OAButton.setup(cmd);
        return cmd;
    }
    public JButton createGroupByEmployeeAwardButton() {
        if (EmployeeAward.class.equals(getHub().getMasterClass())) return null;
        JButton cmd = new JButton("Grouped by Employee Award");
        cmd.setIcon(Resource.getJarIcon(Resource.getValue(Resource.IMG_GroupBy)));
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cardLayoutTable.show(cardPanelTable, "GroupByEmployeeAward");
            }
        });
        OAButton.setup(cmd);
        return cmd;
    }
    public JButton createGroupByInspireOrderButton() {
        if (InspireOrder.class.equals(getHub().getMasterClass())) return null;
        JButton cmd = new JButton("Grouped by Inspire Order");
        cmd.setIcon(Resource.getJarIcon(Resource.getValue(Resource.IMG_GroupBy)));
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cardLayoutTable.show(cardPanelTable, "GroupByInspireOrder");
            }
        });
        OAButton.setup(cmd);
        return cmd;
    }
    public JButton createGroupByLocationButton() {
        if (Location.class.equals(getHub().getMasterClass())) return null;
        JButton cmd = new JButton("Grouped by Location");
        cmd.setIcon(Resource.getJarIcon(Resource.getValue(Resource.IMG_GroupBy)));
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cardLayoutTable.show(cardPanelTable, "GroupByLocation");
            }
        });
        OAButton.setup(cmd);
        return cmd;
    }
    public JButton createGroupByPointsRecordButton() {
        if (PointsRecord.class.equals(getHub().getMasterClass())) return null;
        JButton cmd = new JButton("Grouped by Points Record");
        cmd.setIcon(Resource.getJarIcon(Resource.getValue(Resource.IMG_GroupBy)));
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cardLayoutTable.show(cardPanelTable, "GroupByPointsRecord");
            }
        });
        OAButton.setup(cmd);
        return cmd;
    }
    public JButton createGroupByProgramButton() {
        if (Program.class.equals(getHub().getMasterClass())) return null;
        JButton cmd = new JButton("Grouped by Program");
        cmd.setIcon(Resource.getJarIcon(Resource.getValue(Resource.IMG_GroupBy)));
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cardLayoutTable.show(cardPanelTable, "GroupByProgram");
            }
        });
        OAButton.setup(cmd);
        return cmd;
    }
    
    public static void main(String[] args) {
        User user = new User();
        user.setAdmin(true);
        ModelDelegate.setLoginUser(user);
        TestDelegate td = new TestDelegate();
        td.createSampleData(null);
        
        LineItemJfc ui = new LineItemJfc() {
            @Override
            protected LineItemSearchJfc getSearchJfc() {
                if (this.searchJfc == null) {
                    this.searchJfc = new LineItemSearchJfc(false) {
                        protected void onSearch() {
                            super.onSearch();
                            afterSearchCustom();
                        }
                    };
                }
                return this.searchJfc;
            }
            private void afterSearchCustom() {
                getHub().setSharedHub(getSearchJfc().getHub());
            }
        };
        ui.getModel().setAllowNew(true);
        ui.getModel().setAllowDelete(true);
        
        JFrame frm = new JFrame();
        JfcDelegate.setMainWindow(frm);
        frm.setTitle(ui.getModel().getDisplayName());
        frm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = new JMenu(ui.getModel().getDisplayNamePlural());
        menu.add(ui.createNewMenuItem());
        menu.addSeparator();
        menu.add(ui.createDeleteMenuItem());
        menuBar.add(menu);
        
        frm.setJMenuBar(menuBar);
        
        OATree tree = new OATree(15, 17);
        tree.setAllowDnD(true);
        
        OATreeNode tn = ui.getTreeTitleNode();
        tree.add(tn);
        tn.add(ui.getTreeNode());
        
        String cmd = "esc";
        tree.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0 ,false), cmd);
        tree.getActionMap().put(cmd, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
        
        frm.setLayout(new BorderLayout());
        /*
        JToolBar toolBar = new JToolBar();
        toolBar.setBorderPainted(false);
        toolBar.setFloatable(true);
        toolBar.setRollover(true);
        
        OACheckBox chk = new OACheckBox(ModelDelegate.getUserAccessHub(), UserAccess.P_IsAdmin);
        chk.setText("Admin access");
        toolBar.add(chk);
        */
        JToolBar toolBar = ui.createNorthTableSearchToolBar();
        if (toolBar != null) frm.add(new OAScroller(toolBar), BorderLayout.NORTH);
        
        // ui.getTablePanel().add(new OAScroller(ui.createToolBar(true)), BorderLayout.NORTH);
        // frm.add(ui.getTablePanel(), BorderLayout.SOUTH);
        
        JPanel pan = new JPanel(new BorderLayout());
        // pan.add(ui.createTitlePanel(), BorderLayout.NORTH);
        pan.add(ui.getCardPanel());
        
        JSplitPane sp = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, new JScrollPane(tree), pan);
        sp.setOneTouchExpandable(true);
        sp.setDividerSize(6);
        int w = OATable.getCharWidth(tree, 20);
        sp.setDividerLocation(w);
    
        /*
        sp = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, sp, new JScrollPane(ui.createList()));
        sp.setOneTouchExpandable(true);
        sp.setDividerSize(6);
        sp.setResizeWeight(.90);
        */
        frm.add(sp, BorderLayout.CENTER);
        
        frm.pack();
        Dimension d = frm.getSize();
        Dimension dimScreen = Toolkit.getDefaultToolkit().getScreenSize();
        d.width = Math.min(d.width, dimScreen.width - 80);
        d.height = Math.min(d.height, dimScreen.height - 80);
        frm.setSize(d);
        
        frm.setLocation(new Point(40, 40));
        frm.setVisible(true);
    }
}

