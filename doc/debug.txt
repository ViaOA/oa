// Generated by OABuilder 

package com.tmgsc.hifive.view.oa;

import java.awt.*;
import java.awt.event.*;
import java.awt.Dialog.*;
import java.lang.ref.WeakReference;
import java.util.*;
import java.util.logging.*;
import java.util.concurrent.atomic.AtomicInteger;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.text.*;
import javax.swing.event.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.jfc.*;
import com.viaoa.jfc.control.*;
import com.viaoa.jfc.table.*;
import com.viaoa.jfc.text.*;
import com.viaoa.jfc.text.autocomplete.*;
import com.viaoa.jfc.image.*;
import com.viaoa.jfc.editor.html.OAHTMLTextPane;
import com.viaoa.util.*;

import com.tmgsc.hifive.model.*;
import com.tmgsc.hifive.model.method.*;
import com.tmgsc.hifive.model.search.*;
import com.tmgsc.hifive.model.oa.*;
import com.tmgsc.hifive.model.oa.propertypath.*;
import com.tmgsc.hifive.model.oa.method.*;
import com.tmgsc.hifive.model.oa.custom.*;
import com.tmgsc.hifive.delegate.*;
import com.tmgsc.hifive.delegate.oa.*;
import com.tmgsc.hifive.resource.Resource;
import com.tmgsc.hifive.view.*;

public class EcardJfc implements OAModelJfcInterface {
    private static Logger LOG = Logger.getLogger(EcardJfc.class.getName());
    
    public static final String PP_Display    = OAString.cpp(Ecard.P_Name);
    public static final String PP_Icon       = null;
    public static final String PP_Image      = null;
    public static final String PP_ForeColor  = null;
    public static final String PP_BackColor  = null;
    public static final String PP_Font       = null;
    // Hub
    protected Hub<Ecard> hub;   // This is the Hub used for binding.
    protected EcardModel model;
    
    // Tree
    protected OATreeNode lastTreeNode;  // used by getTreeUsed()
    protected OATreeTitleNode titleNode;
    protected OATreeNode node;
    
    // ComboBox
    protected OAComboBox cbo;
    protected OATableComboBox cboTable;
    
    // List
    protected OAList lst;
    
    // edit dialog
    private WeakReference<JDialog> wrEditDialog;
    
    // Card Panel
    public static final String CARD_List = "list";
    public static final String CARD_Edit = "edit";
    protected JPanel cardPanel;
    protected CardLayout cardLayout;
    protected JTabbedPane tabbedPane;
    protected HashMap<Integer, JDialog> hmReportDialog;
    
    
    // Search
    protected EcardSearchJfc searchJfc;
    // Inner Search
    protected EcardSearchJfc searchHubJfc;
    
    // Filters
    
    // focus components
    protected OADateComboBox dcboCreated;
    protected OADateComboBox tableDcboCreated;
    protected EcardCategoryJfc jfcEcardCategory;
    protected ImageStoreJfc jfcImageStore;
    
    public EcardJfc() {
        this.model = new EcardModel();
        OAModelJfcUtil.register(this);
    }
    
    public EcardJfc(Hub<Ecard> hubEcard) {
        this.model = new EcardModel(hubEcard);
        OAModelJfcUtil.register(this);
    }
    public EcardJfc(EcardModel modelEcard) {
        this.model = modelEcard;
        OAModelJfcUtil.register(this);
    }
    
    // Hub
    public Hub<Ecard> getHub() {
        if (hub == null) {
            hub = model.getHub();
        }
        return hub;
    }
    
    private int level;
    public int getLevel() {
        return this.level;
    }
    public void setLevel(int level) {
        this.level = level;
    }
    
    
    // Model
    public EcardModel getModel() {
        if (model == null) {
            model = new EcardModel(getHub());
            model.setAllowHubSearch(true);
        }
        return model;
    }
    
    
    
    // Images
    public static Icon getIcon() {
        return Resource.getJarIcon("ecard.gif");
    }
    public static Icon getTitleIcon() {
        return Resource.getJarIcon("ecards.gif");
    }
    
    // Tree
    public OATree getTreeUsed() {
        if (lastTreeNode != null) return lastTreeNode.getTree();
        return null;
    }
    protected void setLastTreeNode(OATreeNode tn) {
        if (lastTreeNode == null || lastTreeNode.getTree() == null) {
            lastTreeNode = tn;
        }
    }
    public OATreeTitleNode getTreeTitleNode() {
        if (titleNode == null) {
            titleNode = createTreeTitleNode();
        }
        return titleNode;
    }
    
    public OATreeTitleNode createTreeTitleNode() {
        OATreeTitleNode treeTitleNode = new OATreeTitleNode(getModel().getDisplayNamePlural()) {
            @Override
            public void objectSelected(Object obj) {
                super.objectSelected(obj);
                onShowListPanel();
            }
            JLabel lbl;
            @Override
            public Component getTreeCellRendererComponent(Component comp,
                JTree tree, Object value, boolean selected,
                boolean expanded, boolean leaf, int row, boolean hasFocus)
            {
                comp = super.getTreeCellRendererComponent(comp, tree, value, selected, expanded, leaf, row, hasFocus);
                if (lbl == null) {
                    if (comp instanceof JLabel) lbl = (JLabel) comp;
                }
                if (lbl != null) lbl.setFont(lbl.getFont().deriveFont(Font.BOLD|Font.ITALIC));
                return comp;
            }
        };
        treeTitleNode.setCountHub(getHub());
        treeTitleNode.setIcon(getTitleIcon());
        treeTitleNode.setPopupMenu(createTreeTitleNodePopupMenu(treeTitleNode));
        treeTitleNode.setMaxImageHeight(20);
        treeTitleNode.setMaxImageWidth(32);
        setLastTreeNode(treeTitleNode);
        return treeTitleNode;
     }
    
    public JPopupMenu createTreeTitleNodePopupMenu(OATreeNode tn) {
        JPopupMenu menu = new JPopupMenu();
    
        JMenuItem miSearch = createSearchMenuItem();
        if (miSearch != null) menu.add(miSearch);
        JMenuItem miNew = createNewMenuItem();
        if (miNew != null) menu.add(miNew);
    
    
        if (miSearch != null || miNew != null) menu.addSeparator();
        JMenuItem miPaste = createPasteMenuItem();
        if (miPaste != null) {
            menu.add(miPaste);
            menu.addSeparator();
        }
    
        menu.add(createCollapseOthersMenuItem(tn));
        return menu;
    }
    
    public OAMenuItem createAddMenuItem() {
        if (!getModel().getAllowAdd() && !getModel().getAllowAutoCreate()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAButton.ADD_MANUAL) {
            @Override
            public boolean onActionPerformed() {
                EcardJfc.this.onAdd();
                return true;
            }
        };
        mi.setText("Add a "+getModel().getDisplayName());
        mi.setToolTipText("Add a "+getModel().getDisplayName());
        return mi;
    }
    
    public OAMenuItem createNewMenuItem() {
        return createNewMenuItem(getHub());
    }
    public OAMenuItem createNewMenuItem(Hub<Ecard> hub) {
        if (!getModel().getAllowNew()) return null;
        OAMenuItem mi = new OAMenuItem(hub, OAMenuItem.NEW) {
            @Override
            public void afterActionPerformed() {
                // EcardJfc.this.getEditDialog(this).setVisible(true);
                EcardJfc.this.onNewEcardCreated();
                super.afterActionPerformed();
            }
        };
        mi.setMnemonic(KeyEvent.VK_N);
        mi.setText("Create a new "+getModel().getDisplayName());
        mi.setToolTipText("Create a new "+getModel().getDisplayName());
        mi.setFocusComponent(dcboCreated);
        return mi;
    }
    
    public JMenuItem createCollapseOthersMenuItem(final OATreeNode tn) {
        JMenuItem mi = new JMenuItem();
        mi.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                OATree t = tn.getTree();
                if (t != null) {
                    t.expandOnlySelectedTreeNode();
                }
            }
        });
        mi.setMnemonic(KeyEvent.VK_C);
        mi.setText("Collapse others");
        mi.setToolTipText("Collapse other tree nodes");
        return mi;
    }
    public OATreeNode getTreeNode() {
        if (node != null) return node;
        node = createTreeNode(null, null, true);
        if (getModel().getAllowMultiSelect()) {
            node.setSelectedHub(getModel().getMultiSelectHub());
        }
        return node;
    }
    public OATreeNode createTreeNode(String leadingPropertyPath, Hub<Ecard> hubRoot, boolean bIncludeChildren, OATreeNode ... parentNodes) {
        if (hubRoot == null && OAString.isEmpty(leadingPropertyPath)) hubRoot = getHub();
        OATreeNode node = new OATreeNode(OAString.cpp(leadingPropertyPath, Ecard.P_Name), hubRoot, getHub()) {
            @Override
            public void objectSelected(Object obj) {
                super.objectSelected(obj);
                EcardJfc.this.onShowEditPanel();
            }
            @Override
            public void onDoubleClick(Object obj, MouseEvent e) {
                EcardJfc.this.onDoubleClickTreeNode();
            }
            @Override
            public JPopupMenu getPopupMenu() {
                JPopupMenu pm = super.getPopupMenu();
                if (pm == null) {
                    pm = createTreeNodePopupMenu(this);
                    setPopupMenu(pm);
                }
                return pm;
            }
        };
        node.setIcon(getIcon());
        node.setForegroundColorProperty(PP_ForeColor);
        node.setBackgroundColorProperty(PP_BackColor);
        node.setImageProperty(PP_Icon);
        node.setAllowDnD(true);
        node.setAllowDrop(true);
        node.setAllowDrag(true);
        node.setFontProperty(PP_Font);
        node.setSuffix(null);
        node.setMaxImageHeight(20);
        node.setMaxImageWidth(32);
        setLastTreeNode(node);
    
        if (!bIncludeChildren) {
            return node;
        }
     
        OATreeNode[] nodes = (OATreeNode[]) OAArray.add(OATreeNode.class, parentNodes, node);
     
        return node;
    }
    protected OATreeNode findNode(String propertyPath, OATreeNode ... parentNodes) {
        if (propertyPath == null) return null;
        for (OATreeNode tn : parentNodes) {
            if (tn.getHub() != null) continue;
            String pp = tn.getPropertyPath();
            if (pp == null) continue;
            if (pp.toLowerCase().startsWith(propertyPath.toLowerCase()+".")) return tn;
        }
        return null;
    }
    
    public JPopupMenu createTreeNodePopupMenu(OATreeNode tn) {
        JPopupMenu menu = new JPopupMenu();
    
        JMenuItem miSearch = createSearchMenuItem();
        if (miSearch != null) menu.add(miSearch);
        JMenuItem miNew = createNewMenuItem();
        if (miNew != null) menu.add(createNewMenuItem());
        if (miSearch != null || miNew != null) menu.addSeparator();
    
    
        JMenuItem miRemove = createRemoveMenuItem();
        if (miRemove != null) menu.add(miRemove);
        JMenuItem miDelete = createDeleteMenuItem();
        if (miDelete != null) menu.add(miDelete);
    
        if (miRemove != null || miDelete != null) menu.addSeparator();
        JMenuItem miCut = createCutMenuItem();
    
        if (miCut != null) menu.add(miCut);
        JMenuItem miCopy = createCopyMenuItem();
        if (miCopy != null) menu.add(miCopy);
        JMenuItem miPaste = createPasteMenuItem();
        if (miPaste != null) menu.add(miPaste);
    
        if (miCut != null || miCopy != null || miPaste != null) menu.addSeparator();
    
        JMenuItem miCollapse = createCollapseOthersMenuItem(tn);
        if (miCollapse != null) menu.add(miCollapse);
    
        return menu;
    }
    
    public JMenuItem createSearchMenuItem() {
        if (!getModel().getAllowSearch()) return null;
        JMenuItem mi = new JMenuItem(getModel().getDisplayName() + " search ...", Resource.getJarIcon("search.gif"));
        mi.setMnemonic(KeyEvent.VK_S);
        mi.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                EcardJfc.this.onSearch();
           }
        });
        return mi;
    }
    public JMenuItem createHubSearchMenuItem() {
        if (!getModel().getAllowHubSearch()) return null;
        JMenuItem mi = new JMenuItem(getModel().getDisplayName() + " table search ...", Resource.getJarIcon("hubsearch16.png"));
        mi.setMnemonic(KeyEvent.VK_I);
        mi.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                EcardJfc.this.onHubSearch();
           }
        });
        return mi;
    }
    public OAMenuItem createCutMenuItem() {
        if (!getModel().getAllowCut()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAMenuItem.CUT);
        mi.setText("Cut "+getModel().getDisplayName());
        return mi;
    }
    public OAMenuItem createCopyMenuItem() {
        if (!getModel().getAllowCopy()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAMenuItem.COPY);
        mi.setText("Copy "+getModel().getDisplayName());
        mi.setToolTipText("Create a copy of "+getModel().getDisplayName());
        return mi;
    }
    public OAMenuItem createPasteMenuItem() {
        if (!getModel().getAllowPaste()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAMenuItem.PASTE);
        mi.setText("Paste "+getModel().getDisplayName());
        mi.setToolTipText("Paste "+getModel().getDisplayName());
        return mi;
    }
    public OAMenuItem createDeleteMenuItem() {
        if (!getModel().getAllowDelete()) return null;
        OAMenuItem miDelete = new OAMenuItem(getHub(), OAMenuItem.DELETE);
        miDelete.setText("Delete "+getModel().getDisplayName()+" ...");
        miDelete.setConfirmMessage("OK to Delete this "+getModel().getDisplayName()+" from system?");
        miDelete.setMnemonic(KeyEvent.VK_D);
        miDelete.setUseSwingWorker(true);
        miDelete.setProcessingText("Processing ...", "Please wait while deleting Client");
        // miDelete.setToolTipText("Delete "+getModel().getDisplayName()+" from system, must be an Admin to do this.");
        return miDelete;
    }
    public OAMenuItem createRemoveMenuItem() {
        if (!getModel().getAllowRemove()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAMenuItem.REMOVE);
        mi.setText("Remove "+getModel().getDisplayName()+" ...");
        mi.setToolTipText("remove "+getModel().getDisplayName()+" from the list");
        mi.setMnemonic(KeyEvent.VK_R);
        return mi;
    }
    
    // Label
    public OALabel createLabel() {
        OALabel lbl = new OALabel(getHub(), OAString.cpp(Ecard.P_Name), 20) {
            @Override
            public void customizeTableRenderer(JLabel lbl, JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column, boolean wasChanged, boolean wasMouseOver) {
                EcardJfc.this.customizeTableRenderer(lbl, table, value, isSelected, hasFocus, row, column, wasChanged, wasMouseOver);
            }
            @Override
            public String getToolTipText(int row, int col, String defaultValue) {
                return EcardJfc.this.getToolTipText(row, col, defaultValue);
            }
        };
        lbl.setIconColorProperty(PP_BackColor);
        lbl.setImageProperty(PP_Icon);
        lbl.setFormat(null);
        lbl.setMaxImageHeight(20);
        lbl.setMaxImageWidth(32);
        return lbl;
    }
    // used for Label, ComboBox
    protected void customizeTableRenderer(JLabel lbl, JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column, boolean wasChanged, boolean wasMouseOver) {
    }
    protected String getToolTipText(int row, int col, String defaultValue) {
        return defaultValue;
    }
    
    // ComboBox
    public OAComboBox getComboBox() {
        if (cbo == null) {
            cbo = createComboBox();
        }
        return cbo;
    }
    
    public OAComboBox createComboBox() {
        OAComboBox cbo = new OAComboBox(getHub(), OAString.cpp(Ecard.P_Name), 20) {
            @Override
            public void customizeTableRenderer(JLabel lbl, JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column, boolean wasChanged, boolean wasMouseOver) {
                EcardJfc.this.customizeTableRenderer(lbl, table, value, isSelected, hasFocus, row, column, wasChanged, wasMouseOver );
            }
            @Override
            public String getToolTipText(int row, int col, String defaultValue) {
                return EcardJfc.this.getToolTipText(row, col, defaultValue);
            }
        };
    
        cbo.setPopupColumns(31);
        cbo.setMaximumRowCount(15);
        cbo.setIconColorProperty(PP_BackColor);
        cbo.setImageProperty(PP_Icon);
        cbo.setFormat(null);
        cbo.setNullDescription("<html><i style='color:gray'>select</i></html>]");
        cbo.setMaxImageHeight(20);
        cbo.setMaxImageWidth(32);
        return cbo;
    }
    
    public OATableComboBox getTableComboBox() {
        if (cboTable == null) {
            cboTable = createTableComboBox();
        }
        return cboTable;
    }
    public OATableComboBox createTableComboBox() {
        OATable table = new OATable(getHub());
        table.setAllowDnD(false);
        table.setAllowSorting(false);
        table.addCounterColumn();
        getSearchJfc().createTableColumns(table);
        table.setPreferredSize(11, 3, true);
        table.resizeColumnsToFitHeading();
        
        OATableComboBox cboTable = new OATableComboBox(table, getHub(), PP_Display) {
            @Override
            public void onClear() {
                getHub().setAO(null);
            }
        };
        cboTable.allowClearButton(true);
        cboTable.setColumns(25);
        return cboTable;
    }
    
    
    // List
    public OAList getList() {
        if (lst == null) {
            lst = createList();
        }
        return lst;
    }
    public OAList createList() {
        OAList lst = new OAList(getHub(), OAString.cpp(Ecard.P_Name), 12, 33);
        lst.setAllowDnD(true);
        lst.setAllowRemove(true);
        lst.setAllowDelete(false);
        lst.setAllowInsert(false);
        lst.setImageProperty(null);
        lst.setMaxImageHeight(20);
        lst.setMaxImageWidth(32);
        lst.setConfirmMessage("Ok to remove "+getModel().getDisplayName());
        lst.setIconColorProperty(null);
        lst.setBackgroundColorProperty(null);
        lst.setDoubleClickButton(null);
        // lst.setSelectionHub(getSelectClients());
        lst.setBorder(new EmptyBorder(3,3,1,1));
        
        return lst;
    }
    
    // comboBoxTree
    public OATreeComboBox createSearchTreeComboBox() {
        OATreeComboBox cbo = new OATreeComboBox(createSearchTree(), getHub(), PP_Display);
        cbo.setColumns(25);
        return cbo;
    }
    public OATree createSearchTree() {
        OATree tree = new OATree();
        tree.setPreferredSize(10, 29);
        OATreeTitleNode tnode;
        OATreeNode node, node2;
    
        tnode = new OATreeTitleNode(getModel().getDisplayNamePlural());
        tnode.setIcon(EcardJfc.getTitleIcon());
        tree.add(tnode);
        node = new OATreeNode(EcardJfc.PP_Display, ModelDelegate.getEcards().createSharedHub(), getHub()) {
            @Override
            public void onDoubleClick(Object obj, MouseEvent e) {
                EcardJfc.this.onDoubleClickTreeNode();
            }
        };
        node.setIcon(EcardJfc.getIcon());
        node.setForegroundColorProperty(EcardJfc.PP_ForeColor);
        node.setBackgroundColorProperty(EcardJfc.PP_BackColor);
        node.setImageProperty(EcardJfc.PP_Icon);
        node.setFontProperty(EcardJfc.PP_Font);
        node.setMaxImageHeight(20);
        node.setMaxImageWidth(32);
        tnode.add(node);
        // Company.programs.ecards
        tnode = new OATreeTitleNode("Companies");
        tnode.setIcon(CompanyJfc.getTitleIcon());
        tree.add(tnode);
        node = new OATreeNode(CompanyJfc.PP_Display, ModelDelegate.getCompanies().createSharedHub());
        node.setIcon(CompanyJfc.getIcon());
        node.setForegroundColorProperty(CompanyJfc.PP_ForeColor);
        node.setBackgroundColorProperty(CompanyJfc.PP_BackColor);
        node.setImageProperty(CompanyJfc.PP_Icon);
        node.setFontProperty(CompanyJfc.PP_Font);
        node.setMaxImageHeight(20);
        node.setMaxImageWidth(32);
        tnode.add(node);
        node2 = new OATreeNode(OAString.cpp(Company.P_Programs, ProgramJfc.PP_Display));
        node2.setIcon(ProgramJfc.getIcon());
        node2.setForegroundColorProperty(ProgramJfc.PP_ForeColor);
        node2.setBackgroundColorProperty(ProgramJfc.PP_BackColor);
        node2.setImageProperty(ProgramJfc.PP_Icon);
        node2.setFontProperty(ProgramJfc.PP_Font);
        node2.setMaxImageHeight(20);
        node2.setMaxImageWidth(32);
        node.add(node2);
        node = node2;
        node2 = new OATreeNode(OAString.cpp(Program.P_Ecards, PP_Display), getHub());
        node2.setIcon(getIcon());
        node2.setForegroundColorProperty(PP_ForeColor);
        node2.setBackgroundColorProperty(PP_BackColor);
        node2.setImageProperty(PP_Icon);
        node2.setFontProperty(PP_Font);
        node2.setMaxImageHeight(20);
        node2.setMaxImageWidth(32);
        node.add(node2);
        // EcardCategory.ecards
        tnode = new OATreeTitleNode("Ecard Categories");
        tnode.setIcon(EcardCategoryJfc.getTitleIcon());
        tree.add(tnode);
        node = new OATreeNode(EcardCategoryJfc.PP_Display, ModelDelegate.getEcardCategories().createSharedHub());
        node.setIcon(EcardCategoryJfc.getIcon());
        node.setForegroundColorProperty(EcardCategoryJfc.PP_ForeColor);
        node.setBackgroundColorProperty(EcardCategoryJfc.PP_BackColor);
        node.setImageProperty(EcardCategoryJfc.PP_Icon);
        node.setFontProperty(EcardCategoryJfc.PP_Font);
        node.setMaxImageHeight(20);
        node.setMaxImageWidth(32);
        tnode.add(node);
        node2 = new OATreeNode(OAString.cpp(EcardCategory.P_Ecards, PP_Display), getHub());
        node2.setIcon(getIcon());
        node2.setForegroundColorProperty(PP_ForeColor);
        node2.setBackgroundColorProperty(PP_BackColor);
        node2.setImageProperty(PP_Icon);
        node2.setFontProperty(PP_Font);
        node2.setMaxImageHeight(20);
        node2.setMaxImageWidth(32);
        node.add(node2);
        return tree;
    }
    
    
    // Table
    public JPanel createTablePanel() {
        return createTablePanel(true, true);
    }
    public JPanel createTablePanel(boolean bIncludeNorthToolbar, boolean bIncludeSouthToolbar) {
        OATable table = createTable();
        // table.setSelectHub(getModel().getMultiSelectHub());
        table.setComponentPopupMenu(createTablePopupMenu());
    
        OATableScrollPane tableScrollPane = createTableScrollPane(table);
        tableScrollPane.setBorder(new TitledBorder(""));
        JPanel pan = new JPanel(new BorderLayout());
        pan.add(tableScrollPane, BorderLayout.CENTER);
        
        if (bIncludeNorthToolbar) {
            JToolBar toolBar = createNorthTableFindToolBar();
            if (toolBar != null) pan.add(new OAScroller(toolBar), BorderLayout.NORTH);
        }
        if (bIncludeSouthToolbar) {
            JToolBar toolBar = createSouthTableToolBar();
            if (toolBar != null) pan.add(new OAScroller(toolBar), BorderLayout.SOUTH);
        }
        return pan;
    }
    public JPanel createReadOnlyTablePanel() {
        OATable table = createReadOnlyTable();
        // table.setSelectHub(getModel().getMultiSelectHub());
        table.setComponentPopupMenu(createTablePopupMenu());
    
        OATableScrollPane tableScrollPane = createTableScrollPane(table);
        tableScrollPane.setBorder(new TitledBorder(""));
        JPanel pan = new JPanel(new BorderLayout());
        pan.add(tableScrollPane, BorderLayout.CENTER);
        
        JToolBar toolBar = createSouthTableToolBar();
        if (toolBar != null) pan.add(new OAScroller(toolBar), BorderLayout.SOUTH);
        
        return pan;
    }
    public JPanel createCombinedPanel() {
        return createCombinedPanel(false); 
    }
    public JPanel createCombinedPanel(final boolean bUseList) {
        JTabbedPane tp;
        Dimension d = new Dimension(5,5);
        if (this.tabbedPane == null) tp = getTabbedPane();
        else tp = createTabbedPane();
        tp.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
        if (this.tabbedPane == null) tp = getTabbedPane();
        final JComponent comp = createEditPanel(tp, false);
        comp.setMinimumSize(d);
        JSplitPane splitPane = new JSplitPane(bUseList ? JSplitPane.HORIZONTAL_SPLIT : JSplitPane.VERTICAL_SPLIT,
                bUseList ? new JScrollPane(createList()) : createTableScrollPane(createTable()), 
                comp
        ) {
            @Override
            public void addNotify() {
                super.addNotify();
                Dimension d = getSize();
                Dimension d2 = comp.getPreferredSize();
                if (!bUseList && d2.height > d.height) {
                    setResizeWeight(.25);
                }
                if (!bUseList && getLevel() > 1) setDividerLocation(9999);
            }
        };
        
        splitPane.setOneTouchExpandable(true);
        splitPane.setDividerSize(12);
        splitPane.setResizeWeight(bUseList ? .0 : .95);
        
        JPanel pan = new JPanel(new BorderLayout());
        pan.add(splitPane, BorderLayout.CENTER);
        
        pan.add(new OAScroller(createTableToolBar()), BorderLayout.NORTH);
        return pan;
    }
    public JPopupMenu createTablePopupMenu() {
        JPopupMenu pmenu = new JPopupMenu();
        OAMenuItem mi = createGotoEditMenuItem();
        if (mi != null) pmenu.add(mi);
    
        mi = createTableNewMenuItem();
        if (mi != null) {
            mi.setFocusComponent(tableDcboCreated);
            pmenu.add(mi);
        }
    
        mi = createRemoveMenuItem();
        if (mi != null) {
            pmenu.add(mi);
            pmenu.addSeparator();
        }
        mi = createDeleteMenuItem();
        if (mi != null) {
            pmenu.add(mi);
            pmenu.addSeparator();
        }
        mi = createCutMenuItem();
        if (mi != null) pmenu.add(mi);
        mi = createCopyMenuItem();
        if (mi != null) pmenu.add(mi);
        mi = createPasteMenuItem();
        if (mi != null) pmenu.add(mi);
        return pmenu;
    }
    
    public OAMenuItem createGotoEditMenuItem() {
        if (!getModel().getAllowGotoEdit()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), "Details ...", Resource.getJarIcon(Resource.IMG_Goto)) {
            @Override
            public boolean onActionPerformed() {
                EcardJfc.this.getEditDialog(this).setVisible(true);
                return true;
            }
        };
        mi.setMnemonic(KeyEvent.VK_G);
        return mi;
    }
    
    public OAMenuItem createTableNewMenuItem() {
        if (!getModel().getAllowNew()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAMenuItem.NEW);
        mi.setMnemonic(KeyEvent.VK_N);
        mi.setText("Create a new "+getModel().getDisplayName());
        mi.setFocusComponent(tableDcboCreated);
        return mi;
    }
    
    public OATableScrollPane createTableScrollPane(final OATable table) {
        OATableScrollPane spTable = new OATableScrollPane(table, 1); // set number of fixed columns
        return spTable;
    }
    protected String getToolTipText(OATable table, int row, int col, String defaultValue) {
        // Ecard client = getHub().getAt(row);
        // defaultValue = EcardDelegate.getToolTipText(client, true);
        return defaultValue;
    }
    public OATable createTable() {
        Hub<Ecard> hubTable;
        if (getModel().getAllowTableFilter()) hubTable = new Hub<Ecard>(Ecard.class);
        else hubTable = getModel().getTableHub();
     
        OATable table = new OATable(hubTable) {
            @Override
            public void customizeRenderer(JLabel lbl, JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column, boolean wasChanged, boolean wasMouseOver) {
            }
            @Override
            public String getToolTipText(int row, int col, String defaultValue) {
                defaultValue = super.getToolTipText(row, col, defaultValue);
                return defaultValue;
            }
            @Override
            public void onDoubleClick() {
                if (EcardJfc.this.getModel().getAllowGotoEdit()) {
                    EcardJfc.this.getEditDialog(this).setVisible(true);
                }
            }
        };
     
        // table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        if (getModel().getAllowTableFilter()) {
            table.setMasterFilterHub(getModel().getTableHub());
        }
        table.setAllowDnD(false);
        table.setAllowSorting(true);
        table.setColumnProperties(ModelDelegate.getProperties(), "Ecard");
    
        table.addCounterColumn();
        if (getModel().getAllowMultiSelect()) {
            table.addSelectionColumn(getModel().getMultiSelectHub(), "Select", 9);
        }
        createTableColumns(table);
        
        table.setPreferredSize(3, 3, true);
        table.setShowChanges(true);
        table.resizeColumnsToFitHeading();
        return table;
    }
    
    public void createTableColumns(OATable table) {
        OALabel lbl;
        OATableColumn tc;
        tableDcboCreated = createCreatedDateComboBox();
        tc = table.addColumn("Created", 8, tableDcboCreated);
        tc = table.addColumn("Name", 20, createNameTextField());
        if (getModel().getAllowTableFilter()) {
            tc.setFilterComponent(new OATextFieldFilter(Ecard.P_Name));
        }
        String detailPropertyName = HubDetailDelegate.getPropertyFromDetailToMaster(getHub());
        if (detailPropertyName == null || !detailPropertyName.equalsIgnoreCase(Ecard.P_EcardCategory)) {
            tc = table.addColumn("Ecard Category", 15, createEcardCategoryComboBox());
        }
    }
    
    public OATable createReadOnlyTable() {
        Hub<Ecard> h = new Hub<Ecard>(Ecard.class);
        OATable table = new OATable(h) {
            @Override
            public void customizeRenderer(JLabel lbl, JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column, boolean wasChanged, boolean wasMouseOver) {
            }
            @Override
            public String getToolTipText(int row, int col, String defaultValue) {
                defaultValue = super.getToolTipText(row, col, defaultValue);
                return defaultValue;
            }
            @Override
            public void onDoubleClick() {
                if (EcardJfc.this.getModel().getAllowGotoEdit()) {
                    EcardJfc.this.getEditDialog(this).setVisible(true);
                }
            }
        };
     
        // table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        table.setAllowDnD(false);
        table.setAllowSorting(true);
        table.setMasterFilterHub(getModel().getTableHub());
        table.setColumnProperties(ModelDelegate.getProperties(), "Ecard");
    
        table.addCounterColumn();
        if (getModel().getAllowMultiSelect()) {
            table.addSelectionColumn(getModel().getMultiSelectHub(), "Select", 9);
        }
        createReadOnlyTableColumns(table);
        
        table.resizeColumnsToFitHeading();
        table.setPreferredSize(3, 3, true);
        return table;
    }
    
    protected void createReadOnlyTableColumns(OATable table) {
        OALabel lbl;
        OATableColumn tc;
        tc = table.addColumn("Created", 8, new OALabel(getHub(), Ecard.P_Created, 8));
        tc = table.addColumn("Name", 20, new OALabel(getHub(), Ecard.P_Name, 25));
        if (getModel().getAllowTableFilter()) {
            tc.setFilterComponent(new OATextFieldFilter(Ecard.P_Name));
        }
        lbl = new OALabel(getHub(), OAString.cpp(Ecard.P_EcardCategory, EcardCategory.P_Name));
        if (EcardCategoryJfc.PP_BackColor != null) {
            lbl.setIconColorProperty(OAString.cpp(Ecard.P_EcardCategory) + "." + EcardCategoryJfc.PP_BackColor);
        }
        if (EcardCategoryJfc.PP_Icon != null) {
            lbl.setImageProperty(OAString.cpp(Ecard.P_EcardCategory) + "." + EcardCategoryJfc.PP_Icon);
        }
        tc = table.addColumn("Ecard Category Name", 15, lbl);
    }
    
    public OAButton createGotoEditButton() {
        if (!getModel().getAllowGotoEdit()) return null;
        OAButton cmd = new OAButton(getHub(), "Details ...", Resource.getJarIcon(Resource.IMG_Goto)) {
            @Override
            public void afterActionPerformed() {
                EcardJfc.this.getEditDialog(this).setVisible(true);
                super.afterActionPerformed();
            }
        };
        cmd.setToolTipText("go to the selected "+getModel().getDisplayName());
        OAButton.setup(cmd);
        return cmd;
    }
    
    public OAButton createAddButton() {
        if (!getModel().getAllowAdd() && !getModel().getAllowAutoCreate()) return null;
        OAButton cmd = new OAButton(getHub(), OAButton.ADD_MANUAL) {
            @Override
            public boolean onActionPerformed() {
                EcardJfc.this.onAdd();
                return true;
            }
        };
        cmd.setText("Add ...");
        OAButton.setup(cmd);
        return cmd;
    }
    public OAButton createNewButton() {
        if (!getModel().getAllowNew()) return null;
        OAButton cmd = new OAButton(getHub(), OAButton.NEW) {
            public void afterActionPerformed() {
                EcardJfc.this.onNewEcardCreated();
                super.afterActionPerformed();
            }
        };
        cmd.setText("New");
        cmd.setup();
        return cmd;
    }
    public OAButton createRemoveButton() {
        if (!getModel().getAllowRemove()) return null;
        OAButton cmd = new OAButton(getHub(), OAButton.REMOVE);
        cmd.setMultiSelectHub(getModel().getMultiSelectHub());
        cmd.setText("Remove");
        cmd.setup();
        cmd.setToolTipText("Remove "+getModel().getDisplayName()+" from this list");
        return cmd;
    }
    public OAButton createDeleteButton() {
        if (!getModel().getAllowDelete()) return null;
        OAButton cmd = new OAButton(getHub(), OAButton.DELETE);
        cmd.setMultiSelectHub(getModel().getMultiSelectHub());
        cmd.setConfirmMessage("OK to Delete this "+getModel().getDisplayName()+" from system?");
        cmd.setText("Delete");
        cmd.setup();
        cmd.setUseSwingWorker(true);
        cmd.setProcessingText("Processing ...", "Please wait while deleting "+getModel().getDisplayName());
        return cmd;
    }
    
    public JToolBar createToolBar() {
        JToolBar toolBar = createToolBar(
            true, true, true,
            true, true, true,
            true, true, true,
            true, true, true);
        return toolBar;
    }
    public JToolBar createTableToolBar() {
        JToolBar toolBar = createToolBar(
            false, false, false,
            true, true, false,
            true, false, false,
            true, true, true);
        return toolBar;
    }
    public JToolBar createNorthTableToolBar() {
        JToolBar toolBar = createToolBar(
            false, true, false,
            false, false, false,
            true, false, false,
            true, true, false);
        return toolBar;
    }
    public JToolBar createNorthTableFindToolBar() {
        JToolBar toolBar = createToolBar(
            false, false, false,
            false, false, true,
            true, false, false,
            true, true, false);
        return toolBar;
    }
    public JToolBar createNorthTableSearchToolBar() {
        JToolBar toolBar = createToolBar(
            false, true, false,
            false, false, true,
            false, false, false,
            true, true, false);
        return toolBar;
    }
    public JToolBar createNorthTableSearchFinderToolBar() {
        JToolBar toolBar = createToolBar(
            false, false, false,
            false, false, true,
            false, false, false,
            true, true, false);
        return toolBar;
    }
    public JToolBar createSouthTableToolBar() {
        JToolBar toolBar = createToolBar(
            false, false, false,
            true, true, false,
            false, true, true,
            false, false, true);
        return toolBar;
    }
    public JToolBar createSouthTableSearchToolBar() {
        JToolBar toolBar = createToolBar(
            false, false, false,
            true, true, false,
            false, true, true,
            false, false, false);
        return toolBar;
    }
    public JToolBar createEditPanelToolBar() {
        JToolBar toolBar = createToolBar(
            true, true, false,
            false, true, false,
            false, true, false,
            true, false, false);
        return toolBar;
    }
    public JToolBar createDialogToolBar() {
        JToolBar toolBar = createToolBar(
            false, false, true,
            false, true, false,
            false, true, false,
            true, false, false);
        return toolBar;
    }
    public JToolBar createToolBar(
        boolean bGoBack, boolean bIcon, boolean bLabel,
        boolean bGoto, boolean bCommands, boolean bSearch,
        boolean bFind, boolean bCustom, boolean bHubCalc,
        boolean bReport, boolean bTable, boolean bHubSearch)
    {
        JToolBar toolBar = new JToolBar();
        toolBar.setFloatable(false);
        toolBar.setRollover(true);
        toolBar.add(Box.createHorizontalStrut(10));
        updateToolBar(toolBar,
            bGoBack, bIcon, bLabel,
            bGoto, bCommands, bSearch,
            bFind, bCustom, bHubCalc,
            bReport, bTable, bHubSearch);
        toolBar.add(Box.createHorizontalGlue());
        return toolBar;
    }
    // main createToolBar
    public void updateToolBar(JToolBar toolBar,
        boolean bGoBack, boolean bIcon, boolean bLabel,
        boolean bGoto, boolean bCommands, boolean bSearch,
        boolean bFind, boolean bCustom, boolean bHubCalc,
        boolean bReport, boolean bTable, boolean bHubSearch)
    {
        JButton jcmd;
        OAButton cmd;
        
        if (bGoBack) {
            jcmd = createGotoListButton();
            if (jcmd != null) {
                toolBar.add(jcmd);
                toolBar.add(Box.createHorizontalStrut(7));
            }
        }
        if (bIcon) {
            Icon icon = getTitleIcon();
            JLabel lbl = new JLabel(getModel().getDisplayNamePlural(), icon, JLabel.LEFT);
            lbl.setFont(lbl.getFont().deriveFont(Font.ITALIC));
            toolBar.add(lbl);
            toolBar.add(Box.createHorizontalStrut(10));
        }
        if (bLabel) {
            OALabel lbl = new OALabel(getHub(), OAString.cpp(Ecard.P_Name));
            lbl.setFont(lbl.getFont().deriveFont(Font.ITALIC));
            lbl.setBorder(new EmptyBorder(0,0,0,0));
            toolBar.add(lbl);
            toolBar.add(Box.createHorizontalStrut(10));
        }
        if (bGoto) {
            cmd = createGotoEditButton();
            if (cmd != null) {
                toolBar.add(cmd);
                if (!bCommands) toolBar.add(Box.createHorizontalStrut(10));
            }
        }
        if (bCommands) {
            cmd = createAddButton();
            if (cmd != null) toolBar.add(cmd);
            
            cmd = createNewButton();
            if (cmd != null) {
                cmd.setFocusComponent(tableDcboCreated);
                toolBar.add(cmd);
            }
            cmd = createRemoveButton();
            if (cmd != null) toolBar.add(cmd);
            cmd = createDeleteButton();
            if (cmd != null) toolBar.add(cmd);
            toolBar.add(Box.createHorizontalStrut(10));
        }
        if (bSearch) {
            jcmd = createSearchButton();
            if (jcmd == null) bSearch = false;
            else {
                toolBar.add(jcmd);
                toolBar.add(Box.createHorizontalStrut(10));
            }
        }
        if (bFind) {
            JTextField txt = createAutoCompleteTextField();
            if (txt != null) {
                toolBar.add(Box.createHorizontalStrut(6));
                JLabel lbl = new JLabel(Resource.getJarIcon("find16.png"));
                lbl.setText("Find:");
                new EnabledController(lbl, getHub()) {
                    @Override
                    protected boolean isValid(boolean bIsEnabled) {
                        return bIsEnabled || getHub().getSize()>0;
                    }
                };
                toolBar.add(lbl);
                toolBar.add(Box.createHorizontalStrut(5));
                txt.setColumns(14);
                txt.setToolTipText("find value in listing");
                toolBar.add(txt);
                new EnabledController(txt, getHub()) {
                    @Override
                    protected boolean isValid(boolean bCurrentValue) {
                        return getHub().getSize() > 0;
                    }
                };
                toolBar.add(Box.createHorizontalStrut(10));
            }
        }
        if (!bSearch && bHubSearch) {
            jcmd = createHubSearchButton();
            if (jcmd != null) {
                toolBar.add(jcmd);
                toolBar.add(Box.createHorizontalStrut(10));
            }
        }
        
    }
    public void addCustomCommands(JToolBar toolBar) {
    }
    public JButton createGoBackButton() {
        return null;
    }
    public JButton createGotoListButton() {
        if (!getModel().getAllowGotoList()) return null;
        JButton cmd = new JButton();
        cmd.setIcon(Resource.getJarIcon(Resource.getValue(Resource.IMG_GoBack)));
        cmd.setToolTipText("Go to listing");
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                EcardJfc.this.showCardPanel(EcardJfc.this.CARD_List);
            }
        });
        OAButton.setup(cmd);
        return cmd;
    }
    
    public JButton createSearchButton() {
        if (!getModel().getAllowSearch()) return null;
        JButton cmd = new JButton("Search ...");
        cmd.setIcon(Resource.getJarIcon(Resource.getValue(Resource.IMG_Search)));
        cmd.setToolTipText("advanced search.");
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                EcardJfc.this.onSearch();
            }
        });
        OAButton.setup(cmd);
        return cmd;
    }
    
    public JButton createHubSearchButton() {
        if (!getModel().getAllowHubSearch()) return null;
        JButton cmd = new JButton("Search ...");
        cmd.setIcon(Resource.getJarIcon("hubsearch16.png"));
        cmd.setToolTipText("table search");
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                EcardJfc.this.onHubSearch();
            }
        });
        OAButton.setup(cmd);
        new EnabledController(cmd, getHub()) {
            public boolean isValid() {
                return getHub().getSize() > 0;
            }
        };
        return cmd;
    }
    // Card Panel
    public JPanel getCardPanel() {
        if (cardPanel != null) return cardPanel;
        cardPanel = new JPanel(getCardLayout());
        JToolBar toolBar;
        if (getModel().getAllowSearch()) toolBar = createNorthTableSearchToolBar();
        else toolBar = createNorthTableToolBar();
        JPanel pan = createTablePanel();
        pan.add(new OAScroller(toolBar), BorderLayout.NORTH);
        cardPanel.add(pan, CARD_List);
    
        pan = new JPanel(new BorderLayout());
        pan.add(new OAScroller(createEditPanelToolBar()), BorderLayout.NORTH);
        pan.add(createEditPanel(getTabbedPane(), true), BorderLayout.CENTER);
        cardPanel.add(pan, CARD_Edit);
    
        getCardLayout().show(cardPanel, CARD_List);
        return cardPanel;
    }
    public CardLayout getCardLayout() {
        if (cardLayout == null) {
            cardLayout = new CardLayout(5,5);
        }
        return cardLayout;
    }
    
    // Edit Panel
    public JPanel createEditPanel() {
        return createEditPanel(null, true);
    }
    public JPanel createEditPanel(JTabbedPane tabbedPane, final boolean bUseCombinedDetail) {
        if (tabbedPane == null) {
            if (this.tabbedPane == null) tabbedPane = getTabbedPane();
            else tabbedPane = createTabbedPane();;
        }
        GridBagConstraints gc = new GridBagConstraints();
        gc.insets = new Insets(1, 3, 1, 3);
        gc.anchor = gc.WEST;
        JPanel panel;
        JLabel lbl;
        EnabledController enabledController;
        VisibleController visibleController;
        JButton cmd;
        JComponent comp;
        OALabel olbl;
        OADateComboBox dcbo;
        OATextField txt;
        JPanel panHtml;
        OAComboBox cbo;
        JPanel pan;
        JPanel panMain = new JPanel(new BorderLayout());
        panel = new JPanel(new GridBagLayout());
        panel.setBorder(new EmptyBorder(5,5, 3,3));
    
        lbl = new JLabel("Id:");
        enabledController = new EnabledController(lbl, getHub());
        olbl = createIdLabel();
        lbl.setLabelFor(olbl);
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        gc.gridwidth = gc.REMAINDER;
        panel.add(olbl, gc);
        gc.gridwidth = 1;
    
        lbl = new JLabel("Created:");
        enabledController = new EnabledController(lbl, getHub());
        dcbo = createCreatedDateComboBox();
        lbl.setLabelFor(dcbo);
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        dcboCreated = dcbo;
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        comp = new OAResizePanel(dcbo, 20);
        panel.add(comp, gc);
        gc.fill = gc.NONE;
        gc.gridwidth = 1;
    
        lbl = new JLabel("Name:");
        enabledController = new EnabledController(lbl, getHub());
        txt = createNameTextField();
        lbl.setLabelFor(txt);
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        comp = new OAResizePanel(txt, 75);
        panel.add(comp, gc);
        gc.fill = gc.NONE;
        gc.gridwidth = 1;
        if (getModel().getImageStoreModel().getCreateUI()) {
            lbl = new JLabel("Image:");
            enabledController = new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getImageStoreModel().getViewOnly()) {
                cmd = createImageStoreCommand();
                comp = new OAResizePanel(getImageStoreJfc().createLabel(), cmd, 75);
                enabledController = new EnabledController(comp, getHub());
                panel.add(comp, gc);
            }
            else {
                olbl = createImageStoreLabel();
                lbl.setLabelFor(olbl);
                cmd = createImageStoreCommand();
                comp = olbl;
                comp = new OAResizePanel(comp, cmd, 75);
                enabledController = new EnabledController(comp, getHub());
                panel.add(comp, gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
        if (getModel().getEcardCategoryModel().getCreateUI()) {
            lbl = new JLabel("Ecard Category:");
            enabledController = new EnabledController(lbl, getHub());
            gc.anchor = gc.WEST;
            panel.add(lbl, gc);
            gc.anchor = gc.NORTHWEST;
            gc.gridwidth = gc.REMAINDER;
            gc.fill = gc.HORIZONTAL;
            if (getModel().getEcardCategoryModel().getViewOnly()) {
                cmd = createEcardCategoryCommand();
                comp = new OAResizePanel(getEcardCategoryJfc().createLabel(), cmd, 75);
                enabledController = new EnabledController(comp, getHub());
                panel.add(comp, gc);
            }
            else {
                cbo = createEcardCategoryComboBox();
                lbl.setLabelFor(cbo);
                cmd = createEcardCategoryCommand();
                comp = cbo;
                comp = new OAResizePanel(comp, cmd, 75);
                enabledController = new EnabledController(comp, getHub());
                panel.add(comp, gc);
            }
            gc.gridwidth = 1;
            gc.fill = gc.NONE;
        }
    
        // take up remaining space
        lbl = new JLabel("");
        panel.add(lbl, gc);
        gc.gridwidth = gc.REMAINDER;
        gc.weightx = gc.weighty = 1.0f;
        gc.fill = gc.BOTH;
        panel.add(lbl, gc);
        gc.gridwidth = 1;
        gc.weightx = gc.weighty = 0.0f;
        gc.fill = gc.NONE;
    
        tabbedPane.addTab(getModel().getDisplayName(), getIcon(), new JScrollPane(panel), null);
        panMain.add(tabbedPane, BorderLayout.CENTER);
    
        Icon icon;
        icon = Resource.getJarIcon("note.jpg");
        icon = new ScaledImageIcon(icon, 32, 20);
//qqqqqqqqqqqqqqqqqqqqqq        createTextHTMLTextPanel() ==> createTextHTMLTextPane()
        tabbedPane.addTab("Text", icon, createTextHTMLTextPanel(), null);
        panel = panMain;
    
        return panel;
    }
    
    public JTabbedPane getTabbedPane() {
        if (tabbedPane == null) {
            tabbedPane = createTabbedPane();
        }
        return tabbedPane;
    }
    public JTabbedPane createTabbedPane() {
        JTabbedPane tabbedPane = new JTabbedPane();
        new TabbedPaneController(getHub(), tabbedPane);
        tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT); // WRAP_TAB_LAYOUT
        tabbedPane.setFocusable(true);
        return tabbedPane;
    }
    
    // edit dialog
    public JDialog getEditDialog(Component comp) {
        JDialog dlgEdit;
        if (wrEditDialog != null) {
            dlgEdit = wrEditDialog.get();
            if (dlgEdit != null) return dlgEdit;
        }
        Window win = JfcDelegate.getWindow(comp);
        dlgEdit = new JDialog(win, getModel().getDisplayName(), ModalityType.MODELESS);
        wrEditDialog = new WeakReference(dlgEdit);
        dlgEdit.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
        dlgEdit.setLayout(new BorderLayout());
        JToolBar tb = createDialogToolBar();
        if (tb != null) {
            dlgEdit.add(new OAScroller(tb), BorderLayout.NORTH);
        }
        JPanel panEdit = createEditPanel();
        dlgEdit.add(panEdit, BorderLayout.CENTER);
        
        panEdit.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, false), "esc");
        panEdit.getActionMap().put("esc", new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                getEditDialog(null).setVisible(false);
            }
        });
        
        dlgEdit.pack();
        Dimension dimMax;
        dimMax = Toolkit.getDefaultToolkit().getScreenSize();
        dimMax.width *= .9;
        dimMax.height *= .9;
        Dimension dim = dlgEdit.getSize();
        dim.width = (int) Math.min(dim.width+25, dimMax.width);
        dim.height = (int) Math.min(dim.height+25, dimMax.height);
        dlgEdit.setSize(dim);
        
        dim.width = (int) Math.max(dim.width, dimMax.width/3);
        dim.height = (int) Math.max(dim.height, dimMax.height/3);
        
        if (win != null) dlgEdit.setLocationRelativeTo(win);
        return dlgEdit;
    }
    
    // Filters
    
    public OALabel createIdLabel() {
        OALabel lbl = new OALabel(getHub(), Ecard.P_Id, 7);
        return lbl;
    }
    
    public OADateComboBox createCreatedDateComboBox() {
        OADateComboBox dcbo = new OADateComboBox(getHub(), Ecard.P_Created, 5);
        dcbo.setMaximumColumns(9);
        OATextField txt = new OATextField(getHub(), Ecard.P_Created, 10);
        txt.setEnabled(ModelDelegate.getLoginUserHub(), User.P_EditProcessed, true);    dcbo.setEnabled(ModelDelegate.getLoginUserHub(), User.P_EditProcessed, true);    dcbo.setEditor(txt);
        return dcbo;
    }
    
    public OATextField createNameTextField() {
        OATextField txt = new OATextField(getHub(), Ecard.P_Name, 25);
        // setup(txt);
        return txt;
    }
//qqqqqqqqqqq ????? missing / formatting    
        JPanel pan = new JPanel(new BorderLayout());
            pan.add(new OAScroller(txthtml.getToolBar()), BorderLayout.NORTH);
            pan.add(new JScrollPane(txthtml), BorderLayout.CENTER);
            return pan;
        }
        public OAHTMLTextPane createTextHTMLTextPane() {
            OAHTMLTextPane html = new OAHTMLTextPane(getHub(), Ecard.P_Text);
            html.setSpellChecker(Resource.getSpellChecker());
            html.setPreferredSize(10,  55);
            // need to create a place to have the images stored
            html.createImageHandler(ImageStore.class, ImageStore.P_Bytes, ImageStore.P_OrigFileName, ImageStore.P_Id);
            return html;
        }
        public OALabel createTextLabel() {
            OALabel lbl = new OALabel(getHub(), Ecard.P_Text, 40);
            return lbl;
        }
    
    public OAComboBox createEcardCategoryComboBox() {
        OAComboBox cbo = getEcardCategoryJfc().createComboBox();
        return cbo;
    }
    public JButton createEcardCategoryCommand() {
        EnabledController enabledController;
        VisibleController visibleController;
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        enabledController = new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getEcardCategoryJfc().createGotoEditButton();
        if (cmd != null) {
            enabledController = new EnabledController(cmd, getHub());
            mscmd.addButton(cmd);
        }
        cmd = getEcardCategoryJfc().createAddButton();
        if (cmd != null) {
            cmd.setText("Select ...");
            cmd.setToolTipText(null);
            enabledController = new EnabledController(cmd, getHub());
            mscmd.addButton(cmd);
        }
        cmd = getEcardCategoryJfc().createNewButton();
        if (cmd != null) {
            enabledController = new EnabledController(cmd, getHub());
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            enabledController = new EnabledController(cmd, getHub());
            ((OAButton) cmd).setUpdateObject(Ecard.P_EcardCategory, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getEcardCategoryHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
        }
        return mscmd;
    }
    
    public OALabel createImageStoreLabel() {
        OALabel lbl = getImageStoreJfc().createLabel();
        return lbl;
    }
    public JButton createImageStoreCommand() {
        EnabledController enabledController;
        VisibleController visibleController;
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        enabledController = new EnabledController(mscmd, getHub());
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(false);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        JButton cmd = null;
        cmd = getImageStoreJfc().createGotoEditButton();
        if (cmd != null) {
            enabledController = new EnabledController(cmd, getHub());
            mscmd.addButton(cmd);
        }
        cmd = getImageStoreJfc().createNewButton();
        if (cmd != null) {
            enabledController = new EnabledController(cmd, getHub());
            mscmd.addButton(cmd);
        }
        boolean b = true;
        Hub h;
        if (b) {
            cmd = new OAButton(getHub());
            enabledController = new EnabledController(cmd, getHub());
            ((OAButton) cmd).setUpdateObject(Ecard.P_ImageStore, null);
            cmd.setIcon(OAButton.getDefaultIcon(OAButton.CLEARAO));
            ((OAButton) cmd).setEnabled(model.getImageStoreHub());
            cmd.setText("Clear");
            OAButton.setup(cmd);
            mscmd.addButton(cmd);
        }
        cmd = getImageStoreJfc().createDeleteButton();
        if (cmd != null) {
            cmd.setText("Delete");
            enabledController = new EnabledController(cmd, getHub());
            mscmd.addButton(cmd);
            OAButton.setup(cmd);
        }
        return mscmd;
    }
    
    protected void setup(JTextComponent txt) {
        OATextController tc = new OATextController(txt, Resource.getSpellChecker(), true);
        String s = txt.getToolTipText();
        if (!OAString.isEmpty(s)) s = "<html>"+s+"<br>";
        else s = "<html>";
        s += "<small><i>Right click for more options";
        txt.setToolTipText(s);
    }
    
    // Autocomplete
    public JTextField createAutoCompleteTextField() {
        return createAutoCompleteTextField(PP_Display);
    }
    public JTextField createAutoCompleteTextField(String propertyPath) {
        JTextField txt = new JTextField() {
            @Override
            public Dimension getMaximumSize() {
                return super.getPreferredSize();
            }
        };
        createAutoCompleteTextField(txt, propertyPath);
        return txt;
    }
    
    public void createAutoCompleteTextField(JTextField txtAutoComplete) {
        createAutoCompleteTextField(txtAutoComplete, PP_Display);
    }
    public void createAutoCompleteTextField(JTextField txtAutoComplete, final String properyPath) {
        txtAutoComplete.setColumns(20);
        txtAutoComplete.setToolTipText("Search for " + getModel().getDisplayName());
        
        JList jlist = new JList();
        
        AutoCompleteList autoCompleteList = new AutoCompleteList(txtAutoComplete, jlist, true) {  // true=exact match only
            ArrayList<TreeSearchItem> alList = new ArrayList<TreeSearchItem>();
            
            // data structure used for search data
            class TreeSearchItem implements Comparable {
                Ecard obj;
                String sortValue;
                int pos; // start pos
                String display;
                String text;
                public TreeSearchItem(String sortValue, String display, Ecard obj) {
                    this.sortValue = sortValue;
                    this.display = display;
                    this.obj = obj;
                }
                
                @Override
                public int compareTo(Object o) {
                    if (sortValue != null && o instanceof TreeSearchItem) {
                        return this.sortValue.compareTo( ((TreeSearchItem)o).sortValue);
                    }
                    return -1;
                }
            }
            
            private AtomicInteger aiCnt = new AtomicInteger();
            private void _search(Hub<Ecard> h, String text, final int cnt) {
                for (Ecard obj : h) {
                    String s = obj.getPropertyAsString(properyPath);
                    if (s == null || s.length() == 0) continue;
                    int pos = s.toUpperCase().indexOf(text);
                    if (cnt != aiCnt.get()) break;
                    if (pos >= 0) {
                        TreeSearchItem tsi = new TreeSearchItem(s.substring(pos).toUpperCase(), null, obj);
                        
                        tsi.pos = pos;
                        tsi.display = "<html>";
                        tsi.display += s.substring(0, pos);
                        tsi.display += "<b style='background:rgb(253,250,218)'>"+s.substring(pos, pos + text.length())+"</b>";
                        tsi.display += s.substring(pos + text.length());
                        tsi.text = s;
                        alList.add(tsi);
                        if (alList.size() == 35) break;
                    }
                }
            }
     
            @Override
            protected String[] getSearchData(String text, int offset) {
                final int cnt = aiCnt.incrementAndGet();
                alList.clear();
                
                if (offset == 0) return null;
                if (text == null || text.length() < 1) return null;
                
                if (offset < text.length()) {
                    text = text.substring(0, offset);  // cursor could be in middle of text
                }
                
                text = text.toUpperCase();
                _search(getHub(), text, cnt);
                if (cnt != aiCnt.get()) return null;
                Collections.sort(alList);
                String[] ss = new String[alList.size()];
                for (int i=0; i<ss.length; i++) {
                    TreeSearchItem tsi = alList.get(i);
                    ss[i] = tsi.display;
                }
                return ss;
            }
            @Override
            protected String getClosestMatch(String text) {
                return text;
                /*
                if (text == null || text.length() == 0) return null;
                String[] ss = getSearchData(text, text.length());
                if (s == null || ss.length == 0) return null;
                TreeSearchItem tsi = alList.get(0);
                return tsi.obj.getPropertyAsString(properyPath).substring(tsi.pos);
                */
            }
            
            @Override
            protected String getTextForSelectedValue(int pos, String value) {
                if (pos >= 0 && pos < alList.size()) {
                    TreeSearchItem tsi = alList.get(pos);
                    return tsi.obj.getPropertyAsString(properyPath);
                }
                return value;
            }
            @Override
            protected void onValueSelected(int pos, String value) {
                //System.out.println("onValueSelected => "+value+"  "+pos);
                if (pos >= 0 && pos < alList.size()) {
                    // show tree node
                    TreeSearchItem tsi = alList.get(pos);
                    getHub().setAO(tsi.obj);
                    // EcardJfc.this.onShowEditPanel();
                    super.onValueSelected(pos, tsi.text);
                }
            }
            @Override
            protected String getToolTipText(int pos) {
                String s = null;
                if (pos >= 0) {
                    TreeSearchItem tsi = alList.get(pos);
                    s = OAString.fmt(tsi.obj.getPropertyAsString(properyPath));
                }
                return "<html>"+s;
            }
        };
        autoCompleteList.setShowOne(true);
        // base enabled on valid Hub
        new EnabledController(txtAutoComplete, getHub(), null, OAAnyValueObject.instance);
    }
    
    public EcardCategoryJfc getEcardCategoryJfc() {
        if (jfcEcardCategory != null) return jfcEcardCategory;
        jfcEcardCategory = new EcardCategoryJfc(getModel().getEcardCategoryModel()) {
            @Override
            protected void onNewEcardCategoryCreated() {
                getEditDialog(EcardJfc.this.getCardPanel()).setVisible(true);
            }
        };
        jfcEcardCategory.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcEcardCategory, this);
        return jfcEcardCategory;
    }
    public ImageStoreJfc getImageStoreJfc() {
        if (jfcImageStore != null) return jfcImageStore;
        jfcImageStore = new ImageStoreJfc(getModel().getImageStoreModel()) {
            @Override
            protected void onNewImageStoreCreated() {
                getEditDialog(EcardJfc.this.getCardPanel()).setVisible(true);
            }
        };
        jfcImageStore.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcImageStore, this);
        return jfcImageStore;
    }
    // OnShowCommands
    public void showCardPanel(String name) {
        if (name == null) return;
        if (cardPanel == null) return;
        getCardLayout().show(getCardPanel(), name);
    }
    protected void onShowListPanel() {
        showCardPanel(CARD_List);
    }
    protected void onShowEditPanel() {
        showCardPanel(CARD_Edit);
    }
    protected void onNewEcardCreated() {
        onShowEditPanel();
        if (getTabbedPane().getTabCount() > 0) {
            getTabbedPane().setSelectedIndex(0);
        }
        getModel().resetTableHub(); // in case filter was being used
    }
    protected void onDoubleClickTreeNode() {
        if (getModel().getAllowGotoEdit()) {
            getEditDialog(null).setVisible(true);
        }
    }
    
    // Inner Search
    public EcardSearchJfc getSearchHubJfc() {
        if (searchHubJfc == null) {
            searchHubJfc = new EcardSearchJfc(true, false);
            searchHubJfc.getModel().setSearchFromHub(getHub());
        }
        return searchHubJfc;
    }
    protected void onHubSearch() {
        getSearchHubJfc().getDialog(getCardPanel()).setVisible(true);
        if (!getSearchHubJfc().wasSelected()) return;
        Ecard ecard = getSearchHubJfc().getSelected();
        if (ecard == null) return;
        if (!getHub().contains(ecard)) ecard = null;
        getHub().setAO(ecard);
    }
    // Search
    protected EcardSearchJfc getSearchJfc() {
        if (searchJfc == null) {
            searchJfc = new EcardSearchJfc();
        }
        return searchJfc;
    }
    protected void onSearch() {
        getSearchJfc().getDialog(getCardPanel()).setVisible(true);
        if (!getSearchJfc().wasSelected()) return;
        Ecard ecard = getSearchJfc().getSelected();
    
        if (ecard == null) return;
    
        getHub().setAO(ecard);
        
        OATree tree = getTreeUsed();
        if (tree != null) {
            tree.setSelectedNode(ecard);
        }
        
        onShowEditPanel();
    }
    protected void onAdd() {
        getSearchJfc().getDialog(getCardPanel()).setVisible(true);
        if (!getSearchJfc().wasSelected()) return;
        Ecard ecard = getSearchJfc().getSelected();
        
        if (ecard == null) return;
        
        if (!getHub().contains(ecard)) {
            getHub().add(ecard);
        }
        getHub().setAO(ecard);
    }
    
    
    public OAMultiButtonSplitButton createTableButton() {
        OAMultiButtonSplitButton mscmd = new OAMultiButtonSplitButton();
        mscmd.setShowTextInSelectedButton(true);
        mscmd.setAllowChangeMasterButton(true);
        mscmd.setRequestFocusEnabled(false);
        mscmd.setFocusPainted(false);
        OAButton.setup(mscmd);
        
        JButton cmd = createUnFilterButton();
        if (cmd != null) mscmd.addButton(cmd);
        if (mscmd.getButtonCount() < 2) return null;
        mscmd.setBorderPainted(true);
        return mscmd;
    }
    public JButton createUnFilterButton() {
        JButton cmd = new JButton("show all");
        cmd.setFont(cmd.getFont().deriveFont(Font.ITALIC)); 
        cmd.setToolTipText("show default list, without grouping or filtering"); 
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                EcardJfc.this.getModel().resetTableHub();
            }
        });
        OAButton.setup(cmd);
        return cmd;
    }
    
    public static void main(String[] args) {
        User user = new User();
        user.setAdmin(true);
        ModelDelegate.setLoginUser(user);
        TestDelegate td = new TestDelegate();
        td.createSampleData(null);
        
        EcardJfc ui = new EcardJfc(ModelDelegate.getEcards().createSharedHub()) {
            @Override
            protected EcardSearchJfc getSearchJfc() {
                if (this.searchJfc == null) {
                    this.searchJfc = new EcardSearchJfc(false, true) {
                        protected void onSearch() {
                            super.onSearch();
                            afterSearchCustom();
                        }
                    };
                }
                return this.searchJfc;
            }
            private void afterSearchCustom() {
                getHub().setSharedHub(getSearchJfc().getHub());
            }
        };
        ui.getModel().setAllowNew(true);
        ui.getModel().setAllowDelete(true);
        
        JFrame frm = new JFrame();
        JfcDelegate.setMainWindow(frm);
        frm.setTitle(ui.getModel().getDisplayName());
        frm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = new JMenu(ui.getModel().getDisplayNamePlural());
        menu.add(ui.createNewMenuItem());
        menu.addSeparator();
        menu.add(ui.createDeleteMenuItem());
        menuBar.add(menu);
        
        frm.setJMenuBar(menuBar);
        
        OATree tree = new OATree(15, 17);
        tree.setAllowDnD(true);
        
        OATreeNode tn = ui.getTreeTitleNode();
        tree.add(tn);
        tn.add(ui.getTreeNode());
        
        String cmd = "esc";
        tree.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0 ,false), cmd);
        tree.getActionMap().put(cmd, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
        
        frm.setLayout(new BorderLayout());
        /*
        JToolBar toolBar = new JToolBar();
        toolBar.setBorderPainted(false);
        toolBar.setFloatable(true);
        toolBar.setRollover(true);
        
        OACheckBox chk = new OACheckBox(ModelDelegate.getUserAccessHub(), UserAccess.P_IsAdmin);
        chk.setText("Admin access");
        toolBar.add(chk);
        */
        JToolBar toolBar = ui.createNorthTableSearchToolBar();
        if (toolBar != null) frm.add(new OAScroller(toolBar), BorderLayout.NORTH);
        
        // ui.getTablePanel().add(new OAScroller(ui.createToolBar(true)), BorderLayout.NORTH);
        // frm.add(ui.getTablePanel(), BorderLayout.SOUTH);
        
        JPanel pan = new JPanel(new BorderLayout());
        // pan.add(ui.createTitlePanel(), BorderLayout.NORTH);
        pan.add(ui.getCardPanel());
        
        JSplitPane sp = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, new JScrollPane(tree), pan);
        sp.setOneTouchExpandable(true);
        sp.setDividerSize(6);
        int w = OATable.getCharWidth(tree, 20);
        sp.setDividerLocation(w);
    
        /*
        sp = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, sp, new JScrollPane(ui.createList()));
        sp.setOneTouchExpandable(true);
        sp.setDividerSize(6);
        sp.setResizeWeight(.90);
        */
        frm.add(sp, BorderLayout.CENTER);
        
        frm.pack();
        Dimension d = frm.getSize();
        Dimension dimScreen = Toolkit.getDefaultToolkit().getScreenSize();
        d.width = Math.min(d.width, dimScreen.width - 80);
        d.height = Math.min(d.height, dimScreen.height - 80);
        frm.setSize(d);
        
        frm.setLocation(new Point(40, 40));
        frm.setVisible(true);
    }
}

