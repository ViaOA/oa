

20170112 new ICE jks for ICESocket
    produced by Scott Akers
        using info that he has on icespace
            https://icespace.cpex.com/docs/DOC-39682    

20161116 sent to Thomas at ice
    C:\Users\vvia\git\icesocket\icesocket\src\main\java\com\ice\comm\server>
    "C:\Program Files\Java\jdk1.8.0_74\bin\keytool" -list -v -keystore icesslserver.jks -storepass password



20150601 new cert for tsac, the old one expired
copied from:
    https://stash.intcx.net/projects/WEBICE/repos/webice/browse/signing?at=refs%2Fheads%2F12.975
C:\projects\workspace\tsac\tsac-core\keystore>"C:\Program Files\Java\jdk1.7.0_55\bin\keytool" -list -v -keystore icestore -storepass password


"C:\Program Files\Java\jdk1.7.0_55\bin\keytool" -list -v -keystore viaoa.jks -storepass vince1


==== 20150609 generate jks files for SSL client & server


cd cd C:\projects\java\OA\keystore
"C:\Program Files\Java\jdk1.7.0_55\bin\keytool"

1) Create keystore for server
    run build.xml "KeyStore_SSLServer"
        >> creates sslserver.jks
2) Export server certificate
    keytool -export -alias sslserver -keystore sslserver.jks -storepass vince1 -file sslserver.cer


3) Import server cert into new client keystore
    keytool -import -trustcacerts -keystore sslclient.jks -storepass vince1 -file sslserver.cer
    >> creates sslclient.jks
    
4) verify
    "C:\Program Files\Java\jdk1.7.0_55\bin\keytool" -list -v -keystore sslserver.jks -storepass vince1

    
5) copy to ssl*.jks to codebase:
    C:\projects\java\OA\src\main\java\com\viaoa\comm\ssl    

copy ssl*.jks C:\projects\java\OA\src\main\java\com\viaoa\comm\ssl




=================
20160127 imported new from thawte
    following these instructions
    see thawte_20151225

Cert from Thawte Jan 2015

Generate new viaoa.jks
    1: use build.xml to generate viaoa.jks
    2: create CSR to send to thawte.com
        keytool -certreq -alias viaoa -file viaoa.csr -keystore viaoa.jks -storepass vince1
    go to thawte and buy code signing cert
    3: import cert
        keytool -import -trustcacerts -keystore viaoa.jks -alias viaoa -storepass vince1 -file thawte.crt
        
    verify:
        keytool -printcert -file thawte.crt
        keytool -list -v -keystore viaoa.jks -storepass vince1

    jarsigner -verify oabuilder.jar
    
     
Thawte:  https://search.thawte.com/support/ssl-digital-certificates/index?page=content&id=AR185&actp=search&viewlocale=en_US


======= 20130205 ICE certs
    
    "C:\Program Files\Java\jdk1.7.0_55\bin\keytool"
    
    **********************************
    *** Solution to import Geo cert to icesslserver.jks ***
    copy/unzip geo file "trading.theice.com-2017.pfx" to empty directory
    
    >> import cert into new ice jks - this will create icesslserver.jks
    keytool -importkeystore -srckeystore "trading.theice.com-2017.pfx" -srcstoretype pkcs12 -srcstorepass "W3b!ce123" -srcalias "1" -destkeystore icesslserver.jks -deststoretype jks -deststorepass password -destalias icessl -destkeypass password
    
    >> verify/list new ice jks
    keytool -list -v -keystore icesslserver.jks -storepass password
    
    >> Export public key to cert file, so that it can be imported into client jks
    keytool -export -alias icessl -keystore icesslserver.jks -storepass password -file icesslserver.cer
    
    >> Import to cert file to icesslclient jks - this will create client jks
    keytool -import -trustcacerts -keystore icesslclient.jks -storepass password -file icesslserver.cer -alias icessl
    
    >> Verify
    keytool -list -v -keystore icesslclient.jks -storepass password
    



-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
The certificates and java keystore can be generated using the following steps:

1: Create keystore for server
keytool -genkeypair -v -keyalg RSA -keysize 2048 -validity 3650 -alias viaoa -keystore viaoa.jks -storepass vince1 -dname "cn=www.viaoa.com, OU=ICE, O=ViaOA, L=Powder Springs, ST=GA, C=US"

2: Export server certificate
keytool -export -alias viaoa -keystore viaoa.jks -storepass vince1 -file viaoa.cer

3:Import server cert into new client keystore
keytool -import -trustcacerts -keystore client.jks -storepass password -file viaoa.cer

qqqqqqqqqqqqq
keytool -import -trustcacerts -keystore viaoa.jks -storepass vince1 -file gohi5.com.crt


4: Verify
keytool -list -v -keystore viaoa.jks -storepass vince1
-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

See ICE: ICEServer.getSSLContext has info about certificate
        
        
====== 20120330 created new keystore, and sent csr to no-ip for SSL certificate

keytool -genkeypair -v -keyalg RSA -keysize 2048 -validity 36500 -alias viaoa -keystore viaoa.jks -storepass vince1 -dname "cn=www.viaoa.com, OU=ViaOA, O=ViaOA, L=Powder Springs, ST=GA, C=US"

-- generate a certificate request
keytool -certreq -alias viaoa -keyalg RSA -file viaoa.csr -keystore viaoa.jks -storepass vince1 
     

====== 20120910 created new keystore viaoa.jks, moved from website to viaoa project


********** Build task ******************

<!-- KeyStore used for Jar file signing -->
<target name="KeyStore">
    <delete file="keystore/.keystore" />
    <genkey alias="viaoa" storepass="vince1" keystore="keystore/.keystore" validity="720" verbose="true">
        <dname>
            <param name="cn" value="viaoa.com"/>
            <param name="ou" value="Vince Via"/>
            <param name="o" value="ViaOA"/>
            <param name="l" value="Powder Springs"/>
            <param name="s" value="GA"/>
            <param name="c" value="US"/>
        </dname>
    </genkey>       
</target>
     



qqqqqqqqqqqqqqqqqq OTHER NOTES qqqqqqqqqqqqqqqqqqqqqqqqqqqqq

20090728 --------- Used to create ICE files for using SSL + RMI
**1) Create keystore for server
keytool -genkeypair -v  -keyalg RSA -keysize 1024 -validity 1825 -alias icessl -keystore icesslserver.jks -storepass password -dname "cn=www.theice.com, OU=ICE, O=ICE, L=Atlanta, ST=GA, C=US"
>> creates icessl.jks

**2) Export server certificate
keytool -export -alias icessl -keystore icesslserver.jks -storepass password -file icesslserver.cer


**3) Import server cert into new client keystore
keytool -import -trustcacerts -keystore icesslclient.jks -storepass password -file icesslserver.cer

keytool -list -v -keystore icesslserver.jks -storepass password




2007/12/28 ******* NOTE: this is now done in the build.xml

0: About
Keytool.exe is in java\jdk1.6.0_01\bin
default keystore is in default user directory\.keystore

1: read about:
www.mindprod.com/jgloss/keytoolexe.html

2: create new keystore for viaoa
> keytool -genkeypair -validity <valDays> -alias viaoa -keystore .keystore -dname "cn=viaoa.com, ou=Vince Via, o=ViaOA, l=Powder Srings, s=GA c=US"
   
   
   

3: list keys in keystore
> keytool -list -keystore .keystore -storepass vince1

4: This can be used to sign jar files
> jarsigner -keystore .keystore oabuilder.jar viaoa



OTHER -----------

>>> Using Cert Authority
> 2: export the public key as a certificate.  
>    This would then be sent to Verisign or Thawte
keytool -certreq -alias viaoa -file viaoa.csr -keystore .keystore

> 3: to set up a "dummy" certificate authority
> 3a: create key pair
keytool -genkeypair -alias viaoaca -keystore ca.keystore

> 3b: setup my keystore as a "fake" certificate authority
keytool -selfcert -alias viaoaca -keystore ca.keystore

> 3c: export the self-signed certificate in x.509 printable format, public key only
keytool -exportcert -alias viaoaca -rfc -file cert.cer -keystore ca.keystore


> 4: import returned certificate (cert.cer)
keytool -importcert -alias jarsigner -trustcacerts -file cert.cer -keystore .keystore


Exporting -----------
keytool -export -alias viaoa -keystore keystore -storepass vince1 -file viaoa.cert

Importing -----------
keytool -import -alias viaoa -keystore fileName -storepass vince1 -file viaoa.cert

========
Jetty:
    http://docs.codehaus.org/display/JETTY/How+to+configure+SSL
   
Oracle:
    http://docs.oracle.com/javase/1.5.0/docs/tooldocs/solaris/keytool.html   

tutorial   
    http://www.mobilefish.com/tutorials/java/java_quickguide_keytool.html   
   

        